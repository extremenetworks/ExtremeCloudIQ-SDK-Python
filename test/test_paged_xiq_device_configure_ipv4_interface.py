# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.6.0.74
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import extremecloudiq
from extremecloudiq.models.paged_xiq_device_configure_ipv4_interface import PagedXiqDeviceConfigureIpv4Interface  # noqa: E501
from extremecloudiq.rest import ApiException

class TestPagedXiqDeviceConfigureIpv4Interface(unittest.TestCase):
    """PagedXiqDeviceConfigureIpv4Interface unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PagedXiqDeviceConfigureIpv4Interface
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = extremecloudiq.models.paged_xiq_device_configure_ipv4_interface.PagedXiqDeviceConfigureIpv4Interface()  # noqa: E501
        if include_optional :
            return PagedXiqDeviceConfigureIpv4Interface(
                page = 56, 
                count = 56, 
                total_pages = 56, 
                total_count = 56, 
                data = [
                    extremecloudiq.models.xiq_device_configure_ipv4_interface.XiqDeviceConfigureIpv4Interface(
                        subnetwork = extremecloudiq.models.xiq_device_subnetwork_ipv4.XiqDeviceSubnetworkIpv4(
                            id = 56, 
                            name = '0', 
                            description = '0', 
                            ip_addr_space = '0', 
                            gateway_ip_type = 'FIRST', 
                            vlan_profile = '0', 
                            enable_dhcp = True, 
                            dhcp_relay = extremecloudiq.models.xiq_device_dhcp_relay.XiqDeviceDhcpRelay(
                                id = 56, 
                                name = '0', 
                                description = '0', 
                                service_type = 'DHCP_RELAY_AGENT', 
                                platform = 'SWITCH_ENGINE_OR_FABRIC_ENGINE', 
                                primary_server = '0', 
                                secondary_server = '0', ), 
                            clients_number = 56, ), 
                        vlan_attribute = extremecloudiq.models.xiq_device_vlan_attributes.XiqDeviceVlanAttributes(
                            name = '0', 
                            dhcp_snooping_enabled = True, 
                            dhcp_snooping_action = 'NONE', 
                            igmp_snooping_enabled = True, 
                            immediate_leave = True, 
                            always_create = True, 
                            vlan_obj = extremecloudiq.models.xiq_vlan_object.XiqVlanObject(
                                id = 56, 
                                create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                org_id = 56, 
                                owner_id = 56, 
                                name = '0', 
                                default_vlan_id = 1, 
                                enable_classification = True, 
                                classified_entries = [
                                    extremecloudiq.models.xiq_vlan_object_classified_entry.XiqVlanObjectClassifiedEntry(
                                        id = 56, 
                                        create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        org_id = 56, 
                                        vlan_id = 1, 
                                        classification_rule = extremecloudiq.models.xiq_classification_rule.XiqClassificationRule(
                                            id = 56, 
                                            create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            org_id = 56, 
                                            name = '0', 
                                            description = '0', 
                                            classifications = [
                                                extremecloudiq.models.xiq_classification.XiqClassification(
                                                    id = 56, 
                                                    create_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                    update_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                    classification_type = 'LOCATION', 
                                                    match = True, 
                                                    classification_id = 56, 
                                                    value = '0', )
                                                ], ), )
                                    ], ), 
                            vlan_id = 56, ), 
                        ip_address = '0', 
                        ip_address_to_int = 56, 
                        routing_instance = '0', 
                        enable_forwarding = True, 
                        enable_vlan_loopback = True, 
                        use_ip_addr_as_ospf_router_id = True, 
                        override_dhcp_relay = True, 
                        enable_dhcp = True, 
                        primary_dhcp_server = '0', 
                        secondary_dhcp_server = '0', 
                        predefined = True, 
                        ipv4_interface_id = 56, )
                    ]
            )
        else :
            return PagedXiqDeviceConfigureIpv4Interface(
                page = 56,
                count = 56,
                total_pages = 56,
                total_count = 56,
        )

    def testPagedXiqDeviceConfigureIpv4Interface(self):
        """Test PagedXiqDeviceConfigureIpv4Interface"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
