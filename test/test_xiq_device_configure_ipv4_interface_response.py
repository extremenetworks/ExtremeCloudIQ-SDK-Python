# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.2.0.39
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import extremecloudiq
from extremecloudiq.models.xiq_device_configure_ipv4_interface_response import XiqDeviceConfigureIpv4InterfaceResponse  # noqa: E501
from extremecloudiq.rest import ApiException

class TestXiqDeviceConfigureIpv4InterfaceResponse(unittest.TestCase):
    """XiqDeviceConfigureIpv4InterfaceResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test XiqDeviceConfigureIpv4InterfaceResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = extremecloudiq.models.xiq_device_configure_ipv4_interface_response.XiqDeviceConfigureIpv4InterfaceResponse()  # noqa: E501
        if include_optional :
            return XiqDeviceConfigureIpv4InterfaceResponse(
                ip_address = '0', 
                routing_instance = '0', 
                enable_forwarding = True, 
                enable_vlan_loopback = True, 
                use_ip_addr_as_ospf_router_id = True, 
                override_dhcp_relay = True, 
                enable_dhcp = True, 
                primary_dhcp_server = '0', 
                secondary_dhcp_server = '0', 
                predefined = True, 
                subnetwork_id = 56, 
                ipv4_interface_id = 56, 
                vlan_attribute = extremecloudiq.models.xiq_device_vlan_attributes.XiqDeviceVlanAttributes(
                    name = '0', 
                    dhcp_snooping_enabled = True, 
                    dhcp_snooping_action = 'NONE', 
                    igmp_snooping_enabled = True, 
                    immediate_leave = True, 
                    always_create = True, 
                    vlan_id = 56, )
            )
        else :
            return XiqDeviceConfigureIpv4InterfaceResponse(
                ip_address = '0',
                routing_instance = '0',
                enable_forwarding = True,
                enable_vlan_loopback = True,
                use_ip_addr_as_ospf_router_id = True,
                override_dhcp_relay = True,
                enable_dhcp = True,
                primary_dhcp_server = '0',
                secondary_dhcp_server = '0',
                predefined = True,
        )

    def testXiqDeviceConfigureIpv4InterfaceResponse(self):
        """Test XiqDeviceConfigureIpv4InterfaceResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
