# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.2.0.39
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import extremecloudiq
from extremecloudiq.models.xiq_device_monitor_ipv4_routing import XiqDeviceMonitorIpv4Routing  # noqa: E501
from extremecloudiq.rest import ApiException

class TestXiqDeviceMonitorIpv4Routing(unittest.TestCase):
    """XiqDeviceMonitorIpv4Routing unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test XiqDeviceMonitorIpv4Routing
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = extremecloudiq.models.xiq_device_monitor_ipv4_routing.XiqDeviceMonitorIpv4Routing()  # noqa: E501
        if include_optional :
            return XiqDeviceMonitorIpv4Routing(
                earliest_refresh_time = '0', 
                latest_refresh_time = '0', 
                latest_refresh_timestamp = 56, 
                ipv4_routing_details = [
                    extremecloudiq.models.xiq_device_monitor_ipv4_routing_detail.XiqDeviceMonitorIpv4RoutingDetail(
                        destination = '0', 
                        nexthop = extremecloudiq.models.xiq_device_monitor_ipv4_route_nexthop.XiqDeviceMonitorIpv4RouteNexthop(
                            nexthop_ipv4_address = '0', 
                            nexthop_device_id = 56, 
                            nexthop_host_name = '0', 
                            ping_protection_enabled = True, 
                            ping_protection_state = '0', 
                            ping_protection_last_uptime = '0', 
                            ping_protection_last_downtime = '0', 
                            routing_instance = '0', ), 
                        vlan_id = 56, 
                        vlan_name = '0', 
                        route_origin = '0', 
                        status = '0', 
                        metric = 56, 
                        age = 56, 
                        route_type_priority = '0', 
                        routing_instance = '0', )
                    ]
            )
        else :
            return XiqDeviceMonitorIpv4Routing(
                earliest_refresh_time = '0',
                latest_refresh_time = '0',
                latest_refresh_timestamp = 56,
                ipv4_routing_details = [
                    extremecloudiq.models.xiq_device_monitor_ipv4_routing_detail.XiqDeviceMonitorIpv4RoutingDetail(
                        destination = '0', 
                        nexthop = extremecloudiq.models.xiq_device_monitor_ipv4_route_nexthop.XiqDeviceMonitorIpv4RouteNexthop(
                            nexthop_ipv4_address = '0', 
                            nexthop_device_id = 56, 
                            nexthop_host_name = '0', 
                            ping_protection_enabled = True, 
                            ping_protection_state = '0', 
                            ping_protection_last_uptime = '0', 
                            ping_protection_last_downtime = '0', 
                            routing_instance = '0', ), 
                        vlan_id = 56, 
                        vlan_name = '0', 
                        route_origin = '0', 
                        status = '0', 
                        metric = 56, 
                        age = 56, 
                        route_type_priority = '0', 
                        routing_instance = '0', )
                    ],
        )

    def testXiqDeviceMonitorIpv4Routing(self):
        """Test XiqDeviceMonitorIpv4Routing"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
