# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.1.0.65
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqWgs84(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'latitude': 'float',
        'longitude': 'float',
        'altitude': 'float'
    }

    attribute_map = {
        'latitude': 'latitude',
        'longitude': 'longitude',
        'altitude': 'altitude'
    }

    def __init__(self, latitude=None, longitude=None, altitude=None, local_vars_configuration=None):  # noqa: E501
        """XiqWgs84 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._latitude = None
        self._longitude = None
        self._altitude = None
        self.discriminator = None

        self.latitude = latitude
        self.longitude = longitude
        self.altitude = altitude

    @property
    def latitude(self):
        """Gets the latitude of this XiqWgs84.  # noqa: E501

        Degrees of latitude. Positive values indicate latitudes north of the equator; negative values indicate latitudes south of the equator.   # noqa: E501

        :return: The latitude of this XiqWgs84.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this XiqWgs84.

        Degrees of latitude. Positive values indicate latitudes north of the equator; negative values indicate latitudes south of the equator.   # noqa: E501

        :param latitude: The latitude of this XiqWgs84.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and latitude is None:  # noqa: E501
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this XiqWgs84.  # noqa: E501

        Degrees of longitude. Measurements are relative to the zero meridian, with positive values extending east of the meridian and negative values extending west of the meridian.  # noqa: E501

        :return: The longitude of this XiqWgs84.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this XiqWgs84.

        Degrees of longitude. Measurements are relative to the zero meridian, with positive values extending east of the meridian and negative values extending west of the meridian.  # noqa: E501

        :param longitude: The longitude of this XiqWgs84.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and longitude is None:  # noqa: E501
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def altitude(self):
        """Gets the altitude of this XiqWgs84.  # noqa: E501

        Meters above sea level.  # noqa: E501

        :return: The altitude of this XiqWgs84.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this XiqWgs84.

        Meters above sea level.  # noqa: E501

        :param altitude: The altitude of this XiqWgs84.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and altitude is None:  # noqa: E501
            raise ValueError("Invalid value for `altitude`, must not be `None`")  # noqa: E501

        self._altitude = altitude

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqWgs84):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqWgs84):
            return True

        return self.to_dict() != other.to_dict()
