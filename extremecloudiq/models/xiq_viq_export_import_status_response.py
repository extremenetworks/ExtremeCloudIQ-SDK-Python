# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.3.1.2
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqViqExportImportStatusResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_name': 'str',
        'vhm_id': 'str',
        'operation': 'str',
        'status': 'str',
        'total_finish_percentage': 'int',
        'viq_task_progresses': 'list[XiqViqTaskProgress]'
    }

    attribute_map = {
        'user_name': 'user_name',
        'vhm_id': 'vhm_id',
        'operation': 'operation',
        'status': 'status',
        'total_finish_percentage': 'total_finish_percentage',
        'viq_task_progresses': 'viq_task_progresses'
    }

    def __init__(self, user_name=None, vhm_id=None, operation=None, status=None, total_finish_percentage=None, viq_task_progresses=None, local_vars_configuration=None):  # noqa: E501
        """XiqViqExportImportStatusResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_name = None
        self._vhm_id = None
        self._operation = None
        self._status = None
        self._total_finish_percentage = None
        self._viq_task_progresses = None
        self.discriminator = None

        if user_name is not None:
            self.user_name = user_name
        if vhm_id is not None:
            self.vhm_id = vhm_id
        if operation is not None:
            self.operation = operation
        if status is not None:
            self.status = status
        if total_finish_percentage is not None:
            self.total_finish_percentage = total_finish_percentage
        if viq_task_progresses is not None:
            self.viq_task_progresses = viq_task_progresses

    @property
    def user_name(self):
        """Gets the user_name of this XiqViqExportImportStatusResponse.  # noqa: E501

        Name of the user  # noqa: E501

        :return: The user_name of this XiqViqExportImportStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this XiqViqExportImportStatusResponse.

        Name of the user  # noqa: E501

        :param user_name: The user_name of this XiqViqExportImportStatusResponse.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def vhm_id(self):
        """Gets the vhm_id of this XiqViqExportImportStatusResponse.  # noqa: E501

        VHM ID of the user  # noqa: E501

        :return: The vhm_id of this XiqViqExportImportStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._vhm_id

    @vhm_id.setter
    def vhm_id(self, vhm_id):
        """Sets the vhm_id of this XiqViqExportImportStatusResponse.

        VHM ID of the user  # noqa: E501

        :param vhm_id: The vhm_id of this XiqViqExportImportStatusResponse.  # noqa: E501
        :type: str
        """

        self._vhm_id = vhm_id

    @property
    def operation(self):
        """Gets the operation of this XiqViqExportImportStatusResponse.  # noqa: E501

        Type of operation  # noqa: E501

        :return: The operation of this XiqViqExportImportStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this XiqViqExportImportStatusResponse.

        Type of operation  # noqa: E501

        :param operation: The operation of this XiqViqExportImportStatusResponse.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def status(self):
        """Gets the status of this XiqViqExportImportStatusResponse.  # noqa: E501

        Current status of operation  # noqa: E501

        :return: The status of this XiqViqExportImportStatusResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this XiqViqExportImportStatusResponse.

        Current status of operation  # noqa: E501

        :param status: The status of this XiqViqExportImportStatusResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_finish_percentage(self):
        """Gets the total_finish_percentage of this XiqViqExportImportStatusResponse.  # noqa: E501

        Total finish percentage  # noqa: E501

        :return: The total_finish_percentage of this XiqViqExportImportStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_finish_percentage

    @total_finish_percentage.setter
    def total_finish_percentage(self, total_finish_percentage):
        """Sets the total_finish_percentage of this XiqViqExportImportStatusResponse.

        Total finish percentage  # noqa: E501

        :param total_finish_percentage: The total_finish_percentage of this XiqViqExportImportStatusResponse.  # noqa: E501
        :type: int
        """

        self._total_finish_percentage = total_finish_percentage

    @property
    def viq_task_progresses(self):
        """Gets the viq_task_progresses of this XiqViqExportImportStatusResponse.  # noqa: E501


        :return: The viq_task_progresses of this XiqViqExportImportStatusResponse.  # noqa: E501
        :rtype: list[XiqViqTaskProgress]
        """
        return self._viq_task_progresses

    @viq_task_progresses.setter
    def viq_task_progresses(self, viq_task_progresses):
        """Sets the viq_task_progresses of this XiqViqExportImportStatusResponse.


        :param viq_task_progresses: The viq_task_progresses of this XiqViqExportImportStatusResponse.  # noqa: E501
        :type: list[XiqViqTaskProgress]
        """

        self._viq_task_progresses = viq_task_progresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqViqExportImportStatusResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqViqExportImportStatusResponse):
            return True

        return self.to_dict() != other.to_dict()
