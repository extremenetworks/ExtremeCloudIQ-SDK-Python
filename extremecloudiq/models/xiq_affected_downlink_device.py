# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqAffectedDownlinkDevice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host_name': 'str',
        'product_type': 'str',
        'interface_name': 'str',
        'port_id': 'str',
        'last_detected_time': 'int'
    }

    attribute_map = {
        'host_name': 'host_name',
        'product_type': 'product_type',
        'interface_name': 'interface_name',
        'port_id': 'port_id',
        'last_detected_time': 'last_detected_time'
    }

    def __init__(self, host_name=None, product_type=None, interface_name=None, port_id=None, last_detected_time=None, local_vars_configuration=None):  # noqa: E501
        """XiqAffectedDownlinkDevice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._host_name = None
        self._product_type = None
        self._interface_name = None
        self._port_id = None
        self._last_detected_time = None
        self.discriminator = None

        if host_name is not None:
            self.host_name = host_name
        if product_type is not None:
            self.product_type = product_type
        if interface_name is not None:
            self.interface_name = interface_name
        if port_id is not None:
            self.port_id = port_id
        if last_detected_time is not None:
            self.last_detected_time = last_detected_time

    @property
    def host_name(self):
        """Gets the host_name of this XiqAffectedDownlinkDevice.  # noqa: E501

        The host name of affected downlink device  # noqa: E501

        :return: The host_name of this XiqAffectedDownlinkDevice.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this XiqAffectedDownlinkDevice.

        The host name of affected downlink device  # noqa: E501

        :param host_name: The host_name of this XiqAffectedDownlinkDevice.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def product_type(self):
        """Gets the product_type of this XiqAffectedDownlinkDevice.  # noqa: E501

        The model of affected downlink device  # noqa: E501

        :return: The product_type of this XiqAffectedDownlinkDevice.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this XiqAffectedDownlinkDevice.

        The model of affected downlink device  # noqa: E501

        :param product_type: The product_type of this XiqAffectedDownlinkDevice.  # noqa: E501
        :type: str
        """

        self._product_type = product_type

    @property
    def interface_name(self):
        """Gets the interface_name of this XiqAffectedDownlinkDevice.  # noqa: E501

        The interface name of affected downlink device  # noqa: E501

        :return: The interface_name of this XiqAffectedDownlinkDevice.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this XiqAffectedDownlinkDevice.

        The interface name of affected downlink device  # noqa: E501

        :param interface_name: The interface_name of this XiqAffectedDownlinkDevice.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def port_id(self):
        """Gets the port_id of this XiqAffectedDownlinkDevice.  # noqa: E501

        The port ID of affected downlink device  # noqa: E501

        :return: The port_id of this XiqAffectedDownlinkDevice.  # noqa: E501
        :rtype: str
        """
        return self._port_id

    @port_id.setter
    def port_id(self, port_id):
        """Sets the port_id of this XiqAffectedDownlinkDevice.

        The port ID of affected downlink device  # noqa: E501

        :param port_id: The port_id of this XiqAffectedDownlinkDevice.  # noqa: E501
        :type: str
        """

        self._port_id = port_id

    @property
    def last_detected_time(self):
        """Gets the last_detected_time of this XiqAffectedDownlinkDevice.  # noqa: E501

        The last detected timestamp  # noqa: E501

        :return: The last_detected_time of this XiqAffectedDownlinkDevice.  # noqa: E501
        :rtype: int
        """
        return self._last_detected_time

    @last_detected_time.setter
    def last_detected_time(self, last_detected_time):
        """Sets the last_detected_time of this XiqAffectedDownlinkDevice.

        The last detected timestamp  # noqa: E501

        :param last_detected_time: The last_detected_time of this XiqAffectedDownlinkDevice.  # noqa: E501
        :type: int
        """

        self._last_detected_time = last_detected_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqAffectedDownlinkDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqAffectedDownlinkDevice):
            return True

        return self.to_dict() != other.to_dict()
