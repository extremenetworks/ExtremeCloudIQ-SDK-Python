# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 23.6.0.46
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqDigitalTwinProducts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'make': 'str',
        'model': 'str',
        'os_type': 'str',
        'os_versions': 'list[str]'
    }

    attribute_map = {
        'make': 'make',
        'model': 'model',
        'os_type': 'os_type',
        'os_versions': 'os_versions'
    }

    def __init__(self, make=None, model=None, os_type=None, os_versions=None, local_vars_configuration=None):  # noqa: E501
        """XiqDigitalTwinProducts - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._make = None
        self._model = None
        self._os_type = None
        self._os_versions = None
        self.discriminator = None

        self.make = make
        self.model = model
        if os_type is not None:
            self.os_type = os_type
        self.os_versions = os_versions

    @property
    def make(self):
        """Gets the make of this XiqDigitalTwinProducts.  # noqa: E501

        The Digital Twin device make.  # noqa: E501

        :return: The make of this XiqDigitalTwinProducts.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this XiqDigitalTwinProducts.

        The Digital Twin device make.  # noqa: E501

        :param make: The make of this XiqDigitalTwinProducts.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and make is None:  # noqa: E501
            raise ValueError("Invalid value for `make`, must not be `None`")  # noqa: E501

        self._make = make

    @property
    def model(self):
        """Gets the model of this XiqDigitalTwinProducts.  # noqa: E501

        The Digital Twin device model.  # noqa: E501

        :return: The model of this XiqDigitalTwinProducts.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this XiqDigitalTwinProducts.

        The Digital Twin device model.  # noqa: E501

        :param model: The model of this XiqDigitalTwinProducts.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and model is None:  # noqa: E501
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def os_type(self):
        """Gets the os_type of this XiqDigitalTwinProducts.  # noqa: E501

        The Digital Twin device OS type.  # noqa: E501

        :return: The os_type of this XiqDigitalTwinProducts.  # noqa: E501
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this XiqDigitalTwinProducts.

        The Digital Twin device OS type.  # noqa: E501

        :param os_type: The os_type of this XiqDigitalTwinProducts.  # noqa: E501
        :type: str
        """

        self._os_type = os_type

    @property
    def os_versions(self):
        """Gets the os_versions of this XiqDigitalTwinProducts.  # noqa: E501

        The Digital Twin device OS versions.  # noqa: E501

        :return: The os_versions of this XiqDigitalTwinProducts.  # noqa: E501
        :rtype: list[str]
        """
        return self._os_versions

    @os_versions.setter
    def os_versions(self, os_versions):
        """Sets the os_versions of this XiqDigitalTwinProducts.

        The Digital Twin device OS versions.  # noqa: E501

        :param os_versions: The os_versions of this XiqDigitalTwinProducts.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and os_versions is None:  # noqa: E501
            raise ValueError("Invalid value for `os_versions`, must not be `None`")  # noqa: E501

        self._os_versions = os_versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqDigitalTwinProducts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqDigitalTwinProducts):
            return True

        return self.to_dict() != other.to_dict()
