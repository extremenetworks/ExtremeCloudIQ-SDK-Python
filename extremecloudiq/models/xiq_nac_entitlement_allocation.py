# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.1.0.65
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqNacEntitlementAllocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allocation_list': 'list[XiqNacEntitlementAllocationDetail]',
        'total_available_nac_licenses': 'int',
        'available_nac_licenses': 'int'
    }

    attribute_map = {
        'allocation_list': 'allocation_list',
        'total_available_nac_licenses': 'total_available_nac_licenses',
        'available_nac_licenses': 'available_nac_licenses'
    }

    def __init__(self, allocation_list=None, total_available_nac_licenses=None, available_nac_licenses=None, local_vars_configuration=None):  # noqa: E501
        """XiqNacEntitlementAllocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allocation_list = None
        self._total_available_nac_licenses = None
        self._available_nac_licenses = None
        self.discriminator = None

        if allocation_list is not None:
            self.allocation_list = allocation_list
        if total_available_nac_licenses is not None:
            self.total_available_nac_licenses = total_available_nac_licenses
        if available_nac_licenses is not None:
            self.available_nac_licenses = available_nac_licenses

    @property
    def allocation_list(self):
        """Gets the allocation_list of this XiqNacEntitlementAllocation.  # noqa: E501

        Allocation detail list  # noqa: E501

        :return: The allocation_list of this XiqNacEntitlementAllocation.  # noqa: E501
        :rtype: list[XiqNacEntitlementAllocationDetail]
        """
        return self._allocation_list

    @allocation_list.setter
    def allocation_list(self, allocation_list):
        """Sets the allocation_list of this XiqNacEntitlementAllocation.

        Allocation detail list  # noqa: E501

        :param allocation_list: The allocation_list of this XiqNacEntitlementAllocation.  # noqa: E501
        :type: list[XiqNacEntitlementAllocationDetail]
        """

        self._allocation_list = allocation_list

    @property
    def total_available_nac_licenses(self):
        """Gets the total_available_nac_licenses of this XiqNacEntitlementAllocation.  # noqa: E501

        Total available NAC license count  # noqa: E501

        :return: The total_available_nac_licenses of this XiqNacEntitlementAllocation.  # noqa: E501
        :rtype: int
        """
        return self._total_available_nac_licenses

    @total_available_nac_licenses.setter
    def total_available_nac_licenses(self, total_available_nac_licenses):
        """Sets the total_available_nac_licenses of this XiqNacEntitlementAllocation.

        Total available NAC license count  # noqa: E501

        :param total_available_nac_licenses: The total_available_nac_licenses of this XiqNacEntitlementAllocation.  # noqa: E501
        :type: int
        """

        self._total_available_nac_licenses = total_available_nac_licenses

    @property
    def available_nac_licenses(self):
        """Gets the available_nac_licenses of this XiqNacEntitlementAllocation.  # noqa: E501

        Available NAC license count  # noqa: E501

        :return: The available_nac_licenses of this XiqNacEntitlementAllocation.  # noqa: E501
        :rtype: int
        """
        return self._available_nac_licenses

    @available_nac_licenses.setter
    def available_nac_licenses(self, available_nac_licenses):
        """Sets the available_nac_licenses of this XiqNacEntitlementAllocation.

        Available NAC license count  # noqa: E501

        :param available_nac_licenses: The available_nac_licenses of this XiqNacEntitlementAllocation.  # noqa: E501
        :type: int
        """

        self._available_nac_licenses = available_nac_licenses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqNacEntitlementAllocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqNacEntitlementAllocation):
            return True

        return self.to_dict() != other.to_dict()
