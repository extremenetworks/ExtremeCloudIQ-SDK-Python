# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqCreateL3AddressProfileRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'value': 'str',
        'address_type': 'XiqL3AddressType',
        'enable_classification': 'bool',
        'classified_entries': 'list[XiqAddressProfileClassifiedEntry]',
        'ip_address_end': 'str',
        'netmask': 'str',
        'wildcard_mask': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'value': 'value',
        'address_type': 'address_type',
        'enable_classification': 'enable_classification',
        'classified_entries': 'classified_entries',
        'ip_address_end': 'ip_address_end',
        'netmask': 'netmask',
        'wildcard_mask': 'wildcard_mask'
    }

    def __init__(self, name=None, description=None, value=None, address_type=None, enable_classification=None, classified_entries=None, ip_address_end=None, netmask=None, wildcard_mask=None, local_vars_configuration=None):  # noqa: E501
        """XiqCreateL3AddressProfileRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._value = None
        self._address_type = None
        self._enable_classification = None
        self._classified_entries = None
        self._ip_address_end = None
        self._netmask = None
        self._wildcard_mask = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.value = value
        self.address_type = address_type
        if enable_classification is not None:
            self.enable_classification = enable_classification
        if classified_entries is not None:
            self.classified_entries = classified_entries
        if ip_address_end is not None:
            self.ip_address_end = ip_address_end
        if netmask is not None:
            self.netmask = netmask
        if wildcard_mask is not None:
            self.wildcard_mask = wildcard_mask

    @property
    def name(self):
        """Gets the name of this XiqCreateL3AddressProfileRequest.  # noqa: E501

        The L3 Address profile name  # noqa: E501

        :return: The name of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XiqCreateL3AddressProfileRequest.

        The L3 Address profile name  # noqa: E501

        :param name: The name of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this XiqCreateL3AddressProfileRequest.  # noqa: E501

        The L3 Address profile description  # noqa: E501

        :return: The description of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this XiqCreateL3AddressProfileRequest.

        The L3 Address profile description  # noqa: E501

        :param description: The description of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this XiqCreateL3AddressProfileRequest.  # noqa: E501

        The L3 Address profile value  # noqa: E501

        :return: The value of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this XiqCreateL3AddressProfileRequest.

        The L3 Address profile value  # noqa: E501

        :param value: The value of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def address_type(self):
        """Gets the address_type of this XiqCreateL3AddressProfileRequest.  # noqa: E501


        :return: The address_type of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :rtype: XiqL3AddressType
        """
        return self._address_type

    @address_type.setter
    def address_type(self, address_type):
        """Sets the address_type of this XiqCreateL3AddressProfileRequest.


        :param address_type: The address_type of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :type: XiqL3AddressType
        """
        if self.local_vars_configuration.client_side_validation and address_type is None:  # noqa: E501
            raise ValueError("Invalid value for `address_type`, must not be `None`")  # noqa: E501

        self._address_type = address_type

    @property
    def enable_classification(self):
        """Gets the enable_classification of this XiqCreateL3AddressProfileRequest.  # noqa: E501

        The flag to enable classification entries on host name address profile  # noqa: E501

        :return: The enable_classification of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_classification

    @enable_classification.setter
    def enable_classification(self, enable_classification):
        """Sets the enable_classification of this XiqCreateL3AddressProfileRequest.

        The flag to enable classification entries on host name address profile  # noqa: E501

        :param enable_classification: The enable_classification of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :type: bool
        """

        self._enable_classification = enable_classification

    @property
    def classified_entries(self):
        """Gets the classified_entries of this XiqCreateL3AddressProfileRequest.  # noqa: E501

        The host name address profile classified entries  # noqa: E501

        :return: The classified_entries of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :rtype: list[XiqAddressProfileClassifiedEntry]
        """
        return self._classified_entries

    @classified_entries.setter
    def classified_entries(self, classified_entries):
        """Sets the classified_entries of this XiqCreateL3AddressProfileRequest.

        The host name address profile classified entries  # noqa: E501

        :param classified_entries: The classified_entries of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :type: list[XiqAddressProfileClassifiedEntry]
        """

        self._classified_entries = classified_entries

    @property
    def ip_address_end(self):
        """Gets the ip_address_end of this XiqCreateL3AddressProfileRequest.  # noqa: E501

        The classified entry IP address end, only available for \"IP_RANGE\" address type  # noqa: E501

        :return: The ip_address_end of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip_address_end

    @ip_address_end.setter
    def ip_address_end(self, ip_address_end):
        """Sets the ip_address_end of this XiqCreateL3AddressProfileRequest.

        The classified entry IP address end, only available for \"IP_RANGE\" address type  # noqa: E501

        :param ip_address_end: The ip_address_end of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :type: str
        """

        self._ip_address_end = ip_address_end

    @property
    def netmask(self):
        """Gets the netmask of this XiqCreateL3AddressProfileRequest.  # noqa: E501

        The classified entry IP address end, only available for \"IP_SUBNET\" address type  # noqa: E501

        :return: The netmask of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this XiqCreateL3AddressProfileRequest.

        The classified entry IP address end, only available for \"IP_SUBNET\" address type  # noqa: E501

        :param netmask: The netmask of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def wildcard_mask(self):
        """Gets the wildcard_mask of this XiqCreateL3AddressProfileRequest.  # noqa: E501

        The wildcard address profile mask value, only available for \"WILDCARD\" address type  # noqa: E501

        :return: The wildcard_mask of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._wildcard_mask

    @wildcard_mask.setter
    def wildcard_mask(self, wildcard_mask):
        """Sets the wildcard_mask of this XiqCreateL3AddressProfileRequest.

        The wildcard address profile mask value, only available for \"WILDCARD\" address type  # noqa: E501

        :param wildcard_mask: The wildcard_mask of this XiqCreateL3AddressProfileRequest.  # noqa: E501
        :type: str
        """

        self._wildcard_mask = wildcard_mask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqCreateL3AddressProfileRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqCreateL3AddressProfileRequest):
            return True

        return self.to_dict() != other.to_dict()
