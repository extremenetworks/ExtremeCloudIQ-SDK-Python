# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.6.0.74
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqDeviceFirmwareMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'firmware_id': 'int',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'firmware_name': 'str',
        'firmware_type': 'str',
        'scope': 'str',
        'version': 'str',
        'date': 'str',
        'firmware_size': 'str',
        'display_version': 'str',
        'supported_platforms': 'str',
        'md5': 'str'
    }

    attribute_map = {
        'firmware_id': 'firmware_id',
        'create_time': 'create_time',
        'update_time': 'update_time',
        'firmware_name': 'firmware_name',
        'firmware_type': 'firmware_type',
        'scope': 'scope',
        'version': 'version',
        'date': 'date',
        'firmware_size': 'firmware_size',
        'display_version': 'display_version',
        'supported_platforms': 'supported_platforms',
        'md5': 'md5'
    }

    def __init__(self, firmware_id=None, create_time=None, update_time=None, firmware_name=None, firmware_type=None, scope=None, version=None, date=None, firmware_size=None, display_version=None, supported_platforms=None, md5=None, local_vars_configuration=None):  # noqa: E501
        """XiqDeviceFirmwareMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._firmware_id = None
        self._create_time = None
        self._update_time = None
        self._firmware_name = None
        self._firmware_type = None
        self._scope = None
        self._version = None
        self._date = None
        self._firmware_size = None
        self._display_version = None
        self._supported_platforms = None
        self._md5 = None
        self.discriminator = None

        self.firmware_id = firmware_id
        self.create_time = create_time
        self.update_time = update_time
        if firmware_name is not None:
            self.firmware_name = firmware_name
        if firmware_type is not None:
            self.firmware_type = firmware_type
        if scope is not None:
            self.scope = scope
        if version is not None:
            self.version = version
        if date is not None:
            self.date = date
        if firmware_size is not None:
            self.firmware_size = firmware_size
        if display_version is not None:
            self.display_version = display_version
        if supported_platforms is not None:
            self.supported_platforms = supported_platforms
        if md5 is not None:
            self.md5 = md5

    @property
    def firmware_id(self):
        """Gets the firmware_id of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The firmware metadata ID  # noqa: E501

        :return: The firmware_id of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: int
        """
        return self._firmware_id

    @firmware_id.setter
    def firmware_id(self, firmware_id):
        """Sets the firmware_id of this XiqDeviceFirmwareMetadata.

        The firmware metadata ID  # noqa: E501

        :param firmware_id: The firmware_id of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and firmware_id is None:  # noqa: E501
            raise ValueError("Invalid value for `firmware_id`, must not be `None`")  # noqa: E501

        self._firmware_id = firmware_id

    @property
    def create_time(self):
        """Gets the create_time of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The create time  # noqa: E501

        :return: The create_time of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this XiqDeviceFirmwareMetadata.

        The create time  # noqa: E501

        :param create_time: The create_time of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and create_time is None:  # noqa: E501
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The last update time  # noqa: E501

        :return: The update_time of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this XiqDeviceFirmwareMetadata.

        The last update time  # noqa: E501

        :param update_time: The update_time of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and update_time is None:  # noqa: E501
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    @property
    def firmware_name(self):
        """Gets the firmware_name of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The firmware name  # noqa: E501

        :return: The firmware_name of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: str
        """
        return self._firmware_name

    @firmware_name.setter
    def firmware_name(self, firmware_name):
        """Sets the firmware_name of this XiqDeviceFirmwareMetadata.

        The firmware name  # noqa: E501

        :param firmware_name: The firmware_name of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: str
        """

        self._firmware_name = firmware_name

    @property
    def firmware_type(self):
        """Gets the firmware_type of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The firmware type  # noqa: E501

        :return: The firmware_type of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: str
        """
        return self._firmware_type

    @firmware_type.setter
    def firmware_type(self, firmware_type):
        """Sets the firmware_type of this XiqDeviceFirmwareMetadata.

        The firmware type  # noqa: E501

        :param firmware_type: The firmware_type of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: str
        """

        self._firmware_type = firmware_type

    @property
    def scope(self):
        """Gets the scope of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The firmware availability scope  # noqa: E501

        :return: The scope of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this XiqDeviceFirmwareMetadata.

        The firmware availability scope  # noqa: E501

        :param scope: The scope of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: str
        """

        self._scope = scope

    @property
    def version(self):
        """Gets the version of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The firmware version  # noqa: E501

        :return: The version of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this XiqDeviceFirmwareMetadata.

        The firmware version  # noqa: E501

        :param version: The version of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def date(self):
        """Gets the date of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The firmware release date  # noqa: E501

        :return: The date of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this XiqDeviceFirmwareMetadata.

        The firmware release date  # noqa: E501

        :param date: The date of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: str
        """

        self._date = date

    @property
    def firmware_size(self):
        """Gets the firmware_size of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The firmware size  # noqa: E501

        :return: The firmware_size of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: str
        """
        return self._firmware_size

    @firmware_size.setter
    def firmware_size(self, firmware_size):
        """Sets the firmware_size of this XiqDeviceFirmwareMetadata.

        The firmware size  # noqa: E501

        :param firmware_size: The firmware_size of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: str
        """

        self._firmware_size = firmware_size

    @property
    def display_version(self):
        """Gets the display_version of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The firmware display version  # noqa: E501

        :return: The display_version of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: str
        """
        return self._display_version

    @display_version.setter
    def display_version(self, display_version):
        """Sets the display_version of this XiqDeviceFirmwareMetadata.

        The firmware display version  # noqa: E501

        :param display_version: The display_version of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: str
        """

        self._display_version = display_version

    @property
    def supported_platforms(self):
        """Gets the supported_platforms of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The platforms supported by the firmware  # noqa: E501

        :return: The supported_platforms of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: str
        """
        return self._supported_platforms

    @supported_platforms.setter
    def supported_platforms(self, supported_platforms):
        """Sets the supported_platforms of this XiqDeviceFirmwareMetadata.

        The platforms supported by the firmware  # noqa: E501

        :param supported_platforms: The supported_platforms of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: str
        """

        self._supported_platforms = supported_platforms

    @property
    def md5(self):
        """Gets the md5 of this XiqDeviceFirmwareMetadata.  # noqa: E501

        The firmware md5 hash  # noqa: E501

        :return: The md5 of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :rtype: str
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this XiqDeviceFirmwareMetadata.

        The firmware md5 hash  # noqa: E501

        :param md5: The md5 of this XiqDeviceFirmwareMetadata.  # noqa: E501
        :type: str
        """

        self._md5 = md5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqDeviceFirmwareMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqDeviceFirmwareMetadata):
            return True

        return self.to_dict() != other.to_dict()
