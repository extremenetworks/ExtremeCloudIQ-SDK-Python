# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.1.0.65
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqLicenseSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'legacy_license_added': 'bool',
        'extreme_portal_linked': 'bool',
        'shared_cuid': 'str'
    }

    attribute_map = {
        'legacy_license_added': 'legacy_license_added',
        'extreme_portal_linked': 'extreme_portal_linked',
        'shared_cuid': 'shared_cuid'
    }

    def __init__(self, legacy_license_added=None, extreme_portal_linked=None, shared_cuid=None, local_vars_configuration=None):  # noqa: E501
        """XiqLicenseSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._legacy_license_added = None
        self._extreme_portal_linked = None
        self._shared_cuid = None
        self.discriminator = None

        self.legacy_license_added = legacy_license_added
        self.extreme_portal_linked = extreme_portal_linked
        if shared_cuid is not None:
            self.shared_cuid = shared_cuid

    @property
    def legacy_license_added(self):
        """Gets the legacy_license_added of this XiqLicenseSummary.  # noqa: E501

        Whether there is legacy license added  # noqa: E501

        :return: The legacy_license_added of this XiqLicenseSummary.  # noqa: E501
        :rtype: bool
        """
        return self._legacy_license_added

    @legacy_license_added.setter
    def legacy_license_added(self, legacy_license_added):
        """Sets the legacy_license_added of this XiqLicenseSummary.

        Whether there is legacy license added  # noqa: E501

        :param legacy_license_added: The legacy_license_added of this XiqLicenseSummary.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and legacy_license_added is None:  # noqa: E501
            raise ValueError("Invalid value for `legacy_license_added`, must not be `None`")  # noqa: E501

        self._legacy_license_added = legacy_license_added

    @property
    def extreme_portal_linked(self):
        """Gets the extreme_portal_linked of this XiqLicenseSummary.  # noqa: E501

        Whether Extreme portal account is linked  # noqa: E501

        :return: The extreme_portal_linked of this XiqLicenseSummary.  # noqa: E501
        :rtype: bool
        """
        return self._extreme_portal_linked

    @extreme_portal_linked.setter
    def extreme_portal_linked(self, extreme_portal_linked):
        """Sets the extreme_portal_linked of this XiqLicenseSummary.

        Whether Extreme portal account is linked  # noqa: E501

        :param extreme_portal_linked: The extreme_portal_linked of this XiqLicenseSummary.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and extreme_portal_linked is None:  # noqa: E501
            raise ValueError("Invalid value for `extreme_portal_linked`, must not be `None`")  # noqa: E501

        self._extreme_portal_linked = extreme_portal_linked

    @property
    def shared_cuid(self):
        """Gets the shared_cuid of this XiqLicenseSummary.  # noqa: E501

        Shared Cuid of the Extreme portal account  # noqa: E501

        :return: The shared_cuid of this XiqLicenseSummary.  # noqa: E501
        :rtype: str
        """
        return self._shared_cuid

    @shared_cuid.setter
    def shared_cuid(self, shared_cuid):
        """Sets the shared_cuid of this XiqLicenseSummary.

        Shared Cuid of the Extreme portal account  # noqa: E501

        :param shared_cuid: The shared_cuid of this XiqLicenseSummary.  # noqa: E501
        :type: str
        """

        self._shared_cuid = shared_cuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqLicenseSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqLicenseSummary):
            return True

        return self.to_dict() != other.to_dict()
