# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 23.7.0.64
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'address2': 'str',
        'city': 'str',
        'state': 'str',
        'postal_code': 'str'
    }

    attribute_map = {
        'address': 'address',
        'address2': 'address2',
        'city': 'city',
        'state': 'state',
        'postal_code': 'postal_code'
    }

    def __init__(self, address=None, address2=None, city=None, state=None, postal_code=None, local_vars_configuration=None):  # noqa: E501
        """XiqAddress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._address2 = None
        self._city = None
        self._state = None
        self._postal_code = None
        self.discriminator = None

        self.address = address
        if address2 is not None:
            self.address2 = address2
        self.city = city
        self.state = state
        self.postal_code = postal_code

    @property
    def address(self):
        """Gets the address of this XiqAddress.  # noqa: E501

        The address line 1  # noqa: E501

        :return: The address of this XiqAddress.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this XiqAddress.

        The address line 1  # noqa: E501

        :param address: The address of this XiqAddress.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and address is None:  # noqa: E501
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def address2(self):
        """Gets the address2 of this XiqAddress.  # noqa: E501

        The address line 2  # noqa: E501

        :return: The address2 of this XiqAddress.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this XiqAddress.

        The address line 2  # noqa: E501

        :param address2: The address2 of this XiqAddress.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this XiqAddress.  # noqa: E501

        The city/town of the address  # noqa: E501

        :return: The city of this XiqAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this XiqAddress.

        The city/town of the address  # noqa: E501

        :param city: The city of this XiqAddress.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and city is None:  # noqa: E501
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def state(self):
        """Gets the state of this XiqAddress.  # noqa: E501

        The province/state of the address  # noqa: E501

        :return: The state of this XiqAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this XiqAddress.

        The province/state of the address  # noqa: E501

        :param state: The state of this XiqAddress.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def postal_code(self):
        """Gets the postal_code of this XiqAddress.  # noqa: E501

        The postal/ZIP code of the address  # noqa: E501

        :return: The postal_code of this XiqAddress.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this XiqAddress.

        The postal/ZIP code of the address  # noqa: E501

        :param postal_code: The postal_code of this XiqAddress.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and postal_code is None:  # noqa: E501
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqAddress):
            return True

        return self.to_dict() != other.to_dict()
