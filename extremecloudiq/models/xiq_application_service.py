# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqApplicationService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'application': 'XiqApplication',
        'service_type': 'str'
    }

    attribute_map = {
        'application': 'application',
        'service_type': 'service_type'
    }

    def __init__(self, application=None, service_type=None, local_vars_configuration=None):  # noqa: E501
        """XiqApplicationService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._application = None
        self._service_type = None
        self.discriminator = None

        if application is not None:
            self.application = application
        if service_type is not None:
            self.service_type = service_type

    @property
    def application(self):
        """Gets the application of this XiqApplicationService.  # noqa: E501


        :return: The application of this XiqApplicationService.  # noqa: E501
        :rtype: XiqApplication
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this XiqApplicationService.


        :param application: The application of this XiqApplicationService.  # noqa: E501
        :type: XiqApplication
        """

        self._application = application

    @property
    def service_type(self):
        """Gets the service_type of this XiqApplicationService.  # noqa: E501

        Service Type.  # noqa: E501

        :return: The service_type of this XiqApplicationService.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this XiqApplicationService.

        Service Type.  # noqa: E501

        :param service_type: The service_type of this XiqApplicationService.  # noqa: E501
        :type: str
        """
        allowed_values = ["NETWORK", "APPLICATION"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and service_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"  # noqa: E501
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqApplicationService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqApplicationService):
            return True

        return self.to_dict() != other.to_dict()
