# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.2.0.39
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqDeviceMonitorIpv4RoutingTimeline(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'response_code': 'int',
        'range_start_time': 'int',
        'range_stop_time': 'int',
        'updated': 'int',
        'precision': 'int',
        'ipv4_routing_timelines': 'list[XiqDeviceMonitorIpv4RoutingTimelineInfo]'
    }

    attribute_map = {
        'response_code': 'response_code',
        'range_start_time': 'range_start_time',
        'range_stop_time': 'range_stop_time',
        'updated': 'updated',
        'precision': 'precision',
        'ipv4_routing_timelines': 'ipv4_routing_timelines'
    }

    def __init__(self, response_code=None, range_start_time=None, range_stop_time=None, updated=None, precision=None, ipv4_routing_timelines=None, local_vars_configuration=None):  # noqa: E501
        """XiqDeviceMonitorIpv4RoutingTimeline - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._response_code = None
        self._range_start_time = None
        self._range_stop_time = None
        self._updated = None
        self._precision = None
        self._ipv4_routing_timelines = None
        self.discriminator = None

        self.response_code = response_code
        self.range_start_time = range_start_time
        self.range_stop_time = range_stop_time
        self.updated = updated
        self.precision = precision
        self.ipv4_routing_timelines = ipv4_routing_timelines

    @property
    def response_code(self):
        """Gets the response_code of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501

        Response code  # noqa: E501

        :return: The response_code of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this XiqDeviceMonitorIpv4RoutingTimeline.

        Response code  # noqa: E501

        :param response_code: The response_code of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and response_code is None:  # noqa: E501
            raise ValueError("Invalid value for `response_code`, must not be `None`")  # noqa: E501

        self._response_code = response_code

    @property
    def range_start_time(self):
        """Gets the range_start_time of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501

        Start Time  # noqa: E501

        :return: The range_start_time of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :rtype: int
        """
        return self._range_start_time

    @range_start_time.setter
    def range_start_time(self, range_start_time):
        """Sets the range_start_time of this XiqDeviceMonitorIpv4RoutingTimeline.

        Start Time  # noqa: E501

        :param range_start_time: The range_start_time of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and range_start_time is None:  # noqa: E501
            raise ValueError("Invalid value for `range_start_time`, must not be `None`")  # noqa: E501

        self._range_start_time = range_start_time

    @property
    def range_stop_time(self):
        """Gets the range_stop_time of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501

        Range stop time  # noqa: E501

        :return: The range_stop_time of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :rtype: int
        """
        return self._range_stop_time

    @range_stop_time.setter
    def range_stop_time(self, range_stop_time):
        """Sets the range_stop_time of this XiqDeviceMonitorIpv4RoutingTimeline.

        Range stop time  # noqa: E501

        :param range_stop_time: The range_stop_time of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and range_stop_time is None:  # noqa: E501
            raise ValueError("Invalid value for `range_stop_time`, must not be `None`")  # noqa: E501

        self._range_stop_time = range_stop_time

    @property
    def updated(self):
        """Gets the updated of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501

        updated   # noqa: E501

        :return: The updated of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this XiqDeviceMonitorIpv4RoutingTimeline.

        updated   # noqa: E501

        :param updated: The updated of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and updated is None:  # noqa: E501
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def precision(self):
        """Gets the precision of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501

        precision  # noqa: E501

        :return: The precision of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this XiqDeviceMonitorIpv4RoutingTimeline.

        precision  # noqa: E501

        :param precision: The precision of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and precision is None:  # noqa: E501
            raise ValueError("Invalid value for `precision`, must not be `None`")  # noqa: E501

        self._precision = precision

    @property
    def ipv4_routing_timelines(self):
        """Gets the ipv4_routing_timelines of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501

        The IPv4 Routing timeline info that are monitored per Routing Instance on the device  # noqa: E501

        :return: The ipv4_routing_timelines of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :rtype: list[XiqDeviceMonitorIpv4RoutingTimelineInfo]
        """
        return self._ipv4_routing_timelines

    @ipv4_routing_timelines.setter
    def ipv4_routing_timelines(self, ipv4_routing_timelines):
        """Sets the ipv4_routing_timelines of this XiqDeviceMonitorIpv4RoutingTimeline.

        The IPv4 Routing timeline info that are monitored per Routing Instance on the device  # noqa: E501

        :param ipv4_routing_timelines: The ipv4_routing_timelines of this XiqDeviceMonitorIpv4RoutingTimeline.  # noqa: E501
        :type: list[XiqDeviceMonitorIpv4RoutingTimelineInfo]
        """
        if self.local_vars_configuration.client_side_validation and ipv4_routing_timelines is None:  # noqa: E501
            raise ValueError("Invalid value for `ipv4_routing_timelines`, must not be `None`")  # noqa: E501

        self._ipv4_routing_timelines = ipv4_routing_timelines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqDeviceMonitorIpv4RoutingTimeline):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqDeviceMonitorIpv4RoutingTimeline):
            return True

        return self.to_dict() != other.to_dict()
