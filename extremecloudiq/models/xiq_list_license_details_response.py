# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.1.0.65
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqListLicenseDetailsResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'license_key': 'str',
        'status': 'XiqLicenseDetailStatus',
        'devices': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'license_key': 'license_key',
        'status': 'status',
        'devices': 'devices',
        'start_time': 'start_time',
        'end_time': 'end_time'
    }

    def __init__(self, id=None, license_key=None, status=None, devices=None, start_time=None, end_time=None, local_vars_configuration=None):  # noqa: E501
        """XiqListLicenseDetailsResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._license_key = None
        self._status = None
        self._devices = None
        self._start_time = None
        self._end_time = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if license_key is not None:
            self.license_key = license_key
        if status is not None:
            self.status = status
        if devices is not None:
            self.devices = devices
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time

    @property
    def id(self):
        """Gets the id of this XiqListLicenseDetailsResponse.  # noqa: E501

        License id  # noqa: E501

        :return: The id of this XiqListLicenseDetailsResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XiqListLicenseDetailsResponse.

        License id  # noqa: E501

        :param id: The id of this XiqListLicenseDetailsResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def license_key(self):
        """Gets the license_key of this XiqListLicenseDetailsResponse.  # noqa: E501

        License Key  # noqa: E501

        :return: The license_key of this XiqListLicenseDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._license_key

    @license_key.setter
    def license_key(self, license_key):
        """Sets the license_key of this XiqListLicenseDetailsResponse.

        License Key  # noqa: E501

        :param license_key: The license_key of this XiqListLicenseDetailsResponse.  # noqa: E501
        :type: str
        """

        self._license_key = license_key

    @property
    def status(self):
        """Gets the status of this XiqListLicenseDetailsResponse.  # noqa: E501


        :return: The status of this XiqListLicenseDetailsResponse.  # noqa: E501
        :rtype: XiqLicenseDetailStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this XiqListLicenseDetailsResponse.


        :param status: The status of this XiqListLicenseDetailsResponse.  # noqa: E501
        :type: XiqLicenseDetailStatus
        """

        self._status = status

    @property
    def devices(self):
        """Gets the devices of this XiqListLicenseDetailsResponse.  # noqa: E501

        License device count  # noqa: E501

        :return: The devices of this XiqListLicenseDetailsResponse.  # noqa: E501
        :rtype: int
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this XiqListLicenseDetailsResponse.

        License device count  # noqa: E501

        :param devices: The devices of this XiqListLicenseDetailsResponse.  # noqa: E501
        :type: int
        """

        self._devices = devices

    @property
    def start_time(self):
        """Gets the start_time of this XiqListLicenseDetailsResponse.  # noqa: E501

        Entitlement start time  # noqa: E501

        :return: The start_time of this XiqListLicenseDetailsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this XiqListLicenseDetailsResponse.

        Entitlement start time  # noqa: E501

        :param start_time: The start_time of this XiqListLicenseDetailsResponse.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this XiqListLicenseDetailsResponse.  # noqa: E501

        Entitlement end time  # noqa: E501

        :return: The end_time of this XiqListLicenseDetailsResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this XiqListLicenseDetailsResponse.

        Entitlement end time  # noqa: E501

        :param end_time: The end_time of this XiqListLicenseDetailsResponse.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqListLicenseDetailsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqListLicenseDetailsResponse):
            return True

        return self.to_dict() != other.to_dict()
