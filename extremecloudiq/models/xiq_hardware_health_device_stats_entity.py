# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.6.0.74
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqHardwareHealthDeviceStatsEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'int',
        'avg_cpu_utilization': 'float',
        'avg_memory_utilization': 'float',
        'avg_client_count': 'int',
        'unit_temperature': 'float',
        'poe_power_mode': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'avg_cpu_utilization': 'avg_cpu_utilization',
        'avg_memory_utilization': 'avg_memory_utilization',
        'avg_client_count': 'avg_client_count',
        'unit_temperature': 'unit_temperature',
        'poe_power_mode': 'poe_power_mode'
    }

    def __init__(self, timestamp=None, avg_cpu_utilization=None, avg_memory_utilization=None, avg_client_count=None, unit_temperature=None, poe_power_mode=None, local_vars_configuration=None):  # noqa: E501
        """XiqHardwareHealthDeviceStatsEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._timestamp = None
        self._avg_cpu_utilization = None
        self._avg_memory_utilization = None
        self._avg_client_count = None
        self._unit_temperature = None
        self._poe_power_mode = None
        self.discriminator = None

        self.timestamp = timestamp
        if avg_cpu_utilization is not None:
            self.avg_cpu_utilization = avg_cpu_utilization
        if avg_memory_utilization is not None:
            self.avg_memory_utilization = avg_memory_utilization
        if avg_client_count is not None:
            self.avg_client_count = avg_client_count
        if unit_temperature is not None:
            self.unit_temperature = unit_temperature
        if poe_power_mode is not None:
            self.poe_power_mode = poe_power_mode

    @property
    def timestamp(self):
        """Gets the timestamp of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501

        The Timestamp  # noqa: E501

        :return: The timestamp of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this XiqHardwareHealthDeviceStatsEntity.

        The Timestamp  # noqa: E501

        :param timestamp: The timestamp of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def avg_cpu_utilization(self):
        """Gets the avg_cpu_utilization of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501

        Avg Cpu Utilization  # noqa: E501

        :return: The avg_cpu_utilization of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :rtype: float
        """
        return self._avg_cpu_utilization

    @avg_cpu_utilization.setter
    def avg_cpu_utilization(self, avg_cpu_utilization):
        """Sets the avg_cpu_utilization of this XiqHardwareHealthDeviceStatsEntity.

        Avg Cpu Utilization  # noqa: E501

        :param avg_cpu_utilization: The avg_cpu_utilization of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :type: float
        """

        self._avg_cpu_utilization = avg_cpu_utilization

    @property
    def avg_memory_utilization(self):
        """Gets the avg_memory_utilization of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501

        Avg Memory Utilization  # noqa: E501

        :return: The avg_memory_utilization of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :rtype: float
        """
        return self._avg_memory_utilization

    @avg_memory_utilization.setter
    def avg_memory_utilization(self, avg_memory_utilization):
        """Sets the avg_memory_utilization of this XiqHardwareHealthDeviceStatsEntity.

        Avg Memory Utilization  # noqa: E501

        :param avg_memory_utilization: The avg_memory_utilization of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :type: float
        """

        self._avg_memory_utilization = avg_memory_utilization

    @property
    def avg_client_count(self):
        """Gets the avg_client_count of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501

        Avg Client Count  # noqa: E501

        :return: The avg_client_count of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :rtype: int
        """
        return self._avg_client_count

    @avg_client_count.setter
    def avg_client_count(self, avg_client_count):
        """Sets the avg_client_count of this XiqHardwareHealthDeviceStatsEntity.

        Avg Client Count  # noqa: E501

        :param avg_client_count: The avg_client_count of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :type: int
        """

        self._avg_client_count = avg_client_count

    @property
    def unit_temperature(self):
        """Gets the unit_temperature of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501

        Unit Temperature  # noqa: E501

        :return: The unit_temperature of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :rtype: float
        """
        return self._unit_temperature

    @unit_temperature.setter
    def unit_temperature(self, unit_temperature):
        """Sets the unit_temperature of this XiqHardwareHealthDeviceStatsEntity.

        Unit Temperature  # noqa: E501

        :param unit_temperature: The unit_temperature of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :type: float
        """

        self._unit_temperature = unit_temperature

    @property
    def poe_power_mode(self):
        """Gets the poe_power_mode of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501

        Poe PowerMode  # noqa: E501

        :return: The poe_power_mode of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :rtype: str
        """
        return self._poe_power_mode

    @poe_power_mode.setter
    def poe_power_mode(self, poe_power_mode):
        """Sets the poe_power_mode of this XiqHardwareHealthDeviceStatsEntity.

        Poe PowerMode  # noqa: E501

        :param poe_power_mode: The poe_power_mode of this XiqHardwareHealthDeviceStatsEntity.  # noqa: E501
        :type: str
        """

        self._poe_power_mode = poe_power_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqHardwareHealthDeviceStatsEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqHardwareHealthDeviceStatsEntity):
            return True

        return self.to_dict() != other.to_dict()
