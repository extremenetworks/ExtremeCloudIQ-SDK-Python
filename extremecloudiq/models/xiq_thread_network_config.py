# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqThreadNetworkConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'channel': 'int',
        'channel_mask': 'str',
        'ext_pan_id': 'str',
        'mesh_local_prefix': 'str',
        'network_key': 'str',
        'network_name': 'str',
        'pan_id': 'str',
        'pskc': 'str',
        'obtain_network_key_enabled': 'bool',
        'native_commissioning_enabled': 'bool',
        'routers_enabled': 'bool',
        'external_commissioning_enabled': 'bool',
        'beacons_enabled': 'bool',
        'commercial_commissioning_enabled': 'bool',
        'autonomous_enrollment_enabled': 'bool',
        'network_key_provisioning_enabled': 'bool',
        'non_ccm_routers_enabled': 'bool',
        'active_timestamp': 'int'
    }

    attribute_map = {
        'id': 'id',
        'channel': 'channel',
        'channel_mask': 'channel_mask',
        'ext_pan_id': 'ext_pan_id',
        'mesh_local_prefix': 'mesh_local_prefix',
        'network_key': 'network_key',
        'network_name': 'network_name',
        'pan_id': 'pan_id',
        'pskc': 'pskc',
        'obtain_network_key_enabled': 'obtain_network_key_enabled',
        'native_commissioning_enabled': 'native_commissioning_enabled',
        'routers_enabled': 'routers_enabled',
        'external_commissioning_enabled': 'external_commissioning_enabled',
        'beacons_enabled': 'beacons_enabled',
        'commercial_commissioning_enabled': 'commercial_commissioning_enabled',
        'autonomous_enrollment_enabled': 'autonomous_enrollment_enabled',
        'network_key_provisioning_enabled': 'network_key_provisioning_enabled',
        'non_ccm_routers_enabled': 'non_ccm_routers_enabled',
        'active_timestamp': 'active_timestamp'
    }

    def __init__(self, id=None, channel=None, channel_mask=None, ext_pan_id=None, mesh_local_prefix=None, network_key=None, network_name=None, pan_id=None, pskc=None, obtain_network_key_enabled=None, native_commissioning_enabled=None, routers_enabled=None, external_commissioning_enabled=None, beacons_enabled=None, commercial_commissioning_enabled=None, autonomous_enrollment_enabled=None, network_key_provisioning_enabled=None, non_ccm_routers_enabled=None, active_timestamp=None, local_vars_configuration=None):  # noqa: E501
        """XiqThreadNetworkConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._channel = None
        self._channel_mask = None
        self._ext_pan_id = None
        self._mesh_local_prefix = None
        self._network_key = None
        self._network_name = None
        self._pan_id = None
        self._pskc = None
        self._obtain_network_key_enabled = None
        self._native_commissioning_enabled = None
        self._routers_enabled = None
        self._external_commissioning_enabled = None
        self._beacons_enabled = None
        self._commercial_commissioning_enabled = None
        self._autonomous_enrollment_enabled = None
        self._network_key_provisioning_enabled = None
        self._non_ccm_routers_enabled = None
        self._active_timestamp = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if channel is not None:
            self.channel = channel
        if channel_mask is not None:
            self.channel_mask = channel_mask
        if ext_pan_id is not None:
            self.ext_pan_id = ext_pan_id
        if mesh_local_prefix is not None:
            self.mesh_local_prefix = mesh_local_prefix
        if network_key is not None:
            self.network_key = network_key
        if network_name is not None:
            self.network_name = network_name
        if pan_id is not None:
            self.pan_id = pan_id
        if pskc is not None:
            self.pskc = pskc
        if obtain_network_key_enabled is not None:
            self.obtain_network_key_enabled = obtain_network_key_enabled
        if native_commissioning_enabled is not None:
            self.native_commissioning_enabled = native_commissioning_enabled
        if routers_enabled is not None:
            self.routers_enabled = routers_enabled
        if external_commissioning_enabled is not None:
            self.external_commissioning_enabled = external_commissioning_enabled
        if beacons_enabled is not None:
            self.beacons_enabled = beacons_enabled
        if commercial_commissioning_enabled is not None:
            self.commercial_commissioning_enabled = commercial_commissioning_enabled
        if autonomous_enrollment_enabled is not None:
            self.autonomous_enrollment_enabled = autonomous_enrollment_enabled
        if network_key_provisioning_enabled is not None:
            self.network_key_provisioning_enabled = network_key_provisioning_enabled
        if non_ccm_routers_enabled is not None:
            self.non_ccm_routers_enabled = non_ccm_routers_enabled
        if active_timestamp is not None:
            self.active_timestamp = active_timestamp

    @property
    def id(self):
        """Gets the id of this XiqThreadNetworkConfig.  # noqa: E501

        The unique identifier  # noqa: E501

        :return: The id of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XiqThreadNetworkConfig.

        The unique identifier  # noqa: E501

        :param id: The id of this XiqThreadNetworkConfig.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def channel(self):
        """Gets the channel of this XiqThreadNetworkConfig.  # noqa: E501

        The network channel  # noqa: E501

        :return: The channel of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this XiqThreadNetworkConfig.

        The network channel  # noqa: E501

        :param channel: The channel of this XiqThreadNetworkConfig.  # noqa: E501
        :type: int
        """

        self._channel = channel

    @property
    def channel_mask(self):
        """Gets the channel_mask of this XiqThreadNetworkConfig.  # noqa: E501

        The network channel mask  # noqa: E501

        :return: The channel_mask of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: str
        """
        return self._channel_mask

    @channel_mask.setter
    def channel_mask(self, channel_mask):
        """Sets the channel_mask of this XiqThreadNetworkConfig.

        The network channel mask  # noqa: E501

        :param channel_mask: The channel_mask of this XiqThreadNetworkConfig.  # noqa: E501
        :type: str
        """

        self._channel_mask = channel_mask

    @property
    def ext_pan_id(self):
        """Gets the ext_pan_id of this XiqThreadNetworkConfig.  # noqa: E501

        The unique extended pan id  # noqa: E501

        :return: The ext_pan_id of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: str
        """
        return self._ext_pan_id

    @ext_pan_id.setter
    def ext_pan_id(self, ext_pan_id):
        """Sets the ext_pan_id of this XiqThreadNetworkConfig.

        The unique extended pan id  # noqa: E501

        :param ext_pan_id: The ext_pan_id of this XiqThreadNetworkConfig.  # noqa: E501
        :type: str
        """

        self._ext_pan_id = ext_pan_id

    @property
    def mesh_local_prefix(self):
        """Gets the mesh_local_prefix of this XiqThreadNetworkConfig.  # noqa: E501

        The mesh local prefix  # noqa: E501

        :return: The mesh_local_prefix of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: str
        """
        return self._mesh_local_prefix

    @mesh_local_prefix.setter
    def mesh_local_prefix(self, mesh_local_prefix):
        """Sets the mesh_local_prefix of this XiqThreadNetworkConfig.

        The mesh local prefix  # noqa: E501

        :param mesh_local_prefix: The mesh_local_prefix of this XiqThreadNetworkConfig.  # noqa: E501
        :type: str
        """

        self._mesh_local_prefix = mesh_local_prefix

    @property
    def network_key(self):
        """Gets the network_key of this XiqThreadNetworkConfig.  # noqa: E501

        The thread network key  # noqa: E501

        :return: The network_key of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: str
        """
        return self._network_key

    @network_key.setter
    def network_key(self, network_key):
        """Sets the network_key of this XiqThreadNetworkConfig.

        The thread network key  # noqa: E501

        :param network_key: The network_key of this XiqThreadNetworkConfig.  # noqa: E501
        :type: str
        """

        self._network_key = network_key

    @property
    def network_name(self):
        """Gets the network_name of this XiqThreadNetworkConfig.  # noqa: E501

        The thread network name  # noqa: E501

        :return: The network_name of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this XiqThreadNetworkConfig.

        The thread network name  # noqa: E501

        :param network_name: The network_name of this XiqThreadNetworkConfig.  # noqa: E501
        :type: str
        """

        self._network_name = network_name

    @property
    def pan_id(self):
        """Gets the pan_id of this XiqThreadNetworkConfig.  # noqa: E501

        The pan id  # noqa: E501

        :return: The pan_id of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: str
        """
        return self._pan_id

    @pan_id.setter
    def pan_id(self, pan_id):
        """Sets the pan_id of this XiqThreadNetworkConfig.

        The pan id  # noqa: E501

        :param pan_id: The pan_id of this XiqThreadNetworkConfig.  # noqa: E501
        :type: str
        """

        self._pan_id = pan_id

    @property
    def pskc(self):
        """Gets the pskc of this XiqThreadNetworkConfig.  # noqa: E501

        The Pre-Shared Key for the Commissioner  # noqa: E501

        :return: The pskc of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: str
        """
        return self._pskc

    @pskc.setter
    def pskc(self, pskc):
        """Sets the pskc of this XiqThreadNetworkConfig.

        The Pre-Shared Key for the Commissioner  # noqa: E501

        :param pskc: The pskc of this XiqThreadNetworkConfig.  # noqa: E501
        :type: str
        """

        self._pskc = pskc

    @property
    def obtain_network_key_enabled(self):
        """Gets the obtain_network_key_enabled of this XiqThreadNetworkConfig.  # noqa: E501


        :return: The obtain_network_key_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: bool
        """
        return self._obtain_network_key_enabled

    @obtain_network_key_enabled.setter
    def obtain_network_key_enabled(self, obtain_network_key_enabled):
        """Sets the obtain_network_key_enabled of this XiqThreadNetworkConfig.


        :param obtain_network_key_enabled: The obtain_network_key_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :type: bool
        """

        self._obtain_network_key_enabled = obtain_network_key_enabled

    @property
    def native_commissioning_enabled(self):
        """Gets the native_commissioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501


        :return: The native_commissioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: bool
        """
        return self._native_commissioning_enabled

    @native_commissioning_enabled.setter
    def native_commissioning_enabled(self, native_commissioning_enabled):
        """Sets the native_commissioning_enabled of this XiqThreadNetworkConfig.


        :param native_commissioning_enabled: The native_commissioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :type: bool
        """

        self._native_commissioning_enabled = native_commissioning_enabled

    @property
    def routers_enabled(self):
        """Gets the routers_enabled of this XiqThreadNetworkConfig.  # noqa: E501


        :return: The routers_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: bool
        """
        return self._routers_enabled

    @routers_enabled.setter
    def routers_enabled(self, routers_enabled):
        """Sets the routers_enabled of this XiqThreadNetworkConfig.


        :param routers_enabled: The routers_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :type: bool
        """

        self._routers_enabled = routers_enabled

    @property
    def external_commissioning_enabled(self):
        """Gets the external_commissioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501


        :return: The external_commissioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: bool
        """
        return self._external_commissioning_enabled

    @external_commissioning_enabled.setter
    def external_commissioning_enabled(self, external_commissioning_enabled):
        """Sets the external_commissioning_enabled of this XiqThreadNetworkConfig.


        :param external_commissioning_enabled: The external_commissioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :type: bool
        """

        self._external_commissioning_enabled = external_commissioning_enabled

    @property
    def beacons_enabled(self):
        """Gets the beacons_enabled of this XiqThreadNetworkConfig.  # noqa: E501


        :return: The beacons_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: bool
        """
        return self._beacons_enabled

    @beacons_enabled.setter
    def beacons_enabled(self, beacons_enabled):
        """Sets the beacons_enabled of this XiqThreadNetworkConfig.


        :param beacons_enabled: The beacons_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :type: bool
        """

        self._beacons_enabled = beacons_enabled

    @property
    def commercial_commissioning_enabled(self):
        """Gets the commercial_commissioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501


        :return: The commercial_commissioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: bool
        """
        return self._commercial_commissioning_enabled

    @commercial_commissioning_enabled.setter
    def commercial_commissioning_enabled(self, commercial_commissioning_enabled):
        """Sets the commercial_commissioning_enabled of this XiqThreadNetworkConfig.


        :param commercial_commissioning_enabled: The commercial_commissioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :type: bool
        """

        self._commercial_commissioning_enabled = commercial_commissioning_enabled

    @property
    def autonomous_enrollment_enabled(self):
        """Gets the autonomous_enrollment_enabled of this XiqThreadNetworkConfig.  # noqa: E501


        :return: The autonomous_enrollment_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: bool
        """
        return self._autonomous_enrollment_enabled

    @autonomous_enrollment_enabled.setter
    def autonomous_enrollment_enabled(self, autonomous_enrollment_enabled):
        """Sets the autonomous_enrollment_enabled of this XiqThreadNetworkConfig.


        :param autonomous_enrollment_enabled: The autonomous_enrollment_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :type: bool
        """

        self._autonomous_enrollment_enabled = autonomous_enrollment_enabled

    @property
    def network_key_provisioning_enabled(self):
        """Gets the network_key_provisioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501


        :return: The network_key_provisioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: bool
        """
        return self._network_key_provisioning_enabled

    @network_key_provisioning_enabled.setter
    def network_key_provisioning_enabled(self, network_key_provisioning_enabled):
        """Sets the network_key_provisioning_enabled of this XiqThreadNetworkConfig.


        :param network_key_provisioning_enabled: The network_key_provisioning_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :type: bool
        """

        self._network_key_provisioning_enabled = network_key_provisioning_enabled

    @property
    def non_ccm_routers_enabled(self):
        """Gets the non_ccm_routers_enabled of this XiqThreadNetworkConfig.  # noqa: E501


        :return: The non_ccm_routers_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: bool
        """
        return self._non_ccm_routers_enabled

    @non_ccm_routers_enabled.setter
    def non_ccm_routers_enabled(self, non_ccm_routers_enabled):
        """Sets the non_ccm_routers_enabled of this XiqThreadNetworkConfig.


        :param non_ccm_routers_enabled: The non_ccm_routers_enabled of this XiqThreadNetworkConfig.  # noqa: E501
        :type: bool
        """

        self._non_ccm_routers_enabled = non_ccm_routers_enabled

    @property
    def active_timestamp(self):
        """Gets the active_timestamp of this XiqThreadNetworkConfig.  # noqa: E501


        :return: The active_timestamp of this XiqThreadNetworkConfig.  # noqa: E501
        :rtype: int
        """
        return self._active_timestamp

    @active_timestamp.setter
    def active_timestamp(self, active_timestamp):
        """Sets the active_timestamp of this XiqThreadNetworkConfig.


        :param active_timestamp: The active_timestamp of this XiqThreadNetworkConfig.  # noqa: E501
        :type: int
        """

        self._active_timestamp = active_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqThreadNetworkConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqThreadNetworkConfig):
            return True

        return self.to_dict() != other.to_dict()
