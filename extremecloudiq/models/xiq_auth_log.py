# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 23.6.0.46
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqAuthLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'auth_type': 'str',
        'sn': 'str',
        'vhm_id': 'str',
        'username': 'str',
        'reply': 'str',
        'called_station_id': 'str',
        'calling_station_id': 'str',
        'auth_date': 'int',
        'ssid': 'str',
        'identity': 'str',
        'nas_port_type': 'str',
        'reject_reason': 'str',
        'nas_identifier': 'str',
        'mgmt_mac_address': 'str',
        'org_id': 'int',
        'timestamp': 'int'
    }

    attribute_map = {
        'id': 'id',
        'auth_type': 'auth_type',
        'sn': 'sn',
        'vhm_id': 'vhm_id',
        'username': 'username',
        'reply': 'reply',
        'called_station_id': 'called_station_id',
        'calling_station_id': 'calling_station_id',
        'auth_date': 'auth_date',
        'ssid': 'ssid',
        'identity': 'identity',
        'nas_port_type': 'nas_port_type',
        'reject_reason': 'reject_reason',
        'nas_identifier': 'nas_identifier',
        'mgmt_mac_address': 'mgmt_mac_address',
        'org_id': 'org_id',
        'timestamp': 'timestamp'
    }

    def __init__(self, id=None, auth_type=None, sn=None, vhm_id=None, username=None, reply=None, called_station_id=None, calling_station_id=None, auth_date=None, ssid=None, identity=None, nas_port_type=None, reject_reason=None, nas_identifier=None, mgmt_mac_address=None, org_id=None, timestamp=None, local_vars_configuration=None):  # noqa: E501
        """XiqAuthLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._auth_type = None
        self._sn = None
        self._vhm_id = None
        self._username = None
        self._reply = None
        self._called_station_id = None
        self._calling_station_id = None
        self._auth_date = None
        self._ssid = None
        self._identity = None
        self._nas_port_type = None
        self._reject_reason = None
        self._nas_identifier = None
        self._mgmt_mac_address = None
        self._org_id = None
        self._timestamp = None
        self.discriminator = None

        self.id = id
        if auth_type is not None:
            self.auth_type = auth_type
        if sn is not None:
            self.sn = sn
        if vhm_id is not None:
            self.vhm_id = vhm_id
        if username is not None:
            self.username = username
        if reply is not None:
            self.reply = reply
        if called_station_id is not None:
            self.called_station_id = called_station_id
        if calling_station_id is not None:
            self.calling_station_id = calling_station_id
        if auth_date is not None:
            self.auth_date = auth_date
        if ssid is not None:
            self.ssid = ssid
        if identity is not None:
            self.identity = identity
        if nas_port_type is not None:
            self.nas_port_type = nas_port_type
        if reject_reason is not None:
            self.reject_reason = reject_reason
        if nas_identifier is not None:
            self.nas_identifier = nas_identifier
        if mgmt_mac_address is not None:
            self.mgmt_mac_address = mgmt_mac_address
        if org_id is not None:
            self.org_id = org_id
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def id(self):
        """Gets the id of this XiqAuthLog.  # noqa: E501

        The auth log id  # noqa: E501

        :return: The id of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XiqAuthLog.

        The auth log id  # noqa: E501

        :param id: The id of this XiqAuthLog.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def auth_type(self):
        """Gets the auth_type of this XiqAuthLog.  # noqa: E501

        The auth type  # noqa: E501

        :return: The auth_type of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this XiqAuthLog.

        The auth type  # noqa: E501

        :param auth_type: The auth_type of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    @property
    def sn(self):
        """Gets the sn of this XiqAuthLog.  # noqa: E501

        The serial number  # noqa: E501

        :return: The sn of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._sn

    @sn.setter
    def sn(self, sn):
        """Sets the sn of this XiqAuthLog.

        The serial number  # noqa: E501

        :param sn: The sn of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._sn = sn

    @property
    def vhm_id(self):
        """Gets the vhm_id of this XiqAuthLog.  # noqa: E501

        The vhm id  # noqa: E501

        :return: The vhm_id of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._vhm_id

    @vhm_id.setter
    def vhm_id(self, vhm_id):
        """Sets the vhm_id of this XiqAuthLog.

        The vhm id  # noqa: E501

        :param vhm_id: The vhm_id of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._vhm_id = vhm_id

    @property
    def username(self):
        """Gets the username of this XiqAuthLog.  # noqa: E501

        The username  # noqa: E501

        :return: The username of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this XiqAuthLog.

        The username  # noqa: E501

        :param username: The username of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def reply(self):
        """Gets the reply of this XiqAuthLog.  # noqa: E501

        The reply  # noqa: E501

        :return: The reply of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._reply

    @reply.setter
    def reply(self, reply):
        """Sets the reply of this XiqAuthLog.

        The reply  # noqa: E501

        :param reply: The reply of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._reply = reply

    @property
    def called_station_id(self):
        """Gets the called_station_id of this XiqAuthLog.  # noqa: E501

        The called station id  # noqa: E501

        :return: The called_station_id of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._called_station_id

    @called_station_id.setter
    def called_station_id(self, called_station_id):
        """Sets the called_station_id of this XiqAuthLog.

        The called station id  # noqa: E501

        :param called_station_id: The called_station_id of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._called_station_id = called_station_id

    @property
    def calling_station_id(self):
        """Gets the calling_station_id of this XiqAuthLog.  # noqa: E501

        The calling station id  # noqa: E501

        :return: The calling_station_id of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._calling_station_id

    @calling_station_id.setter
    def calling_station_id(self, calling_station_id):
        """Sets the calling_station_id of this XiqAuthLog.

        The calling station id  # noqa: E501

        :param calling_station_id: The calling_station_id of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._calling_station_id = calling_station_id

    @property
    def auth_date(self):
        """Gets the auth_date of this XiqAuthLog.  # noqa: E501

        The authentication date  # noqa: E501

        :return: The auth_date of this XiqAuthLog.  # noqa: E501
        :rtype: int
        """
        return self._auth_date

    @auth_date.setter
    def auth_date(self, auth_date):
        """Sets the auth_date of this XiqAuthLog.

        The authentication date  # noqa: E501

        :param auth_date: The auth_date of this XiqAuthLog.  # noqa: E501
        :type: int
        """

        self._auth_date = auth_date

    @property
    def ssid(self):
        """Gets the ssid of this XiqAuthLog.  # noqa: E501

        The ssid  # noqa: E501

        :return: The ssid of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this XiqAuthLog.

        The ssid  # noqa: E501

        :param ssid: The ssid of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._ssid = ssid

    @property
    def identity(self):
        """Gets the identity of this XiqAuthLog.  # noqa: E501

        The identity  # noqa: E501

        :return: The identity of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this XiqAuthLog.

        The identity  # noqa: E501

        :param identity: The identity of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._identity = identity

    @property
    def nas_port_type(self):
        """Gets the nas_port_type of this XiqAuthLog.  # noqa: E501

        The nas port type  # noqa: E501

        :return: The nas_port_type of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._nas_port_type

    @nas_port_type.setter
    def nas_port_type(self, nas_port_type):
        """Sets the nas_port_type of this XiqAuthLog.

        The nas port type  # noqa: E501

        :param nas_port_type: The nas_port_type of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._nas_port_type = nas_port_type

    @property
    def reject_reason(self):
        """Gets the reject_reason of this XiqAuthLog.  # noqa: E501

        The reject reason  # noqa: E501

        :return: The reject_reason of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._reject_reason

    @reject_reason.setter
    def reject_reason(self, reject_reason):
        """Sets the reject_reason of this XiqAuthLog.

        The reject reason  # noqa: E501

        :param reject_reason: The reject_reason of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._reject_reason = reject_reason

    @property
    def nas_identifier(self):
        """Gets the nas_identifier of this XiqAuthLog.  # noqa: E501

        The nas identifier  # noqa: E501

        :return: The nas_identifier of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._nas_identifier

    @nas_identifier.setter
    def nas_identifier(self, nas_identifier):
        """Sets the nas_identifier of this XiqAuthLog.

        The nas identifier  # noqa: E501

        :param nas_identifier: The nas_identifier of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._nas_identifier = nas_identifier

    @property
    def mgmt_mac_address(self):
        """Gets the mgmt_mac_address of this XiqAuthLog.  # noqa: E501

        The management mac address  # noqa: E501

        :return: The mgmt_mac_address of this XiqAuthLog.  # noqa: E501
        :rtype: str
        """
        return self._mgmt_mac_address

    @mgmt_mac_address.setter
    def mgmt_mac_address(self, mgmt_mac_address):
        """Sets the mgmt_mac_address of this XiqAuthLog.

        The management mac address  # noqa: E501

        :param mgmt_mac_address: The mgmt_mac_address of this XiqAuthLog.  # noqa: E501
        :type: str
        """

        self._mgmt_mac_address = mgmt_mac_address

    @property
    def org_id(self):
        """Gets the org_id of this XiqAuthLog.  # noqa: E501

        The org id  # noqa: E501

        :return: The org_id of this XiqAuthLog.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this XiqAuthLog.

        The org id  # noqa: E501

        :param org_id: The org_id of this XiqAuthLog.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def timestamp(self):
        """Gets the timestamp of this XiqAuthLog.  # noqa: E501

        The audit log timestamp  # noqa: E501

        :return: The timestamp of this XiqAuthLog.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this XiqAuthLog.

        The audit log timestamp  # noqa: E501

        :param timestamp: The timestamp of this XiqAuthLog.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqAuthLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqAuthLog):
            return True

        return self.to_dict() != other.to_dict()
