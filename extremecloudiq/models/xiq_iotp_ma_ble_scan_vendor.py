# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqIotpMaBleScanVendor(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vendor_type': 'XiqIotpMaBleScanVendorType',
        'vendor_name': 'str',
        'company_id': 'int'
    }

    attribute_map = {
        'vendor_type': 'vendor_type',
        'vendor_name': 'vendor_name',
        'company_id': 'company_id'
    }

    def __init__(self, vendor_type=None, vendor_name=None, company_id=None, local_vars_configuration=None):  # noqa: E501
        """XiqIotpMaBleScanVendor - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._vendor_type = None
        self._vendor_name = None
        self._company_id = None
        self.discriminator = None

        if vendor_type is not None:
            self.vendor_type = vendor_type
        if vendor_name is not None:
            self.vendor_name = vendor_name
        if company_id is not None:
            self.company_id = company_id

    @property
    def vendor_type(self):
        """Gets the vendor_type of this XiqIotpMaBleScanVendor.  # noqa: E501


        :return: The vendor_type of this XiqIotpMaBleScanVendor.  # noqa: E501
        :rtype: XiqIotpMaBleScanVendorType
        """
        return self._vendor_type

    @vendor_type.setter
    def vendor_type(self, vendor_type):
        """Sets the vendor_type of this XiqIotpMaBleScanVendor.


        :param vendor_type: The vendor_type of this XiqIotpMaBleScanVendor.  # noqa: E501
        :type: XiqIotpMaBleScanVendorType
        """

        self._vendor_type = vendor_type

    @property
    def vendor_name(self):
        """Gets the vendor_name of this XiqIotpMaBleScanVendor.  # noqa: E501

        Custom Vendor name, for CUSTOM Vendor type.  # noqa: E501

        :return: The vendor_name of this XiqIotpMaBleScanVendor.  # noqa: E501
        :rtype: str
        """
        return self._vendor_name

    @vendor_name.setter
    def vendor_name(self, vendor_name):
        """Sets the vendor_name of this XiqIotpMaBleScanVendor.

        Custom Vendor name, for CUSTOM Vendor type.  # noqa: E501

        :param vendor_name: The vendor_name of this XiqIotpMaBleScanVendor.  # noqa: E501
        :type: str
        """

        self._vendor_name = vendor_name

    @property
    def company_id(self):
        """Gets the company_id of this XiqIotpMaBleScanVendor.  # noqa: E501

        Custom Vendor company ID, for CUSTOM Vendor type.  # noqa: E501

        :return: The company_id of this XiqIotpMaBleScanVendor.  # noqa: E501
        :rtype: int
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this XiqIotpMaBleScanVendor.

        Custom Vendor company ID, for CUSTOM Vendor type.  # noqa: E501

        :param company_id: The company_id of this XiqIotpMaBleScanVendor.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                company_id is not None and company_id > 65535):  # noqa: E501
            raise ValueError("Invalid value for `company_id`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                company_id is not None and company_id < -1):  # noqa: E501
            raise ValueError("Invalid value for `company_id`, must be a value greater than or equal to `-1`")  # noqa: E501

        self._company_id = company_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqIotpMaBleScanVendor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqIotpMaBleScanVendor):
            return True

        return self.to_dict() != other.to_dict()
