# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 23.6.0.46
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqCaptureResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'org_id': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'device_id': 'int',
        'hostname': 'str',
        'mac_address': 'str',
        'interface_name': 'str',
        'location_id': 'int',
        'locations': 'list[XiqLocationLegend]',
        'status': 'XiqPacketCaptureStatus',
        'error_message': 'str',
        'storage': 'XiqStorage'
    }

    attribute_map = {
        'id': 'id',
        'org_id': 'org_id',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'device_id': 'device_id',
        'hostname': 'hostname',
        'mac_address': 'mac_address',
        'interface_name': 'interface_name',
        'location_id': 'location_id',
        'locations': 'locations',
        'status': 'status',
        'error_message': 'error_message',
        'storage': 'storage'
    }

    def __init__(self, id=None, org_id=None, start_time=None, end_time=None, device_id=None, hostname=None, mac_address=None, interface_name=None, location_id=None, locations=None, status=None, error_message=None, storage=None, local_vars_configuration=None):  # noqa: E501
        """XiqCaptureResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._org_id = None
        self._start_time = None
        self._end_time = None
        self._device_id = None
        self._hostname = None
        self._mac_address = None
        self._interface_name = None
        self._location_id = None
        self._locations = None
        self._status = None
        self._error_message = None
        self._storage = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if org_id is not None:
            self.org_id = org_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if device_id is not None:
            self.device_id = device_id
        if hostname is not None:
            self.hostname = hostname
        if mac_address is not None:
            self.mac_address = mac_address
        if interface_name is not None:
            self.interface_name = interface_name
        if location_id is not None:
            self.location_id = location_id
        if locations is not None:
            self.locations = locations
        if status is not None:
            self.status = status
        if error_message is not None:
            self.error_message = error_message
        if storage is not None:
            self.storage = storage

    @property
    def id(self):
        """Gets the id of this XiqCaptureResult.  # noqa: E501

        The unique identifier  # noqa: E501

        :return: The id of this XiqCaptureResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XiqCaptureResult.

        The unique identifier  # noqa: E501

        :param id: The id of this XiqCaptureResult.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this XiqCaptureResult.  # noqa: E501

        The organization identifier, valid when enabling HIQ feature  # noqa: E501

        :return: The org_id of this XiqCaptureResult.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this XiqCaptureResult.

        The organization identifier, valid when enabling HIQ feature  # noqa: E501

        :param org_id: The org_id of this XiqCaptureResult.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def start_time(self):
        """Gets the start_time of this XiqCaptureResult.  # noqa: E501

        The packet capture start time  # noqa: E501

        :return: The start_time of this XiqCaptureResult.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this XiqCaptureResult.

        The packet capture start time  # noqa: E501

        :param start_time: The start_time of this XiqCaptureResult.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this XiqCaptureResult.  # noqa: E501

        The packet capture end time  # noqa: E501

        :return: The end_time of this XiqCaptureResult.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this XiqCaptureResult.

        The packet capture end time  # noqa: E501

        :param end_time: The end_time of this XiqCaptureResult.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def device_id(self):
        """Gets the device_id of this XiqCaptureResult.  # noqa: E501

        The device identifier  # noqa: E501

        :return: The device_id of this XiqCaptureResult.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this XiqCaptureResult.

        The device identifier  # noqa: E501

        :param device_id: The device_id of this XiqCaptureResult.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def hostname(self):
        """Gets the hostname of this XiqCaptureResult.  # noqa: E501

        The device host name  # noqa: E501

        :return: The hostname of this XiqCaptureResult.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this XiqCaptureResult.

        The device host name  # noqa: E501

        :param hostname: The hostname of this XiqCaptureResult.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def mac_address(self):
        """Gets the mac_address of this XiqCaptureResult.  # noqa: E501

        The device MAC address  # noqa: E501

        :return: The mac_address of this XiqCaptureResult.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this XiqCaptureResult.

        The device MAC address  # noqa: E501

        :param mac_address: The mac_address of this XiqCaptureResult.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def interface_name(self):
        """Gets the interface_name of this XiqCaptureResult.  # noqa: E501

        The interface name such as \"WIFI0\", \"WIFI1\", \"ETH0\", etc.  # noqa: E501

        :return: The interface_name of this XiqCaptureResult.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this XiqCaptureResult.

        The interface name such as \"WIFI0\", \"WIFI1\", \"ETH0\", etc.  # noqa: E501

        :param interface_name: The interface_name of this XiqCaptureResult.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def location_id(self):
        """Gets the location_id of this XiqCaptureResult.  # noqa: E501

        The location ID  # noqa: E501

        :return: The location_id of this XiqCaptureResult.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this XiqCaptureResult.

        The location ID  # noqa: E501

        :param location_id: The location_id of this XiqCaptureResult.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def locations(self):
        """Gets the locations of this XiqCaptureResult.  # noqa: E501

        The detailed location  # noqa: E501

        :return: The locations of this XiqCaptureResult.  # noqa: E501
        :rtype: list[XiqLocationLegend]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this XiqCaptureResult.

        The detailed location  # noqa: E501

        :param locations: The locations of this XiqCaptureResult.  # noqa: E501
        :type: list[XiqLocationLegend]
        """

        self._locations = locations

    @property
    def status(self):
        """Gets the status of this XiqCaptureResult.  # noqa: E501


        :return: The status of this XiqCaptureResult.  # noqa: E501
        :rtype: XiqPacketCaptureStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this XiqCaptureResult.


        :param status: The status of this XiqCaptureResult.  # noqa: E501
        :type: XiqPacketCaptureStatus
        """

        self._status = status

    @property
    def error_message(self):
        """Gets the error_message of this XiqCaptureResult.  # noqa: E501

        The error message (may be empty).  # noqa: E501

        :return: The error_message of this XiqCaptureResult.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this XiqCaptureResult.

        The error message (may be empty).  # noqa: E501

        :param error_message: The error_message of this XiqCaptureResult.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def storage(self):
        """Gets the storage of this XiqCaptureResult.  # noqa: E501


        :return: The storage of this XiqCaptureResult.  # noqa: E501
        :rtype: XiqStorage
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this XiqCaptureResult.


        :param storage: The storage of this XiqCaptureResult.  # noqa: E501
        :type: XiqStorage
        """

        self._storage = storage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqCaptureResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqCaptureResult):
            return True

        return self.to_dict() != other.to_dict()
