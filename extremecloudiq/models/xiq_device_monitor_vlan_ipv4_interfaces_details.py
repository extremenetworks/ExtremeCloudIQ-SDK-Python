# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.2.0.39
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqDeviceMonitorVlanIpv4InterfacesDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vlan_id': 'int',
        'vlan_name': 'str',
        'ipv4_forwarding_enabled': 'bool',
        'routing_instance': 'str',
        'ipv4_address': 'str',
        'ipv4_subnet': 'str',
        'member_ports': 'list[str]',
        'tagged_ports': 'list[str]',
        'untagged_ports': 'list[str]',
        'non_forwarding_vlan_enabled': 'bool'
    }

    attribute_map = {
        'vlan_id': 'vlan_id',
        'vlan_name': 'vlan_name',
        'ipv4_forwarding_enabled': 'ipv4_forwarding_enabled',
        'routing_instance': 'routing_instance',
        'ipv4_address': 'ipv4_address',
        'ipv4_subnet': 'ipv4_subnet',
        'member_ports': 'member_ports',
        'tagged_ports': 'tagged_ports',
        'untagged_ports': 'untagged_ports',
        'non_forwarding_vlan_enabled': 'non_forwarding_vlan_enabled'
    }

    def __init__(self, vlan_id=None, vlan_name=None, ipv4_forwarding_enabled=None, routing_instance=None, ipv4_address=None, ipv4_subnet=None, member_ports=None, tagged_ports=None, untagged_ports=None, non_forwarding_vlan_enabled=None, local_vars_configuration=None):  # noqa: E501
        """XiqDeviceMonitorVlanIpv4InterfacesDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._vlan_id = None
        self._vlan_name = None
        self._ipv4_forwarding_enabled = None
        self._routing_instance = None
        self._ipv4_address = None
        self._ipv4_subnet = None
        self._member_ports = None
        self._tagged_ports = None
        self._untagged_ports = None
        self._non_forwarding_vlan_enabled = None
        self.discriminator = None

        self.vlan_id = vlan_id
        if vlan_name is not None:
            self.vlan_name = vlan_name
        if ipv4_forwarding_enabled is not None:
            self.ipv4_forwarding_enabled = ipv4_forwarding_enabled
        if routing_instance is not None:
            self.routing_instance = routing_instance
        if ipv4_address is not None:
            self.ipv4_address = ipv4_address
        if ipv4_subnet is not None:
            self.ipv4_subnet = ipv4_subnet
        if member_ports is not None:
            self.member_ports = member_ports
        if tagged_ports is not None:
            self.tagged_ports = tagged_ports
        if untagged_ports is not None:
            self.untagged_ports = untagged_ports
        if non_forwarding_vlan_enabled is not None:
            self.non_forwarding_vlan_enabled = non_forwarding_vlan_enabled

    @property
    def vlan_id(self):
        """Gets the vlan_id of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501

        The VLAN ID  # noqa: E501

        :return: The vlan_id of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this XiqDeviceMonitorVlanIpv4InterfacesDetails.

        The VLAN ID  # noqa: E501

        :param vlan_id: The vlan_id of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and vlan_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must not be `None`")  # noqa: E501

        self._vlan_id = vlan_id

    @property
    def vlan_name(self):
        """Gets the vlan_name of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501

        The VLAN Name  # noqa: E501

        :return: The vlan_name of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._vlan_name

    @vlan_name.setter
    def vlan_name(self, vlan_name):
        """Sets the vlan_name of this XiqDeviceMonitorVlanIpv4InterfacesDetails.

        The VLAN Name  # noqa: E501

        :param vlan_name: The vlan_name of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :type: str
        """

        self._vlan_name = vlan_name

    @property
    def ipv4_forwarding_enabled(self):
        """Gets the ipv4_forwarding_enabled of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501

        Indication of IPv4 Forwarding status on the VLAN  # noqa: E501

        :return: The ipv4_forwarding_enabled of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :rtype: bool
        """
        return self._ipv4_forwarding_enabled

    @ipv4_forwarding_enabled.setter
    def ipv4_forwarding_enabled(self, ipv4_forwarding_enabled):
        """Sets the ipv4_forwarding_enabled of this XiqDeviceMonitorVlanIpv4InterfacesDetails.

        Indication of IPv4 Forwarding status on the VLAN  # noqa: E501

        :param ipv4_forwarding_enabled: The ipv4_forwarding_enabled of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :type: bool
        """

        self._ipv4_forwarding_enabled = ipv4_forwarding_enabled

    @property
    def routing_instance(self):
        """Gets the routing_instance of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501

        The Routing instance name where the IPv4 Interface is configured for this VLAN  # noqa: E501

        :return: The routing_instance of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._routing_instance

    @routing_instance.setter
    def routing_instance(self, routing_instance):
        """Sets the routing_instance of this XiqDeviceMonitorVlanIpv4InterfacesDetails.

        The Routing instance name where the IPv4 Interface is configured for this VLAN  # noqa: E501

        :param routing_instance: The routing_instance of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :type: str
        """

        self._routing_instance = routing_instance

    @property
    def ipv4_address(self):
        """Gets the ipv4_address of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501

        The IPv4 Address of the interface  # noqa: E501

        :return: The ipv4_address of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_address

    @ipv4_address.setter
    def ipv4_address(self, ipv4_address):
        """Sets the ipv4_address of this XiqDeviceMonitorVlanIpv4InterfacesDetails.

        The IPv4 Address of the interface  # noqa: E501

        :param ipv4_address: The ipv4_address of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :type: str
        """

        self._ipv4_address = ipv4_address

    @property
    def ipv4_subnet(self):
        """Gets the ipv4_subnet of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501

        The IPv4 Subnet of the interface  # noqa: E501

        :return: The ipv4_subnet of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_subnet

    @ipv4_subnet.setter
    def ipv4_subnet(self, ipv4_subnet):
        """Sets the ipv4_subnet of this XiqDeviceMonitorVlanIpv4InterfacesDetails.

        The IPv4 Subnet of the interface  # noqa: E501

        :param ipv4_subnet: The ipv4_subnet of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :type: str
        """

        self._ipv4_subnet = ipv4_subnet

    @property
    def member_ports(self):
        """Gets the member_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501

        The member ports in the VLAN  # noqa: E501

        :return: The member_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._member_ports

    @member_ports.setter
    def member_ports(self, member_ports):
        """Sets the member_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.

        The member ports in the VLAN  # noqa: E501

        :param member_ports: The member_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :type: list[str]
        """

        self._member_ports = member_ports

    @property
    def tagged_ports(self):
        """Gets the tagged_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501

        The tagged ports in the VLAN  # noqa: E501

        :return: The tagged_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._tagged_ports

    @tagged_ports.setter
    def tagged_ports(self, tagged_ports):
        """Sets the tagged_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.

        The tagged ports in the VLAN  # noqa: E501

        :param tagged_ports: The tagged_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :type: list[str]
        """

        self._tagged_ports = tagged_ports

    @property
    def untagged_ports(self):
        """Gets the untagged_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501

        The untagged ports in the VLAN  # noqa: E501

        :return: The untagged_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._untagged_ports

    @untagged_ports.setter
    def untagged_ports(self, untagged_ports):
        """Sets the untagged_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.

        The untagged ports in the VLAN  # noqa: E501

        :param untagged_ports: The untagged_ports of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :type: list[str]
        """

        self._untagged_ports = untagged_ports

    @property
    def non_forwarding_vlan_enabled(self):
        """Gets the non_forwarding_vlan_enabled of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501

        Indicates whether or not this is a Non Forwarding VLAN (learning VLAN)  # noqa: E501

        :return: The non_forwarding_vlan_enabled of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :rtype: bool
        """
        return self._non_forwarding_vlan_enabled

    @non_forwarding_vlan_enabled.setter
    def non_forwarding_vlan_enabled(self, non_forwarding_vlan_enabled):
        """Sets the non_forwarding_vlan_enabled of this XiqDeviceMonitorVlanIpv4InterfacesDetails.

        Indicates whether or not this is a Non Forwarding VLAN (learning VLAN)  # noqa: E501

        :param non_forwarding_vlan_enabled: The non_forwarding_vlan_enabled of this XiqDeviceMonitorVlanIpv4InterfacesDetails.  # noqa: E501
        :type: bool
        """

        self._non_forwarding_vlan_enabled = non_forwarding_vlan_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqDeviceMonitorVlanIpv4InterfacesDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqDeviceMonitorVlanIpv4InterfacesDetails):
            return True

        return self.to_dict() != other.to_dict()
