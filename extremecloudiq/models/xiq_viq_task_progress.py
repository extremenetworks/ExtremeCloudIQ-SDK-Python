# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.3.1.2
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqViqTaskProgress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'task_name': 'str',
        'finish_percentage': 'int',
        'detail': 'str',
        'status': 'str'
    }

    attribute_map = {
        'task_name': 'task_name',
        'finish_percentage': 'finish_percentage',
        'detail': 'detail',
        'status': 'status'
    }

    def __init__(self, task_name=None, finish_percentage=None, detail=None, status=None, local_vars_configuration=None):  # noqa: E501
        """XiqViqTaskProgress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._task_name = None
        self._finish_percentage = None
        self._detail = None
        self._status = None
        self.discriminator = None

        if task_name is not None:
            self.task_name = task_name
        if finish_percentage is not None:
            self.finish_percentage = finish_percentage
        if detail is not None:
            self.detail = detail
        if status is not None:
            self.status = status

    @property
    def task_name(self):
        """Gets the task_name of this XiqViqTaskProgress.  # noqa: E501

        Current task name  # noqa: E501

        :return: The task_name of this XiqViqTaskProgress.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this XiqViqTaskProgress.

        Current task name  # noqa: E501

        :param task_name: The task_name of this XiqViqTaskProgress.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def finish_percentage(self):
        """Gets the finish_percentage of this XiqViqTaskProgress.  # noqa: E501

        Current task finish percentage  # noqa: E501

        :return: The finish_percentage of this XiqViqTaskProgress.  # noqa: E501
        :rtype: int
        """
        return self._finish_percentage

    @finish_percentage.setter
    def finish_percentage(self, finish_percentage):
        """Sets the finish_percentage of this XiqViqTaskProgress.

        Current task finish percentage  # noqa: E501

        :param finish_percentage: The finish_percentage of this XiqViqTaskProgress.  # noqa: E501
        :type: int
        """

        self._finish_percentage = finish_percentage

    @property
    def detail(self):
        """Gets the detail of this XiqViqTaskProgress.  # noqa: E501

        Detail of current task  # noqa: E501

        :return: The detail of this XiqViqTaskProgress.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this XiqViqTaskProgress.

        Detail of current task  # noqa: E501

        :param detail: The detail of this XiqViqTaskProgress.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def status(self):
        """Gets the status of this XiqViqTaskProgress.  # noqa: E501

        Status of current task  # noqa: E501

        :return: The status of this XiqViqTaskProgress.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this XiqViqTaskProgress.

        Status of current task  # noqa: E501

        :param status: The status of this XiqViqTaskProgress.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqViqTaskProgress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqViqTaskProgress):
            return True

        return self.to_dict() != other.to_dict()
