# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.6.0.74
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqAvailableChannelInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'global_operating_class': 'int',
        'channel_cfi': 'list[int]',
        'max_eirp': 'list[float]'
    }

    attribute_map = {
        'global_operating_class': 'global_operating_class',
        'channel_cfi': 'channel_cfi',
        'max_eirp': 'max_eirp'
    }

    def __init__(self, global_operating_class=None, channel_cfi=None, max_eirp=None, local_vars_configuration=None):  # noqa: E501
        """XiqAvailableChannelInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._global_operating_class = None
        self._channel_cfi = None
        self._max_eirp = None
        self.discriminator = None

        if global_operating_class is not None:
            self.global_operating_class = global_operating_class
        if channel_cfi is not None:
            self.channel_cfi = channel_cfi
        if max_eirp is not None:
            self.max_eirp = max_eirp

    @property
    def global_operating_class(self):
        """Gets the global_operating_class of this XiqAvailableChannelInfo.  # noqa: E501


        :return: The global_operating_class of this XiqAvailableChannelInfo.  # noqa: E501
        :rtype: int
        """
        return self._global_operating_class

    @global_operating_class.setter
    def global_operating_class(self, global_operating_class):
        """Sets the global_operating_class of this XiqAvailableChannelInfo.


        :param global_operating_class: The global_operating_class of this XiqAvailableChannelInfo.  # noqa: E501
        :type: int
        """

        self._global_operating_class = global_operating_class

    @property
    def channel_cfi(self):
        """Gets the channel_cfi of this XiqAvailableChannelInfo.  # noqa: E501


        :return: The channel_cfi of this XiqAvailableChannelInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._channel_cfi

    @channel_cfi.setter
    def channel_cfi(self, channel_cfi):
        """Sets the channel_cfi of this XiqAvailableChannelInfo.


        :param channel_cfi: The channel_cfi of this XiqAvailableChannelInfo.  # noqa: E501
        :type: list[int]
        """

        self._channel_cfi = channel_cfi

    @property
    def max_eirp(self):
        """Gets the max_eirp of this XiqAvailableChannelInfo.  # noqa: E501


        :return: The max_eirp of this XiqAvailableChannelInfo.  # noqa: E501
        :rtype: list[float]
        """
        return self._max_eirp

    @max_eirp.setter
    def max_eirp(self, max_eirp):
        """Sets the max_eirp of this XiqAvailableChannelInfo.


        :param max_eirp: The max_eirp of this XiqAvailableChannelInfo.  # noqa: E501
        :type: list[float]
        """

        self._max_eirp = max_eirp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqAvailableChannelInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqAvailableChannelInfo):
            return True

        return self.to_dict() != other.to_dict()
