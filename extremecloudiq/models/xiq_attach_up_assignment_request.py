# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqAttachUPAssignmentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_profile_assignment_rules': 'list[XiqAttachUPAssignmentEntry]',
        'enable_user_profile_assignment': 'bool',
        'enable_radius_attribute_user_profile_assignment': 'bool',
        'attribute_type': 'XiqAttributeType',
        'attribute_key': 'int',
        'default_radius_client_object_id': 'int'
    }

    attribute_map = {
        'user_profile_assignment_rules': 'user_profile_assignment_rules',
        'enable_user_profile_assignment': 'enable_user_profile_assignment',
        'enable_radius_attribute_user_profile_assignment': 'enable_radius_attribute_user_profile_assignment',
        'attribute_type': 'attribute_type',
        'attribute_key': 'attribute_key',
        'default_radius_client_object_id': 'default_radius_client_object_id'
    }

    def __init__(self, user_profile_assignment_rules=None, enable_user_profile_assignment=None, enable_radius_attribute_user_profile_assignment=None, attribute_type=None, attribute_key=None, default_radius_client_object_id=None, local_vars_configuration=None):  # noqa: E501
        """XiqAttachUPAssignmentRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_profile_assignment_rules = None
        self._enable_user_profile_assignment = None
        self._enable_radius_attribute_user_profile_assignment = None
        self._attribute_type = None
        self._attribute_key = None
        self._default_radius_client_object_id = None
        self.discriminator = None

        if user_profile_assignment_rules is not None:
            self.user_profile_assignment_rules = user_profile_assignment_rules
        if enable_user_profile_assignment is not None:
            self.enable_user_profile_assignment = enable_user_profile_assignment
        if enable_radius_attribute_user_profile_assignment is not None:
            self.enable_radius_attribute_user_profile_assignment = enable_radius_attribute_user_profile_assignment
        if attribute_type is not None:
            self.attribute_type = attribute_type
        if attribute_key is not None:
            self.attribute_key = attribute_key
        if default_radius_client_object_id is not None:
            self.default_radius_client_object_id = default_radius_client_object_id

    @property
    def user_profile_assignment_rules(self):
        """Gets the user_profile_assignment_rules of this XiqAttachUPAssignmentRequest.  # noqa: E501

        The User Profile Assignment and User Profile Id's to attach to SSID  # noqa: E501

        :return: The user_profile_assignment_rules of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :rtype: list[XiqAttachUPAssignmentEntry]
        """
        return self._user_profile_assignment_rules

    @user_profile_assignment_rules.setter
    def user_profile_assignment_rules(self, user_profile_assignment_rules):
        """Sets the user_profile_assignment_rules of this XiqAttachUPAssignmentRequest.

        The User Profile Assignment and User Profile Id's to attach to SSID  # noqa: E501

        :param user_profile_assignment_rules: The user_profile_assignment_rules of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :type: list[XiqAttachUPAssignmentEntry]
        """

        self._user_profile_assignment_rules = user_profile_assignment_rules

    @property
    def enable_user_profile_assignment(self):
        """Gets the enable_user_profile_assignment of this XiqAttachUPAssignmentRequest.  # noqa: E501

        The flag to enable User Profile Assignment  # noqa: E501

        :return: The enable_user_profile_assignment of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_user_profile_assignment

    @enable_user_profile_assignment.setter
    def enable_user_profile_assignment(self, enable_user_profile_assignment):
        """Sets the enable_user_profile_assignment of this XiqAttachUPAssignmentRequest.

        The flag to enable User Profile Assignment  # noqa: E501

        :param enable_user_profile_assignment: The enable_user_profile_assignment of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :type: bool
        """

        self._enable_user_profile_assignment = enable_user_profile_assignment

    @property
    def enable_radius_attribute_user_profile_assignment(self):
        """Gets the enable_radius_attribute_user_profile_assignment of this XiqAttachUPAssignmentRequest.  # noqa: E501

        The flag to enable Radius Attribute User Profile Assignment  # noqa: E501

        :return: The enable_radius_attribute_user_profile_assignment of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_radius_attribute_user_profile_assignment

    @enable_radius_attribute_user_profile_assignment.setter
    def enable_radius_attribute_user_profile_assignment(self, enable_radius_attribute_user_profile_assignment):
        """Sets the enable_radius_attribute_user_profile_assignment of this XiqAttachUPAssignmentRequest.

        The flag to enable Radius Attribute User Profile Assignment  # noqa: E501

        :param enable_radius_attribute_user_profile_assignment: The enable_radius_attribute_user_profile_assignment of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :type: bool
        """

        self._enable_radius_attribute_user_profile_assignment = enable_radius_attribute_user_profile_assignment

    @property
    def attribute_type(self):
        """Gets the attribute_type of this XiqAttachUPAssignmentRequest.  # noqa: E501


        :return: The attribute_type of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :rtype: XiqAttributeType
        """
        return self._attribute_type

    @attribute_type.setter
    def attribute_type(self, attribute_type):
        """Sets the attribute_type of this XiqAttachUPAssignmentRequest.


        :param attribute_type: The attribute_type of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :type: XiqAttributeType
        """

        self._attribute_type = attribute_type

    @property
    def attribute_key(self):
        """Gets the attribute_key of this XiqAttachUPAssignmentRequest.  # noqa: E501

        The SSID attribute key  # noqa: E501

        :return: The attribute_key of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._attribute_key

    @attribute_key.setter
    def attribute_key(self, attribute_key):
        """Sets the attribute_key of this XiqAttachUPAssignmentRequest.

        The SSID attribute key  # noqa: E501

        :param attribute_key: The attribute_key of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :type: int
        """

        self._attribute_key = attribute_key

    @property
    def default_radius_client_object_id(self):
        """Gets the default_radius_client_object_id of this XiqAttachUPAssignmentRequest.  # noqa: E501

        The default RADIUS client object ID  # noqa: E501

        :return: The default_radius_client_object_id of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._default_radius_client_object_id

    @default_radius_client_object_id.setter
    def default_radius_client_object_id(self, default_radius_client_object_id):
        """Sets the default_radius_client_object_id of this XiqAttachUPAssignmentRequest.

        The default RADIUS client object ID  # noqa: E501

        :param default_radius_client_object_id: The default_radius_client_object_id of this XiqAttachUPAssignmentRequest.  # noqa: E501
        :type: int
        """

        self._default_radius_client_object_id = default_radius_client_object_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqAttachUPAssignmentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqAttachUPAssignmentRequest):
            return True

        return self.to_dict() != other.to_dict()
