# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.2.0.39
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqDeviceMonitorIpv4RoutingDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'destination': 'str',
        'nexthop': 'XiqDeviceMonitorIpv4RouteNexthop',
        'vlan_id': 'int',
        'vlan_name': 'str',
        'route_origin': 'str',
        'status': 'str',
        'metric': 'int',
        'age': 'int',
        'route_type_priority': 'str',
        'routing_instance': 'str'
    }

    attribute_map = {
        'destination': 'destination',
        'nexthop': 'nexthop',
        'vlan_id': 'vlan_id',
        'vlan_name': 'vlan_name',
        'route_origin': 'route_origin',
        'status': 'status',
        'metric': 'metric',
        'age': 'age',
        'route_type_priority': 'route_type_priority',
        'routing_instance': 'routing_instance'
    }

    def __init__(self, destination=None, nexthop=None, vlan_id=None, vlan_name=None, route_origin=None, status=None, metric=None, age=None, route_type_priority=None, routing_instance=None, local_vars_configuration=None):  # noqa: E501
        """XiqDeviceMonitorIpv4RoutingDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._destination = None
        self._nexthop = None
        self._vlan_id = None
        self._vlan_name = None
        self._route_origin = None
        self._status = None
        self._metric = None
        self._age = None
        self._route_type_priority = None
        self._routing_instance = None
        self.discriminator = None

        self.destination = destination
        if nexthop is not None:
            self.nexthop = nexthop
        self.vlan_id = vlan_id
        if vlan_name is not None:
            self.vlan_name = vlan_name
        if route_origin is not None:
            self.route_origin = route_origin
        if status is not None:
            self.status = status
        if metric is not None:
            self.metric = metric
        if age is not None:
            self.age = age
        if route_type_priority is not None:
            self.route_type_priority = route_type_priority
        if routing_instance is not None:
            self.routing_instance = routing_instance

    @property
    def destination(self):
        """Gets the destination of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501

        The IPv4 Route destination  # noqa: E501

        :return: The destination of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this XiqDeviceMonitorIpv4RoutingDetail.

        The IPv4 Route destination  # noqa: E501

        :param destination: The destination of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and destination is None:  # noqa: E501
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def nexthop(self):
        """Gets the nexthop of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501


        :return: The nexthop of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :rtype: XiqDeviceMonitorIpv4RouteNexthop
        """
        return self._nexthop

    @nexthop.setter
    def nexthop(self, nexthop):
        """Sets the nexthop of this XiqDeviceMonitorIpv4RoutingDetail.


        :param nexthop: The nexthop of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :type: XiqDeviceMonitorIpv4RouteNexthop
        """

        self._nexthop = nexthop

    @property
    def vlan_id(self):
        """Gets the vlan_id of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501

        The VLAN ID of the IPv4 Route  # noqa: E501

        :return: The vlan_id of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this XiqDeviceMonitorIpv4RoutingDetail.

        The VLAN ID of the IPv4 Route  # noqa: E501

        :param vlan_id: The vlan_id of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and vlan_id is None:  # noqa: E501
            raise ValueError("Invalid value for `vlan_id`, must not be `None`")  # noqa: E501

        self._vlan_id = vlan_id

    @property
    def vlan_name(self):
        """Gets the vlan_name of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501

        The VLAN Name of the IPv4 Route  # noqa: E501

        :return: The vlan_name of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :rtype: str
        """
        return self._vlan_name

    @vlan_name.setter
    def vlan_name(self, vlan_name):
        """Sets the vlan_name of this XiqDeviceMonitorIpv4RoutingDetail.

        The VLAN Name of the IPv4 Route  # noqa: E501

        :param vlan_name: The vlan_name of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :type: str
        """

        self._vlan_name = vlan_name

    @property
    def route_origin(self):
        """Gets the route_origin of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501

        The Route Origin of the IPv4 Route  # noqa: E501

        :return: The route_origin of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :rtype: str
        """
        return self._route_origin

    @route_origin.setter
    def route_origin(self, route_origin):
        """Sets the route_origin of this XiqDeviceMonitorIpv4RoutingDetail.

        The Route Origin of the IPv4 Route  # noqa: E501

        :param route_origin: The route_origin of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :type: str
        """

        self._route_origin = route_origin

    @property
    def status(self):
        """Gets the status of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501

        The status of the IPv4 Route  # noqa: E501

        :return: The status of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this XiqDeviceMonitorIpv4RoutingDetail.

        The status of the IPv4 Route  # noqa: E501

        :param status: The status of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def metric(self):
        """Gets the metric of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501

        The metric of the IPv4 Route  # noqa: E501

        :return: The metric of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :rtype: int
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this XiqDeviceMonitorIpv4RoutingDetail.

        The metric of the IPv4 Route  # noqa: E501

        :param metric: The metric of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :type: int
        """

        self._metric = metric

    @property
    def age(self):
        """Gets the age of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501

        The age of the IPv4 Route  # noqa: E501

        :return: The age of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this XiqDeviceMonitorIpv4RoutingDetail.

        The age of the IPv4 Route  # noqa: E501

        :param age: The age of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def route_type_priority(self):
        """Gets the route_type_priority of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501

        The route type priority of the IPv4 Route  # noqa: E501

        :return: The route_type_priority of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :rtype: str
        """
        return self._route_type_priority

    @route_type_priority.setter
    def route_type_priority(self, route_type_priority):
        """Sets the route_type_priority of this XiqDeviceMonitorIpv4RoutingDetail.

        The route type priority of the IPv4 Route  # noqa: E501

        :param route_type_priority: The route_type_priority of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :type: str
        """

        self._route_type_priority = route_type_priority

    @property
    def routing_instance(self):
        """Gets the routing_instance of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501

        The Routing instance name of the IPv4 Route  # noqa: E501

        :return: The routing_instance of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :rtype: str
        """
        return self._routing_instance

    @routing_instance.setter
    def routing_instance(self, routing_instance):
        """Sets the routing_instance of this XiqDeviceMonitorIpv4RoutingDetail.

        The Routing instance name of the IPv4 Route  # noqa: E501

        :param routing_instance: The routing_instance of this XiqDeviceMonitorIpv4RoutingDetail.  # noqa: E501
        :type: str
        """

        self._routing_instance = routing_instance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqDeviceMonitorIpv4RoutingDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqDeviceMonitorIpv4RoutingDetail):
            return True

        return self.to_dict() != other.to_dict()
