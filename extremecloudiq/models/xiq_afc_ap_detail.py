# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.6.0.74
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqAfcApDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'expire': 'int',
        'received': 'int',
        'reason': 'str',
        'spectrum': 'XiqAfcAvailableSpectrum',
        'band_width': 'int'
    }

    attribute_map = {
        'status': 'status',
        'expire': 'expire',
        'received': 'received',
        'reason': 'reason',
        'spectrum': 'spectrum',
        'band_width': 'band_width'
    }

    def __init__(self, status=None, expire=None, received=None, reason=None, spectrum=None, band_width=None, local_vars_configuration=None):  # noqa: E501
        """XiqAfcApDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._expire = None
        self._received = None
        self._reason = None
        self._spectrum = None
        self._band_width = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if expire is not None:
            self.expire = expire
        if received is not None:
            self.received = received
        if reason is not None:
            self.reason = reason
        if spectrum is not None:
            self.spectrum = spectrum
        if band_width is not None:
            self.band_width = band_width

    @property
    def status(self):
        """Gets the status of this XiqAfcApDetail.  # noqa: E501


        :return: The status of this XiqAfcApDetail.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this XiqAfcApDetail.


        :param status: The status of this XiqAfcApDetail.  # noqa: E501
        :type: str
        """
        allowed_values = ["PENDING", "GRACE_PERIOD", "AVAILABLE", "NA"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def expire(self):
        """Gets the expire of this XiqAfcApDetail.  # noqa: E501


        :return: The expire of this XiqAfcApDetail.  # noqa: E501
        :rtype: int
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this XiqAfcApDetail.


        :param expire: The expire of this XiqAfcApDetail.  # noqa: E501
        :type: int
        """

        self._expire = expire

    @property
    def received(self):
        """Gets the received of this XiqAfcApDetail.  # noqa: E501


        :return: The received of this XiqAfcApDetail.  # noqa: E501
        :rtype: int
        """
        return self._received

    @received.setter
    def received(self, received):
        """Sets the received of this XiqAfcApDetail.


        :param received: The received of this XiqAfcApDetail.  # noqa: E501
        :type: int
        """

        self._received = received

    @property
    def reason(self):
        """Gets the reason of this XiqAfcApDetail.  # noqa: E501


        :return: The reason of this XiqAfcApDetail.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this XiqAfcApDetail.


        :param reason: The reason of this XiqAfcApDetail.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def spectrum(self):
        """Gets the spectrum of this XiqAfcApDetail.  # noqa: E501


        :return: The spectrum of this XiqAfcApDetail.  # noqa: E501
        :rtype: XiqAfcAvailableSpectrum
        """
        return self._spectrum

    @spectrum.setter
    def spectrum(self, spectrum):
        """Sets the spectrum of this XiqAfcApDetail.


        :param spectrum: The spectrum of this XiqAfcApDetail.  # noqa: E501
        :type: XiqAfcAvailableSpectrum
        """

        self._spectrum = spectrum

    @property
    def band_width(self):
        """Gets the band_width of this XiqAfcApDetail.  # noqa: E501


        :return: The band_width of this XiqAfcApDetail.  # noqa: E501
        :rtype: int
        """
        return self._band_width

    @band_width.setter
    def band_width(self, band_width):
        """Sets the band_width of this XiqAfcApDetail.


        :param band_width: The band_width of this XiqAfcApDetail.  # noqa: E501
        :type: int
        """

        self._band_width = band_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqAfcApDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqAfcApDetail):
            return True

        return self.to_dict() != other.to_dict()
