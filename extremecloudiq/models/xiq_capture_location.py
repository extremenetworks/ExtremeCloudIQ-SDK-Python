# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 23.6.0.46
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqCaptureLocation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'direction': 'XiqCaptureDirectionSelection',
        'radio': 'XiqCaptureRadioSelection',
        'wired_interface': 'XiqCaptureWiredSelection',
        'wireless_band': 'XiqCaptureBandSelection',
        'wired_filters': 'list[XiqWiredFilterType]',
        'wireless_filters': 'list[XiqWirelessFilterType]'
    }

    attribute_map = {
        'direction': 'direction',
        'radio': 'radio',
        'wired_interface': 'wired_interface',
        'wireless_band': 'wireless_band',
        'wired_filters': 'wired_filters',
        'wireless_filters': 'wireless_filters'
    }

    def __init__(self, direction=None, radio=None, wired_interface=None, wireless_band=None, wired_filters=None, wireless_filters=None, local_vars_configuration=None):  # noqa: E501
        """XiqCaptureLocation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._direction = None
        self._radio = None
        self._wired_interface = None
        self._wireless_band = None
        self._wired_filters = None
        self._wireless_filters = None
        self.discriminator = None

        if direction is not None:
            self.direction = direction
        if radio is not None:
            self.radio = radio
        if wired_interface is not None:
            self.wired_interface = wired_interface
        if wireless_band is not None:
            self.wireless_band = wireless_band
        if wired_filters is not None:
            self.wired_filters = wired_filters
        if wireless_filters is not None:
            self.wireless_filters = wireless_filters

    @property
    def direction(self):
        """Gets the direction of this XiqCaptureLocation.  # noqa: E501


        :return: The direction of this XiqCaptureLocation.  # noqa: E501
        :rtype: XiqCaptureDirectionSelection
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this XiqCaptureLocation.


        :param direction: The direction of this XiqCaptureLocation.  # noqa: E501
        :type: XiqCaptureDirectionSelection
        """

        self._direction = direction

    @property
    def radio(self):
        """Gets the radio of this XiqCaptureLocation.  # noqa: E501


        :return: The radio of this XiqCaptureLocation.  # noqa: E501
        :rtype: XiqCaptureRadioSelection
        """
        return self._radio

    @radio.setter
    def radio(self, radio):
        """Sets the radio of this XiqCaptureLocation.


        :param radio: The radio of this XiqCaptureLocation.  # noqa: E501
        :type: XiqCaptureRadioSelection
        """

        self._radio = radio

    @property
    def wired_interface(self):
        """Gets the wired_interface of this XiqCaptureLocation.  # noqa: E501


        :return: The wired_interface of this XiqCaptureLocation.  # noqa: E501
        :rtype: XiqCaptureWiredSelection
        """
        return self._wired_interface

    @wired_interface.setter
    def wired_interface(self, wired_interface):
        """Sets the wired_interface of this XiqCaptureLocation.


        :param wired_interface: The wired_interface of this XiqCaptureLocation.  # noqa: E501
        :type: XiqCaptureWiredSelection
        """

        self._wired_interface = wired_interface

    @property
    def wireless_band(self):
        """Gets the wireless_band of this XiqCaptureLocation.  # noqa: E501


        :return: The wireless_band of this XiqCaptureLocation.  # noqa: E501
        :rtype: XiqCaptureBandSelection
        """
        return self._wireless_band

    @wireless_band.setter
    def wireless_band(self, wireless_band):
        """Sets the wireless_band of this XiqCaptureLocation.


        :param wireless_band: The wireless_band of this XiqCaptureLocation.  # noqa: E501
        :type: XiqCaptureBandSelection
        """

        self._wireless_band = wireless_band

    @property
    def wired_filters(self):
        """Gets the wired_filters of this XiqCaptureLocation.  # noqa: E501

        The list of pre-defined wired filters for packet capture  # noqa: E501

        :return: The wired_filters of this XiqCaptureLocation.  # noqa: E501
        :rtype: list[XiqWiredFilterType]
        """
        return self._wired_filters

    @wired_filters.setter
    def wired_filters(self, wired_filters):
        """Sets the wired_filters of this XiqCaptureLocation.

        The list of pre-defined wired filters for packet capture  # noqa: E501

        :param wired_filters: The wired_filters of this XiqCaptureLocation.  # noqa: E501
        :type: list[XiqWiredFilterType]
        """

        self._wired_filters = wired_filters

    @property
    def wireless_filters(self):
        """Gets the wireless_filters of this XiqCaptureLocation.  # noqa: E501

        The list of pre-defined wireless filters for packet capture  # noqa: E501

        :return: The wireless_filters of this XiqCaptureLocation.  # noqa: E501
        :rtype: list[XiqWirelessFilterType]
        """
        return self._wireless_filters

    @wireless_filters.setter
    def wireless_filters(self, wireless_filters):
        """Sets the wireless_filters of this XiqCaptureLocation.

        The list of pre-defined wireless filters for packet capture  # noqa: E501

        :param wireless_filters: The wireless_filters of this XiqCaptureLocation.  # noqa: E501
        :type: list[XiqWirelessFilterType]
        """

        self._wireless_filters = wireless_filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqCaptureLocation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqCaptureLocation):
            return True

        return self.to_dict() != other.to_dict()
