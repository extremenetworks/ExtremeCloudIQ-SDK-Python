# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 23.6.0.46
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqValidForTimePeriodSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'valid_time_period_after': 'XiqValidTimePeriodAfterType',
        'after_id_creation_settings': 'XiqValidTimePeriodAfterIdCreation',
        'after_first_login_settings': 'XiqValidTimePeriodAfterFirstLogin'
    }

    attribute_map = {
        'valid_time_period_after': 'valid_time_period_after',
        'after_id_creation_settings': 'after_id_creation_settings',
        'after_first_login_settings': 'after_first_login_settings'
    }

    def __init__(self, valid_time_period_after=None, after_id_creation_settings=None, after_first_login_settings=None, local_vars_configuration=None):  # noqa: E501
        """XiqValidForTimePeriodSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._valid_time_period_after = None
        self._after_id_creation_settings = None
        self._after_first_login_settings = None
        self.discriminator = None

        self.valid_time_period_after = valid_time_period_after
        if after_id_creation_settings is not None:
            self.after_id_creation_settings = after_id_creation_settings
        if after_first_login_settings is not None:
            self.after_first_login_settings = after_first_login_settings

    @property
    def valid_time_period_after(self):
        """Gets the valid_time_period_after of this XiqValidForTimePeriodSettings.  # noqa: E501


        :return: The valid_time_period_after of this XiqValidForTimePeriodSettings.  # noqa: E501
        :rtype: XiqValidTimePeriodAfterType
        """
        return self._valid_time_period_after

    @valid_time_period_after.setter
    def valid_time_period_after(self, valid_time_period_after):
        """Sets the valid_time_period_after of this XiqValidForTimePeriodSettings.


        :param valid_time_period_after: The valid_time_period_after of this XiqValidForTimePeriodSettings.  # noqa: E501
        :type: XiqValidTimePeriodAfterType
        """
        if self.local_vars_configuration.client_side_validation and valid_time_period_after is None:  # noqa: E501
            raise ValueError("Invalid value for `valid_time_period_after`, must not be `None`")  # noqa: E501

        self._valid_time_period_after = valid_time_period_after

    @property
    def after_id_creation_settings(self):
        """Gets the after_id_creation_settings of this XiqValidForTimePeriodSettings.  # noqa: E501


        :return: The after_id_creation_settings of this XiqValidForTimePeriodSettings.  # noqa: E501
        :rtype: XiqValidTimePeriodAfterIdCreation
        """
        return self._after_id_creation_settings

    @after_id_creation_settings.setter
    def after_id_creation_settings(self, after_id_creation_settings):
        """Sets the after_id_creation_settings of this XiqValidForTimePeriodSettings.


        :param after_id_creation_settings: The after_id_creation_settings of this XiqValidForTimePeriodSettings.  # noqa: E501
        :type: XiqValidTimePeriodAfterIdCreation
        """

        self._after_id_creation_settings = after_id_creation_settings

    @property
    def after_first_login_settings(self):
        """Gets the after_first_login_settings of this XiqValidForTimePeriodSettings.  # noqa: E501


        :return: The after_first_login_settings of this XiqValidForTimePeriodSettings.  # noqa: E501
        :rtype: XiqValidTimePeriodAfterFirstLogin
        """
        return self._after_first_login_settings

    @after_first_login_settings.setter
    def after_first_login_settings(self, after_first_login_settings):
        """Sets the after_first_login_settings of this XiqValidForTimePeriodSettings.


        :param after_first_login_settings: The after_first_login_settings of this XiqValidForTimePeriodSettings.  # noqa: E501
        :type: XiqValidTimePeriodAfterFirstLogin
        """

        self._after_first_login_settings = after_first_login_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqValidForTimePeriodSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqValidForTimePeriodSettings):
            return True

        return self.to_dict() != other.to_dict()
