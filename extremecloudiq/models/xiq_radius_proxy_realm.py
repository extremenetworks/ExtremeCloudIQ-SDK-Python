# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 23.6.0.46
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqRadiusProxyRealm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'enable_strip_realm_name': 'bool',
        'radius_client_object_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'enable_strip_realm_name': 'enable_strip_realm_name',
        'radius_client_object_id': 'radius_client_object_id'
    }

    def __init__(self, id=None, name=None, enable_strip_realm_name=None, radius_client_object_id=None, local_vars_configuration=None):  # noqa: E501
        """XiqRadiusProxyRealm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._enable_strip_realm_name = None
        self._radius_client_object_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if enable_strip_realm_name is not None:
            self.enable_strip_realm_name = enable_strip_realm_name
        if radius_client_object_id is not None:
            self.radius_client_object_id = radius_client_object_id

    @property
    def id(self):
        """Gets the id of this XiqRadiusProxyRealm.  # noqa: E501

        The RADIUS proxy realm ID  # noqa: E501

        :return: The id of this XiqRadiusProxyRealm.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XiqRadiusProxyRealm.

        The RADIUS proxy realm ID  # noqa: E501

        :param id: The id of this XiqRadiusProxyRealm.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this XiqRadiusProxyRealm.  # noqa: E501

        The RADIUS proxy realm name  # noqa: E501

        :return: The name of this XiqRadiusProxyRealm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XiqRadiusProxyRealm.

        The RADIUS proxy realm name  # noqa: E501

        :param name: The name of this XiqRadiusProxyRealm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def enable_strip_realm_name(self):
        """Gets the enable_strip_realm_name of this XiqRadiusProxyRealm.  # noqa: E501

        The flag for enable strip realm name  # noqa: E501

        :return: The enable_strip_realm_name of this XiqRadiusProxyRealm.  # noqa: E501
        :rtype: bool
        """
        return self._enable_strip_realm_name

    @enable_strip_realm_name.setter
    def enable_strip_realm_name(self, enable_strip_realm_name):
        """Sets the enable_strip_realm_name of this XiqRadiusProxyRealm.

        The flag for enable strip realm name  # noqa: E501

        :param enable_strip_realm_name: The enable_strip_realm_name of this XiqRadiusProxyRealm.  # noqa: E501
        :type: bool
        """

        self._enable_strip_realm_name = enable_strip_realm_name

    @property
    def radius_client_object_id(self):
        """Gets the radius_client_object_id of this XiqRadiusProxyRealm.  # noqa: E501

        The associate RADIUS client object ID  # noqa: E501

        :return: The radius_client_object_id of this XiqRadiusProxyRealm.  # noqa: E501
        :rtype: int
        """
        return self._radius_client_object_id

    @radius_client_object_id.setter
    def radius_client_object_id(self, radius_client_object_id):
        """Sets the radius_client_object_id of this XiqRadiusProxyRealm.

        The associate RADIUS client object ID  # noqa: E501

        :param radius_client_object_id: The radius_client_object_id of this XiqRadiusProxyRealm.  # noqa: E501
        :type: int
        """

        self._radius_client_object_id = radius_client_object_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqRadiusProxyRealm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqRadiusProxyRealm):
            return True

        return self.to_dict() != other.to_dict()
