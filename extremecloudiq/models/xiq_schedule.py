# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqSchedule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'schedule_type': 'XiqScheduleType',
        'start_date': 'str',
        'end_date': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'recurrence_type': 'XiqRecurrenceType',
        'weekday_from': 'XiqWeekday',
        'weekday_to': 'XiqWeekday',
        'start_time2': 'str',
        'end_time2': 'str'
    }

    attribute_map = {
        'description': 'description',
        'schedule_type': 'schedule_type',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'start_time': 'start_time',
        'end_time': 'end_time',
        'recurrence_type': 'recurrence_type',
        'weekday_from': 'weekday_from',
        'weekday_to': 'weekday_to',
        'start_time2': 'start_time2',
        'end_time2': 'end_time2'
    }

    def __init__(self, description=None, schedule_type=None, start_date=None, end_date=None, start_time=None, end_time=None, recurrence_type=None, weekday_from=None, weekday_to=None, start_time2=None, end_time2=None, local_vars_configuration=None):  # noqa: E501
        """XiqSchedule - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._schedule_type = None
        self._start_date = None
        self._end_date = None
        self._start_time = None
        self._end_time = None
        self._recurrence_type = None
        self._weekday_from = None
        self._weekday_to = None
        self._start_time2 = None
        self._end_time2 = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if schedule_type is not None:
            self.schedule_type = schedule_type
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if recurrence_type is not None:
            self.recurrence_type = recurrence_type
        if weekday_from is not None:
            self.weekday_from = weekday_from
        if weekday_to is not None:
            self.weekday_to = weekday_to
        if start_time2 is not None:
            self.start_time2 = start_time2
        if end_time2 is not None:
            self.end_time2 = end_time2

    @property
    def description(self):
        """Gets the description of this XiqSchedule.  # noqa: E501

        The OS object name.  # noqa: E501

        :return: The description of this XiqSchedule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this XiqSchedule.

        The OS object name.  # noqa: E501

        :param description: The description of this XiqSchedule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def schedule_type(self):
        """Gets the schedule_type of this XiqSchedule.  # noqa: E501


        :return: The schedule_type of this XiqSchedule.  # noqa: E501
        :rtype: XiqScheduleType
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this XiqSchedule.


        :param schedule_type: The schedule_type of this XiqSchedule.  # noqa: E501
        :type: XiqScheduleType
        """

        self._schedule_type = schedule_type

    @property
    def start_date(self):
        """Gets the start_date of this XiqSchedule.  # noqa: E501

        The OS object name.  # noqa: E501

        :return: The start_date of this XiqSchedule.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this XiqSchedule.

        The OS object name.  # noqa: E501

        :param start_date: The start_date of this XiqSchedule.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this XiqSchedule.  # noqa: E501

        The OS object name.  # noqa: E501

        :return: The end_date of this XiqSchedule.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this XiqSchedule.

        The OS object name.  # noqa: E501

        :param end_date: The end_date of this XiqSchedule.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def start_time(self):
        """Gets the start_time of this XiqSchedule.  # noqa: E501

        The OS object name.  # noqa: E501

        :return: The start_time of this XiqSchedule.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this XiqSchedule.

        The OS object name.  # noqa: E501

        :param start_time: The start_time of this XiqSchedule.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this XiqSchedule.  # noqa: E501

        The OS object name.  # noqa: E501

        :return: The end_time of this XiqSchedule.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this XiqSchedule.

        The OS object name.  # noqa: E501

        :param end_time: The end_time of this XiqSchedule.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this XiqSchedule.  # noqa: E501


        :return: The recurrence_type of this XiqSchedule.  # noqa: E501
        :rtype: XiqRecurrenceType
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this XiqSchedule.


        :param recurrence_type: The recurrence_type of this XiqSchedule.  # noqa: E501
        :type: XiqRecurrenceType
        """

        self._recurrence_type = recurrence_type

    @property
    def weekday_from(self):
        """Gets the weekday_from of this XiqSchedule.  # noqa: E501


        :return: The weekday_from of this XiqSchedule.  # noqa: E501
        :rtype: XiqWeekday
        """
        return self._weekday_from

    @weekday_from.setter
    def weekday_from(self, weekday_from):
        """Sets the weekday_from of this XiqSchedule.


        :param weekday_from: The weekday_from of this XiqSchedule.  # noqa: E501
        :type: XiqWeekday
        """

        self._weekday_from = weekday_from

    @property
    def weekday_to(self):
        """Gets the weekday_to of this XiqSchedule.  # noqa: E501


        :return: The weekday_to of this XiqSchedule.  # noqa: E501
        :rtype: XiqWeekday
        """
        return self._weekday_to

    @weekday_to.setter
    def weekday_to(self, weekday_to):
        """Sets the weekday_to of this XiqSchedule.


        :param weekday_to: The weekday_to of this XiqSchedule.  # noqa: E501
        :type: XiqWeekday
        """

        self._weekday_to = weekday_to

    @property
    def start_time2(self):
        """Gets the start_time2 of this XiqSchedule.  # noqa: E501

        The OS object name.  # noqa: E501

        :return: The start_time2 of this XiqSchedule.  # noqa: E501
        :rtype: str
        """
        return self._start_time2

    @start_time2.setter
    def start_time2(self, start_time2):
        """Sets the start_time2 of this XiqSchedule.

        The OS object name.  # noqa: E501

        :param start_time2: The start_time2 of this XiqSchedule.  # noqa: E501
        :type: str
        """

        self._start_time2 = start_time2

    @property
    def end_time2(self):
        """Gets the end_time2 of this XiqSchedule.  # noqa: E501

        The OS object name.  # noqa: E501

        :return: The end_time2 of this XiqSchedule.  # noqa: E501
        :rtype: str
        """
        return self._end_time2

    @end_time2.setter
    def end_time2(self, end_time2):
        """Sets the end_time2 of this XiqSchedule.

        The OS object name.  # noqa: E501

        :param end_time2: The end_time2 of this XiqSchedule.  # noqa: E501
        :type: str
        """

        self._end_time2 = end_time2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqSchedule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqSchedule):
            return True

        return self.to_dict() != other.to_dict()
