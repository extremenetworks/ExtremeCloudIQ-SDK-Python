# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.6.0.74
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqDeploymentByIdStatusResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'schedule_status': 'XiqScheduleStatus',
        'schedule_time': 'int',
        'created_time': 'int',
        'updated_time': 'int',
        'site_info': 'list[XiqSiteInfo]',
        'deployment_status': 'dict(str, XiqDeploymentStatus)',
        'overview': 'XiqDeploymentOverviewDetails'
    }

    attribute_map = {
        'schedule_status': 'schedule_status',
        'schedule_time': 'schedule_time',
        'created_time': 'created_time',
        'updated_time': 'updated_time',
        'site_info': 'site_info',
        'deployment_status': 'deployment_status',
        'overview': 'overview'
    }

    def __init__(self, schedule_status=None, schedule_time=None, created_time=None, updated_time=None, site_info=None, deployment_status=None, overview=None, local_vars_configuration=None):  # noqa: E501
        """XiqDeploymentByIdStatusResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._schedule_status = None
        self._schedule_time = None
        self._created_time = None
        self._updated_time = None
        self._site_info = None
        self._deployment_status = None
        self._overview = None
        self.discriminator = None

        if schedule_status is not None:
            self.schedule_status = schedule_status
        if schedule_time is not None:
            self.schedule_time = schedule_time
        if created_time is not None:
            self.created_time = created_time
        if updated_time is not None:
            self.updated_time = updated_time
        if site_info is not None:
            self.site_info = site_info
        if deployment_status is not None:
            self.deployment_status = deployment_status
        if overview is not None:
            self.overview = overview

    @property
    def schedule_status(self):
        """Gets the schedule_status of this XiqDeploymentByIdStatusResponse.  # noqa: E501


        :return: The schedule_status of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :rtype: XiqScheduleStatus
        """
        return self._schedule_status

    @schedule_status.setter
    def schedule_status(self, schedule_status):
        """Sets the schedule_status of this XiqDeploymentByIdStatusResponse.


        :param schedule_status: The schedule_status of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :type: XiqScheduleStatus
        """

        self._schedule_status = schedule_status

    @property
    def schedule_time(self):
        """Gets the schedule_time of this XiqDeploymentByIdStatusResponse.  # noqa: E501

        The scheduled time  # noqa: E501

        :return: The schedule_time of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._schedule_time

    @schedule_time.setter
    def schedule_time(self, schedule_time):
        """Sets the schedule_time of this XiqDeploymentByIdStatusResponse.

        The scheduled time  # noqa: E501

        :param schedule_time: The schedule_time of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :type: int
        """

        self._schedule_time = schedule_time

    @property
    def created_time(self):
        """Gets the created_time of this XiqDeploymentByIdStatusResponse.  # noqa: E501

        The created time  # noqa: E501

        :return: The created_time of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this XiqDeploymentByIdStatusResponse.

        The created time  # noqa: E501

        :param created_time: The created_time of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :type: int
        """

        self._created_time = created_time

    @property
    def updated_time(self):
        """Gets the updated_time of this XiqDeploymentByIdStatusResponse.  # noqa: E501

        The updated time  # noqa: E501

        :return: The updated_time of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :rtype: int
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this XiqDeploymentByIdStatusResponse.

        The updated time  # noqa: E501

        :param updated_time: The updated_time of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :type: int
        """

        self._updated_time = updated_time

    @property
    def site_info(self):
        """Gets the site_info of this XiqDeploymentByIdStatusResponse.  # noqa: E501

        The site information tagged to devices  # noqa: E501

        :return: The site_info of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :rtype: list[XiqSiteInfo]
        """
        return self._site_info

    @site_info.setter
    def site_info(self, site_info):
        """Sets the site_info of this XiqDeploymentByIdStatusResponse.

        The site information tagged to devices  # noqa: E501

        :param site_info: The site_info of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :type: list[XiqSiteInfo]
        """

        self._site_info = site_info

    @property
    def deployment_status(self):
        """Gets the deployment_status of this XiqDeploymentByIdStatusResponse.  # noqa: E501

        The deployment status  # noqa: E501

        :return: The deployment_status of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :rtype: dict(str, XiqDeploymentStatus)
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this XiqDeploymentByIdStatusResponse.

        The deployment status  # noqa: E501

        :param deployment_status: The deployment_status of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :type: dict(str, XiqDeploymentStatus)
        """

        self._deployment_status = deployment_status

    @property
    def overview(self):
        """Gets the overview of this XiqDeploymentByIdStatusResponse.  # noqa: E501


        :return: The overview of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :rtype: XiqDeploymentOverviewDetails
        """
        return self._overview

    @overview.setter
    def overview(self, overview):
        """Sets the overview of this XiqDeploymentByIdStatusResponse.


        :param overview: The overview of this XiqDeploymentByIdStatusResponse.  # noqa: E501
        :type: XiqDeploymentOverviewDetails
        """

        self._overview = overview

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqDeploymentByIdStatusResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqDeploymentByIdStatusResponse):
            return True

        return self.to_dict() != other.to_dict()
