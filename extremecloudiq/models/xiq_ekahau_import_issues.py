# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqEkahauImportIssues(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'floor': 'XiqEkahauImportIssue',
        'background': 'XiqEkahauImportIssue',
        'custom_ap_configurations': 'dict(str, list[XiqEkahauImportIssue])',
        'discarded_aps': 'dict(str, XiqEkahauImportIssue)',
        'discarded_walls': 'dict(str, XiqEkahauImportIssue)'
    }

    attribute_map = {
        'floor': 'floor',
        'background': 'background',
        'custom_ap_configurations': 'custom_ap_configurations',
        'discarded_aps': 'discarded_aps',
        'discarded_walls': 'discarded_walls'
    }

    def __init__(self, floor=None, background=None, custom_ap_configurations=None, discarded_aps=None, discarded_walls=None, local_vars_configuration=None):  # noqa: E501
        """XiqEkahauImportIssues - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._floor = None
        self._background = None
        self._custom_ap_configurations = None
        self._discarded_aps = None
        self._discarded_walls = None
        self.discriminator = None

        if floor is not None:
            self.floor = floor
        if background is not None:
            self.background = background
        if custom_ap_configurations is not None:
            self.custom_ap_configurations = custom_ap_configurations
        if discarded_aps is not None:
            self.discarded_aps = discarded_aps
        if discarded_walls is not None:
            self.discarded_walls = discarded_walls

    @property
    def floor(self):
        """Gets the floor of this XiqEkahauImportIssues.  # noqa: E501


        :return: The floor of this XiqEkahauImportIssues.  # noqa: E501
        :rtype: XiqEkahauImportIssue
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this XiqEkahauImportIssues.


        :param floor: The floor of this XiqEkahauImportIssues.  # noqa: E501
        :type: XiqEkahauImportIssue
        """

        self._floor = floor

    @property
    def background(self):
        """Gets the background of this XiqEkahauImportIssues.  # noqa: E501


        :return: The background of this XiqEkahauImportIssues.  # noqa: E501
        :rtype: XiqEkahauImportIssue
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this XiqEkahauImportIssues.


        :param background: The background of this XiqEkahauImportIssues.  # noqa: E501
        :type: XiqEkahauImportIssue
        """

        self._background = background

    @property
    def custom_ap_configurations(self):
        """Gets the custom_ap_configurations of this XiqEkahauImportIssues.  # noqa: E501

        If the floor was imported but issues occurred while importing custom AP configurations they will be listed here.  # noqa: E501

        :return: The custom_ap_configurations of this XiqEkahauImportIssues.  # noqa: E501
        :rtype: dict(str, list[XiqEkahauImportIssue])
        """
        return self._custom_ap_configurations

    @custom_ap_configurations.setter
    def custom_ap_configurations(self, custom_ap_configurations):
        """Sets the custom_ap_configurations of this XiqEkahauImportIssues.

        If the floor was imported but issues occurred while importing custom AP configurations they will be listed here.  # noqa: E501

        :param custom_ap_configurations: The custom_ap_configurations of this XiqEkahauImportIssues.  # noqa: E501
        :type: dict(str, list[XiqEkahauImportIssue])
        """

        self._custom_ap_configurations = custom_ap_configurations

    @property
    def discarded_aps(self):
        """Gets the discarded_aps of this XiqEkahauImportIssues.  # noqa: E501

        If the floor was imported but some of the APs were discarded they will be listed here.  # noqa: E501

        :return: The discarded_aps of this XiqEkahauImportIssues.  # noqa: E501
        :rtype: dict(str, XiqEkahauImportIssue)
        """
        return self._discarded_aps

    @discarded_aps.setter
    def discarded_aps(self, discarded_aps):
        """Sets the discarded_aps of this XiqEkahauImportIssues.

        If the floor was imported but some of the APs were discarded they will be listed here.  # noqa: E501

        :param discarded_aps: The discarded_aps of this XiqEkahauImportIssues.  # noqa: E501
        :type: dict(str, XiqEkahauImportIssue)
        """

        self._discarded_aps = discarded_aps

    @property
    def discarded_walls(self):
        """Gets the discarded_walls of this XiqEkahauImportIssues.  # noqa: E501

        If the floor was imported but some of the walls were discarded they will be listed here.  # noqa: E501

        :return: The discarded_walls of this XiqEkahauImportIssues.  # noqa: E501
        :rtype: dict(str, XiqEkahauImportIssue)
        """
        return self._discarded_walls

    @discarded_walls.setter
    def discarded_walls(self, discarded_walls):
        """Sets the discarded_walls of this XiqEkahauImportIssues.

        If the floor was imported but some of the walls were discarded they will be listed here.  # noqa: E501

        :param discarded_walls: The discarded_walls of this XiqEkahauImportIssues.  # noqa: E501
        :type: dict(str, XiqEkahauImportIssue)
        """

        self._discarded_walls = discarded_walls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqEkahauImportIssues):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqEkahauImportIssues):
            return True

        return self.to_dict() != other.to_dict()
