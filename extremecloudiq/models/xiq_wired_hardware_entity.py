# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 23.6.0.46
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqWiredHardwareEntity(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'quality_index': 'int',
        'timestamp': 'int',
        'total_switches': 'int',
        'affected_ratio': 'int',
        'affected': 'float'
    }

    attribute_map = {
        'quality_index': 'quality_index',
        'timestamp': 'timestamp',
        'total_switches': 'total_switches',
        'affected_ratio': 'affected_ratio',
        'affected': 'affected'
    }

    def __init__(self, quality_index=None, timestamp=None, total_switches=None, affected_ratio=None, affected=None, local_vars_configuration=None):  # noqa: E501
        """XiqWiredHardwareEntity - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._quality_index = None
        self._timestamp = None
        self._total_switches = None
        self._affected_ratio = None
        self._affected = None
        self.discriminator = None

        if quality_index is not None:
            self.quality_index = quality_index
        self.timestamp = timestamp
        if total_switches is not None:
            self.total_switches = total_switches
        if affected_ratio is not None:
            self.affected_ratio = affected_ratio
        if affected is not None:
            self.affected = affected

    @property
    def quality_index(self):
        """Gets the quality_index of this XiqWiredHardwareEntity.  # noqa: E501

        the quality index  # noqa: E501

        :return: The quality_index of this XiqWiredHardwareEntity.  # noqa: E501
        :rtype: int
        """
        return self._quality_index

    @quality_index.setter
    def quality_index(self, quality_index):
        """Sets the quality_index of this XiqWiredHardwareEntity.

        the quality index  # noqa: E501

        :param quality_index: The quality_index of this XiqWiredHardwareEntity.  # noqa: E501
        :type: int
        """

        self._quality_index = quality_index

    @property
    def timestamp(self):
        """Gets the timestamp of this XiqWiredHardwareEntity.  # noqa: E501

        the timestamp  # noqa: E501

        :return: The timestamp of this XiqWiredHardwareEntity.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this XiqWiredHardwareEntity.

        the timestamp  # noqa: E501

        :param timestamp: The timestamp of this XiqWiredHardwareEntity.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def total_switches(self):
        """Gets the total_switches of this XiqWiredHardwareEntity.  # noqa: E501

        the total number of switches  # noqa: E501

        :return: The total_switches of this XiqWiredHardwareEntity.  # noqa: E501
        :rtype: int
        """
        return self._total_switches

    @total_switches.setter
    def total_switches(self, total_switches):
        """Sets the total_switches of this XiqWiredHardwareEntity.

        the total number of switches  # noqa: E501

        :param total_switches: The total_switches of this XiqWiredHardwareEntity.  # noqa: E501
        :type: int
        """

        self._total_switches = total_switches

    @property
    def affected_ratio(self):
        """Gets the affected_ratio of this XiqWiredHardwareEntity.  # noqa: E501

        the affected ratio  # noqa: E501

        :return: The affected_ratio of this XiqWiredHardwareEntity.  # noqa: E501
        :rtype: int
        """
        return self._affected_ratio

    @affected_ratio.setter
    def affected_ratio(self, affected_ratio):
        """Sets the affected_ratio of this XiqWiredHardwareEntity.

        the affected ratio  # noqa: E501

        :param affected_ratio: The affected_ratio of this XiqWiredHardwareEntity.  # noqa: E501
        :type: int
        """

        self._affected_ratio = affected_ratio

    @property
    def affected(self):
        """Gets the affected of this XiqWiredHardwareEntity.  # noqa: E501

        the affected percentage  # noqa: E501

        :return: The affected of this XiqWiredHardwareEntity.  # noqa: E501
        :rtype: float
        """
        return self._affected

    @affected.setter
    def affected(self, affected):
        """Sets the affected of this XiqWiredHardwareEntity.

        the affected percentage  # noqa: E501

        :param affected: The affected of this XiqWiredHardwareEntity.  # noqa: E501
        :type: float
        """

        self._affected = affected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqWiredHardwareEntity):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqWiredHardwareEntity):
            return True

        return self.to_dict() != other.to_dict()
