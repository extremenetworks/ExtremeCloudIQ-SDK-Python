# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqPowerSourceEquipment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'is_lldp_cdp_enabled': 'bool',
        'uplink_switch_system_name': 'str',
        'uplink_switch_system_id': 'str',
        'location_name': 'str',
        'floor_name': 'str',
        'affected_downlink_devices': 'list[XiqAffectedDownlinkDevice]',
        'unaffected_downlink_devices': 'list[XiqUnaffectedDownlinkDevice]',
        'uplink_switch_device_id': 'int'
    }

    attribute_map = {
        'is_lldp_cdp_enabled': 'is_lldp_cdp_enabled',
        'uplink_switch_system_name': 'uplink_switch_system_name',
        'uplink_switch_system_id': 'uplink_switch_system_id',
        'location_name': 'location_name',
        'floor_name': 'floor_name',
        'affected_downlink_devices': 'affected_downlink_devices',
        'unaffected_downlink_devices': 'unaffected_downlink_devices',
        'uplink_switch_device_id': 'uplink_switch_device_id'
    }

    def __init__(self, is_lldp_cdp_enabled=None, uplink_switch_system_name=None, uplink_switch_system_id=None, location_name=None, floor_name=None, affected_downlink_devices=None, unaffected_downlink_devices=None, uplink_switch_device_id=None, local_vars_configuration=None):  # noqa: E501
        """XiqPowerSourceEquipment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._is_lldp_cdp_enabled = None
        self._uplink_switch_system_name = None
        self._uplink_switch_system_id = None
        self._location_name = None
        self._floor_name = None
        self._affected_downlink_devices = None
        self._unaffected_downlink_devices = None
        self._uplink_switch_device_id = None
        self.discriminator = None

        if is_lldp_cdp_enabled is not None:
            self.is_lldp_cdp_enabled = is_lldp_cdp_enabled
        if uplink_switch_system_name is not None:
            self.uplink_switch_system_name = uplink_switch_system_name
        if uplink_switch_system_id is not None:
            self.uplink_switch_system_id = uplink_switch_system_id
        if location_name is not None:
            self.location_name = location_name
        if floor_name is not None:
            self.floor_name = floor_name
        if affected_downlink_devices is not None:
            self.affected_downlink_devices = affected_downlink_devices
        if unaffected_downlink_devices is not None:
            self.unaffected_downlink_devices = unaffected_downlink_devices
        if uplink_switch_device_id is not None:
            self.uplink_switch_device_id = uplink_switch_device_id

    @property
    def is_lldp_cdp_enabled(self):
        """Gets the is_lldp_cdp_enabled of this XiqPowerSourceEquipment.  # noqa: E501

        Check if lldp-cdp enabled on anomalous accesspoints  # noqa: E501

        :return: The is_lldp_cdp_enabled of this XiqPowerSourceEquipment.  # noqa: E501
        :rtype: bool
        """
        return self._is_lldp_cdp_enabled

    @is_lldp_cdp_enabled.setter
    def is_lldp_cdp_enabled(self, is_lldp_cdp_enabled):
        """Sets the is_lldp_cdp_enabled of this XiqPowerSourceEquipment.

        Check if lldp-cdp enabled on anomalous accesspoints  # noqa: E501

        :param is_lldp_cdp_enabled: The is_lldp_cdp_enabled of this XiqPowerSourceEquipment.  # noqa: E501
        :type: bool
        """

        self._is_lldp_cdp_enabled = is_lldp_cdp_enabled

    @property
    def uplink_switch_system_name(self):
        """Gets the uplink_switch_system_name of this XiqPowerSourceEquipment.  # noqa: E501

        Uplink switch system name  # noqa: E501

        :return: The uplink_switch_system_name of this XiqPowerSourceEquipment.  # noqa: E501
        :rtype: str
        """
        return self._uplink_switch_system_name

    @uplink_switch_system_name.setter
    def uplink_switch_system_name(self, uplink_switch_system_name):
        """Sets the uplink_switch_system_name of this XiqPowerSourceEquipment.

        Uplink switch system name  # noqa: E501

        :param uplink_switch_system_name: The uplink_switch_system_name of this XiqPowerSourceEquipment.  # noqa: E501
        :type: str
        """

        self._uplink_switch_system_name = uplink_switch_system_name

    @property
    def uplink_switch_system_id(self):
        """Gets the uplink_switch_system_id of this XiqPowerSourceEquipment.  # noqa: E501

        Uplink switch model  # noqa: E501

        :return: The uplink_switch_system_id of this XiqPowerSourceEquipment.  # noqa: E501
        :rtype: str
        """
        return self._uplink_switch_system_id

    @uplink_switch_system_id.setter
    def uplink_switch_system_id(self, uplink_switch_system_id):
        """Sets the uplink_switch_system_id of this XiqPowerSourceEquipment.

        Uplink switch model  # noqa: E501

        :param uplink_switch_system_id: The uplink_switch_system_id of this XiqPowerSourceEquipment.  # noqa: E501
        :type: str
        """

        self._uplink_switch_system_id = uplink_switch_system_id

    @property
    def location_name(self):
        """Gets the location_name of this XiqPowerSourceEquipment.  # noqa: E501

        The location name for anomalous access points with lldp-cdp info not enabled  # noqa: E501

        :return: The location_name of this XiqPowerSourceEquipment.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this XiqPowerSourceEquipment.

        The location name for anomalous access points with lldp-cdp info not enabled  # noqa: E501

        :param location_name: The location_name of this XiqPowerSourceEquipment.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def floor_name(self):
        """Gets the floor_name of this XiqPowerSourceEquipment.  # noqa: E501

        The location name for anomalous access points with lldp-cdp info not enabled  # noqa: E501

        :return: The floor_name of this XiqPowerSourceEquipment.  # noqa: E501
        :rtype: str
        """
        return self._floor_name

    @floor_name.setter
    def floor_name(self, floor_name):
        """Sets the floor_name of this XiqPowerSourceEquipment.

        The location name for anomalous access points with lldp-cdp info not enabled  # noqa: E501

        :param floor_name: The floor_name of this XiqPowerSourceEquipment.  # noqa: E501
        :type: str
        """

        self._floor_name = floor_name

    @property
    def affected_downlink_devices(self):
        """Gets the affected_downlink_devices of this XiqPowerSourceEquipment.  # noqa: E501

        The list of affected downlink devices  # noqa: E501

        :return: The affected_downlink_devices of this XiqPowerSourceEquipment.  # noqa: E501
        :rtype: list[XiqAffectedDownlinkDevice]
        """
        return self._affected_downlink_devices

    @affected_downlink_devices.setter
    def affected_downlink_devices(self, affected_downlink_devices):
        """Sets the affected_downlink_devices of this XiqPowerSourceEquipment.

        The list of affected downlink devices  # noqa: E501

        :param affected_downlink_devices: The affected_downlink_devices of this XiqPowerSourceEquipment.  # noqa: E501
        :type: list[XiqAffectedDownlinkDevice]
        """

        self._affected_downlink_devices = affected_downlink_devices

    @property
    def unaffected_downlink_devices(self):
        """Gets the unaffected_downlink_devices of this XiqPowerSourceEquipment.  # noqa: E501

        The list of unaffected downlink devices  # noqa: E501

        :return: The unaffected_downlink_devices of this XiqPowerSourceEquipment.  # noqa: E501
        :rtype: list[XiqUnaffectedDownlinkDevice]
        """
        return self._unaffected_downlink_devices

    @unaffected_downlink_devices.setter
    def unaffected_downlink_devices(self, unaffected_downlink_devices):
        """Sets the unaffected_downlink_devices of this XiqPowerSourceEquipment.

        The list of unaffected downlink devices  # noqa: E501

        :param unaffected_downlink_devices: The unaffected_downlink_devices of this XiqPowerSourceEquipment.  # noqa: E501
        :type: list[XiqUnaffectedDownlinkDevice]
        """

        self._unaffected_downlink_devices = unaffected_downlink_devices

    @property
    def uplink_switch_device_id(self):
        """Gets the uplink_switch_device_id of this XiqPowerSourceEquipment.  # noqa: E501

         The uplink device id  # noqa: E501

        :return: The uplink_switch_device_id of this XiqPowerSourceEquipment.  # noqa: E501
        :rtype: int
        """
        return self._uplink_switch_device_id

    @uplink_switch_device_id.setter
    def uplink_switch_device_id(self, uplink_switch_device_id):
        """Sets the uplink_switch_device_id of this XiqPowerSourceEquipment.

         The uplink device id  # noqa: E501

        :param uplink_switch_device_id: The uplink_switch_device_id of this XiqPowerSourceEquipment.  # noqa: E501
        :type: int
        """

        self._uplink_switch_device_id = uplink_switch_device_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqPowerSourceEquipment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqPowerSourceEquipment):
            return True

        return self.to_dict() != other.to_dict()
