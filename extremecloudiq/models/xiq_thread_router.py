# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqThreadRouter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'org_id': 'int',
        'owner_id': 'int',
        'device_id': 'int',
        'serial_number': 'str',
        'eui64': 'str',
        'ext_mac': 'str',
        'rloc16': 'str',
        'global_ipv6': 'str',
        'tx_power': 'int',
        'region': 'str',
        'thread_platform': 'str',
        'device_role': 'str',
        'router_interface': 'XiqThreadNetworkInterface',
        'veth0': 'XiqThreadNetworkInterface',
        'network_data': 'XiqThreadNetworkData',
        'thread_mle_link_mode': 'XiqThreadMleLinkMode',
        'thread_version': 'XiqThreadVersion',
        'leader_service': 'XiqThreadLeaderService',
        'border_router_service': 'XiqThreadBorderRouterService',
        'backbone_border_router_service': 'XiqThreadBackboneBorderRouterService',
        'border_agent_service': 'XiqThreadBorderAgentService',
        'commissioner_service': 'XiqThreadCommissionerService',
        'nat64_service': 'XiqThreadNat64Service',
        'network_config': 'XiqThreadNetworkConfig',
        'active_clients': 'int',
        'hostname': 'str',
        'last_reported': 'datetime',
        'thread_connected': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'create_time': 'create_time',
        'update_time': 'update_time',
        'org_id': 'org_id',
        'owner_id': 'owner_id',
        'device_id': 'device_id',
        'serial_number': 'serial_number',
        'eui64': 'eui64',
        'ext_mac': 'ext_mac',
        'rloc16': 'rloc16',
        'global_ipv6': 'global_ipv6',
        'tx_power': 'tx_power',
        'region': 'region',
        'thread_platform': 'thread_platform',
        'device_role': 'device_role',
        'router_interface': 'router_interface',
        'veth0': 'veth0',
        'network_data': 'network_data',
        'thread_mle_link_mode': 'thread_mle_link_mode',
        'thread_version': 'thread_version',
        'leader_service': 'leader_service',
        'border_router_service': 'border_router_service',
        'backbone_border_router_service': 'backbone_border_router_service',
        'border_agent_service': 'border_agent_service',
        'commissioner_service': 'commissioner_service',
        'nat64_service': 'nat64_service',
        'network_config': 'network_config',
        'active_clients': 'active_clients',
        'hostname': 'hostname',
        'last_reported': 'last_reported',
        'thread_connected': 'thread_connected'
    }

    def __init__(self, id=None, create_time=None, update_time=None, org_id=None, owner_id=None, device_id=None, serial_number=None, eui64=None, ext_mac=None, rloc16=None, global_ipv6=None, tx_power=None, region=None, thread_platform=None, device_role=None, router_interface=None, veth0=None, network_data=None, thread_mle_link_mode=None, thread_version=None, leader_service=None, border_router_service=None, backbone_border_router_service=None, border_agent_service=None, commissioner_service=None, nat64_service=None, network_config=None, active_clients=None, hostname=None, last_reported=None, thread_connected=None, local_vars_configuration=None):  # noqa: E501
        """XiqThreadRouter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._create_time = None
        self._update_time = None
        self._org_id = None
        self._owner_id = None
        self._device_id = None
        self._serial_number = None
        self._eui64 = None
        self._ext_mac = None
        self._rloc16 = None
        self._global_ipv6 = None
        self._tx_power = None
        self._region = None
        self._thread_platform = None
        self._device_role = None
        self._router_interface = None
        self._veth0 = None
        self._network_data = None
        self._thread_mle_link_mode = None
        self._thread_version = None
        self._leader_service = None
        self._border_router_service = None
        self._backbone_border_router_service = None
        self._border_agent_service = None
        self._commissioner_service = None
        self._nat64_service = None
        self._network_config = None
        self._active_clients = None
        self._hostname = None
        self._last_reported = None
        self._thread_connected = None
        self.discriminator = None

        self.id = id
        self.create_time = create_time
        self.update_time = update_time
        if org_id is not None:
            self.org_id = org_id
        if owner_id is not None:
            self.owner_id = owner_id
        if device_id is not None:
            self.device_id = device_id
        if serial_number is not None:
            self.serial_number = serial_number
        if eui64 is not None:
            self.eui64 = eui64
        if ext_mac is not None:
            self.ext_mac = ext_mac
        if rloc16 is not None:
            self.rloc16 = rloc16
        if global_ipv6 is not None:
            self.global_ipv6 = global_ipv6
        if tx_power is not None:
            self.tx_power = tx_power
        if region is not None:
            self.region = region
        if thread_platform is not None:
            self.thread_platform = thread_platform
        if device_role is not None:
            self.device_role = device_role
        if router_interface is not None:
            self.router_interface = router_interface
        if veth0 is not None:
            self.veth0 = veth0
        if network_data is not None:
            self.network_data = network_data
        if thread_mle_link_mode is not None:
            self.thread_mle_link_mode = thread_mle_link_mode
        if thread_version is not None:
            self.thread_version = thread_version
        if leader_service is not None:
            self.leader_service = leader_service
        if border_router_service is not None:
            self.border_router_service = border_router_service
        if backbone_border_router_service is not None:
            self.backbone_border_router_service = backbone_border_router_service
        if border_agent_service is not None:
            self.border_agent_service = border_agent_service
        if commissioner_service is not None:
            self.commissioner_service = commissioner_service
        if nat64_service is not None:
            self.nat64_service = nat64_service
        if network_config is not None:
            self.network_config = network_config
        if active_clients is not None:
            self.active_clients = active_clients
        if hostname is not None:
            self.hostname = hostname
        if last_reported is not None:
            self.last_reported = last_reported
        if thread_connected is not None:
            self.thread_connected = thread_connected

    @property
    def id(self):
        """Gets the id of this XiqThreadRouter.  # noqa: E501

        The unique identifier  # noqa: E501

        :return: The id of this XiqThreadRouter.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this XiqThreadRouter.

        The unique identifier  # noqa: E501

        :param id: The id of this XiqThreadRouter.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def create_time(self):
        """Gets the create_time of this XiqThreadRouter.  # noqa: E501

        The create time  # noqa: E501

        :return: The create_time of this XiqThreadRouter.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this XiqThreadRouter.

        The create time  # noqa: E501

        :param create_time: The create_time of this XiqThreadRouter.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and create_time is None:  # noqa: E501
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this XiqThreadRouter.  # noqa: E501

        The last update time  # noqa: E501

        :return: The update_time of this XiqThreadRouter.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this XiqThreadRouter.

        The last update time  # noqa: E501

        :param update_time: The update_time of this XiqThreadRouter.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and update_time is None:  # noqa: E501
            raise ValueError("Invalid value for `update_time`, must not be `None`")  # noqa: E501

        self._update_time = update_time

    @property
    def org_id(self):
        """Gets the org_id of this XiqThreadRouter.  # noqa: E501

        The organization identifier, valid when enabling HIQ feature  # noqa: E501

        :return: The org_id of this XiqThreadRouter.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this XiqThreadRouter.

        The organization identifier, valid when enabling HIQ feature  # noqa: E501

        :param org_id: The org_id of this XiqThreadRouter.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def owner_id(self):
        """Gets the owner_id of this XiqThreadRouter.  # noqa: E501

        The owner id  # noqa: E501

        :return: The owner_id of this XiqThreadRouter.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this XiqThreadRouter.

        The owner id  # noqa: E501

        :param owner_id: The owner_id of this XiqThreadRouter.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def device_id(self):
        """Gets the device_id of this XiqThreadRouter.  # noqa: E501

        The device unique identifier  # noqa: E501

        :return: The device_id of this XiqThreadRouter.  # noqa: E501
        :rtype: int
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this XiqThreadRouter.

        The device unique identifier  # noqa: E501

        :param device_id: The device_id of this XiqThreadRouter.  # noqa: E501
        :type: int
        """

        self._device_id = device_id

    @property
    def serial_number(self):
        """Gets the serial_number of this XiqThreadRouter.  # noqa: E501

        The device serial number  # noqa: E501

        :return: The serial_number of this XiqThreadRouter.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this XiqThreadRouter.

        The device serial number  # noqa: E501

        :param serial_number: The serial_number of this XiqThreadRouter.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def eui64(self):
        """Gets the eui64 of this XiqThreadRouter.  # noqa: E501

        The Extended Unique Identifier  # noqa: E501

        :return: The eui64 of this XiqThreadRouter.  # noqa: E501
        :rtype: str
        """
        return self._eui64

    @eui64.setter
    def eui64(self, eui64):
        """Sets the eui64 of this XiqThreadRouter.

        The Extended Unique Identifier  # noqa: E501

        :param eui64: The eui64 of this XiqThreadRouter.  # noqa: E501
        :type: str
        """

        self._eui64 = eui64

    @property
    def ext_mac(self):
        """Gets the ext_mac of this XiqThreadRouter.  # noqa: E501

        The Extended Mac Address  # noqa: E501

        :return: The ext_mac of this XiqThreadRouter.  # noqa: E501
        :rtype: str
        """
        return self._ext_mac

    @ext_mac.setter
    def ext_mac(self, ext_mac):
        """Sets the ext_mac of this XiqThreadRouter.

        The Extended Mac Address  # noqa: E501

        :param ext_mac: The ext_mac of this XiqThreadRouter.  # noqa: E501
        :type: str
        """

        self._ext_mac = ext_mac

    @property
    def rloc16(self):
        """Gets the rloc16 of this XiqThreadRouter.  # noqa: E501

        The router RLOC16  # noqa: E501

        :return: The rloc16 of this XiqThreadRouter.  # noqa: E501
        :rtype: str
        """
        return self._rloc16

    @rloc16.setter
    def rloc16(self, rloc16):
        """Sets the rloc16 of this XiqThreadRouter.

        The router RLOC16  # noqa: E501

        :param rloc16: The rloc16 of this XiqThreadRouter.  # noqa: E501
        :type: str
        """

        self._rloc16 = rloc16

    @property
    def global_ipv6(self):
        """Gets the global_ipv6 of this XiqThreadRouter.  # noqa: E501

        The global IPv6 address  # noqa: E501

        :return: The global_ipv6 of this XiqThreadRouter.  # noqa: E501
        :rtype: str
        """
        return self._global_ipv6

    @global_ipv6.setter
    def global_ipv6(self, global_ipv6):
        """Sets the global_ipv6 of this XiqThreadRouter.

        The global IPv6 address  # noqa: E501

        :param global_ipv6: The global_ipv6 of this XiqThreadRouter.  # noqa: E501
        :type: str
        """

        self._global_ipv6 = global_ipv6

    @property
    def tx_power(self):
        """Gets the tx_power of this XiqThreadRouter.  # noqa: E501

        The transmit power  # noqa: E501

        :return: The tx_power of this XiqThreadRouter.  # noqa: E501
        :rtype: int
        """
        return self._tx_power

    @tx_power.setter
    def tx_power(self, tx_power):
        """Sets the tx_power of this XiqThreadRouter.

        The transmit power  # noqa: E501

        :param tx_power: The tx_power of this XiqThreadRouter.  # noqa: E501
        :type: int
        """

        self._tx_power = tx_power

    @property
    def region(self):
        """Gets the region of this XiqThreadRouter.  # noqa: E501

        The device region  # noqa: E501

        :return: The region of this XiqThreadRouter.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this XiqThreadRouter.

        The device region  # noqa: E501

        :param region: The region of this XiqThreadRouter.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def thread_platform(self):
        """Gets the thread_platform of this XiqThreadRouter.  # noqa: E501

        The thread platform  # noqa: E501

        :return: The thread_platform of this XiqThreadRouter.  # noqa: E501
        :rtype: str
        """
        return self._thread_platform

    @thread_platform.setter
    def thread_platform(self, thread_platform):
        """Sets the thread_platform of this XiqThreadRouter.

        The thread platform  # noqa: E501

        :param thread_platform: The thread_platform of this XiqThreadRouter.  # noqa: E501
        :type: str
        """

        self._thread_platform = thread_platform

    @property
    def device_role(self):
        """Gets the device_role of this XiqThreadRouter.  # noqa: E501

        The thread device role/state  # noqa: E501

        :return: The device_role of this XiqThreadRouter.  # noqa: E501
        :rtype: str
        """
        return self._device_role

    @device_role.setter
    def device_role(self, device_role):
        """Sets the device_role of this XiqThreadRouter.

        The thread device role/state  # noqa: E501

        :param device_role: The device_role of this XiqThreadRouter.  # noqa: E501
        :type: str
        """

        self._device_role = device_role

    @property
    def router_interface(self):
        """Gets the router_interface of this XiqThreadRouter.  # noqa: E501


        :return: The router_interface of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadNetworkInterface
        """
        return self._router_interface

    @router_interface.setter
    def router_interface(self, router_interface):
        """Sets the router_interface of this XiqThreadRouter.


        :param router_interface: The router_interface of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadNetworkInterface
        """

        self._router_interface = router_interface

    @property
    def veth0(self):
        """Gets the veth0 of this XiqThreadRouter.  # noqa: E501


        :return: The veth0 of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadNetworkInterface
        """
        return self._veth0

    @veth0.setter
    def veth0(self, veth0):
        """Sets the veth0 of this XiqThreadRouter.


        :param veth0: The veth0 of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadNetworkInterface
        """

        self._veth0 = veth0

    @property
    def network_data(self):
        """Gets the network_data of this XiqThreadRouter.  # noqa: E501


        :return: The network_data of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadNetworkData
        """
        return self._network_data

    @network_data.setter
    def network_data(self, network_data):
        """Sets the network_data of this XiqThreadRouter.


        :param network_data: The network_data of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadNetworkData
        """

        self._network_data = network_data

    @property
    def thread_mle_link_mode(self):
        """Gets the thread_mle_link_mode of this XiqThreadRouter.  # noqa: E501


        :return: The thread_mle_link_mode of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadMleLinkMode
        """
        return self._thread_mle_link_mode

    @thread_mle_link_mode.setter
    def thread_mle_link_mode(self, thread_mle_link_mode):
        """Sets the thread_mle_link_mode of this XiqThreadRouter.


        :param thread_mle_link_mode: The thread_mle_link_mode of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadMleLinkMode
        """

        self._thread_mle_link_mode = thread_mle_link_mode

    @property
    def thread_version(self):
        """Gets the thread_version of this XiqThreadRouter.  # noqa: E501


        :return: The thread_version of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadVersion
        """
        return self._thread_version

    @thread_version.setter
    def thread_version(self, thread_version):
        """Sets the thread_version of this XiqThreadRouter.


        :param thread_version: The thread_version of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadVersion
        """

        self._thread_version = thread_version

    @property
    def leader_service(self):
        """Gets the leader_service of this XiqThreadRouter.  # noqa: E501


        :return: The leader_service of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadLeaderService
        """
        return self._leader_service

    @leader_service.setter
    def leader_service(self, leader_service):
        """Sets the leader_service of this XiqThreadRouter.


        :param leader_service: The leader_service of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadLeaderService
        """

        self._leader_service = leader_service

    @property
    def border_router_service(self):
        """Gets the border_router_service of this XiqThreadRouter.  # noqa: E501


        :return: The border_router_service of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadBorderRouterService
        """
        return self._border_router_service

    @border_router_service.setter
    def border_router_service(self, border_router_service):
        """Sets the border_router_service of this XiqThreadRouter.


        :param border_router_service: The border_router_service of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadBorderRouterService
        """

        self._border_router_service = border_router_service

    @property
    def backbone_border_router_service(self):
        """Gets the backbone_border_router_service of this XiqThreadRouter.  # noqa: E501


        :return: The backbone_border_router_service of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadBackboneBorderRouterService
        """
        return self._backbone_border_router_service

    @backbone_border_router_service.setter
    def backbone_border_router_service(self, backbone_border_router_service):
        """Sets the backbone_border_router_service of this XiqThreadRouter.


        :param backbone_border_router_service: The backbone_border_router_service of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadBackboneBorderRouterService
        """

        self._backbone_border_router_service = backbone_border_router_service

    @property
    def border_agent_service(self):
        """Gets the border_agent_service of this XiqThreadRouter.  # noqa: E501


        :return: The border_agent_service of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadBorderAgentService
        """
        return self._border_agent_service

    @border_agent_service.setter
    def border_agent_service(self, border_agent_service):
        """Sets the border_agent_service of this XiqThreadRouter.


        :param border_agent_service: The border_agent_service of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadBorderAgentService
        """

        self._border_agent_service = border_agent_service

    @property
    def commissioner_service(self):
        """Gets the commissioner_service of this XiqThreadRouter.  # noqa: E501


        :return: The commissioner_service of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadCommissionerService
        """
        return self._commissioner_service

    @commissioner_service.setter
    def commissioner_service(self, commissioner_service):
        """Sets the commissioner_service of this XiqThreadRouter.


        :param commissioner_service: The commissioner_service of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadCommissionerService
        """

        self._commissioner_service = commissioner_service

    @property
    def nat64_service(self):
        """Gets the nat64_service of this XiqThreadRouter.  # noqa: E501


        :return: The nat64_service of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadNat64Service
        """
        return self._nat64_service

    @nat64_service.setter
    def nat64_service(self, nat64_service):
        """Sets the nat64_service of this XiqThreadRouter.


        :param nat64_service: The nat64_service of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadNat64Service
        """

        self._nat64_service = nat64_service

    @property
    def network_config(self):
        """Gets the network_config of this XiqThreadRouter.  # noqa: E501


        :return: The network_config of this XiqThreadRouter.  # noqa: E501
        :rtype: XiqThreadNetworkConfig
        """
        return self._network_config

    @network_config.setter
    def network_config(self, network_config):
        """Sets the network_config of this XiqThreadRouter.


        :param network_config: The network_config of this XiqThreadRouter.  # noqa: E501
        :type: XiqThreadNetworkConfig
        """

        self._network_config = network_config

    @property
    def active_clients(self):
        """Gets the active_clients of this XiqThreadRouter.  # noqa: E501

        The count of active connected clients  # noqa: E501

        :return: The active_clients of this XiqThreadRouter.  # noqa: E501
        :rtype: int
        """
        return self._active_clients

    @active_clients.setter
    def active_clients(self, active_clients):
        """Sets the active_clients of this XiqThreadRouter.

        The count of active connected clients  # noqa: E501

        :param active_clients: The active_clients of this XiqThreadRouter.  # noqa: E501
        :type: int
        """

        self._active_clients = active_clients

    @property
    def hostname(self):
        """Gets the hostname of this XiqThreadRouter.  # noqa: E501

        The device hostname  # noqa: E501

        :return: The hostname of this XiqThreadRouter.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this XiqThreadRouter.

        The device hostname  # noqa: E501

        :param hostname: The hostname of this XiqThreadRouter.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def last_reported(self):
        """Gets the last_reported of this XiqThreadRouter.  # noqa: E501

        The last reported datetime  # noqa: E501

        :return: The last_reported of this XiqThreadRouter.  # noqa: E501
        :rtype: datetime
        """
        return self._last_reported

    @last_reported.setter
    def last_reported(self, last_reported):
        """Sets the last_reported of this XiqThreadRouter.

        The last reported datetime  # noqa: E501

        :param last_reported: The last_reported of this XiqThreadRouter.  # noqa: E501
        :type: datetime
        """

        self._last_reported = last_reported

    @property
    def thread_connected(self):
        """Gets the thread_connected of this XiqThreadRouter.  # noqa: E501

        Is router connected to thread network  # noqa: E501

        :return: The thread_connected of this XiqThreadRouter.  # noqa: E501
        :rtype: bool
        """
        return self._thread_connected

    @thread_connected.setter
    def thread_connected(self, thread_connected):
        """Sets the thread_connected of this XiqThreadRouter.

        Is router connected to thread network  # noqa: E501

        :param thread_connected: The thread_connected of this XiqThreadRouter.  # noqa: E501
        :type: bool
        """

        self._thread_connected = thread_connected

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqThreadRouter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqThreadRouter):
            return True

        return self.to_dict() != other.to_dict()
