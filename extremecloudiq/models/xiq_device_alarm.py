# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 23.6.0.46
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqDeviceAlarm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entity_id': 'int',
        'timestamp': 'int',
        'severity': 'str',
        'category': 'str',
        'device_mac': 'str',
        'client_mac': 'str',
        'description': 'str'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'timestamp': 'timestamp',
        'severity': 'severity',
        'category': 'category',
        'device_mac': 'device_mac',
        'client_mac': 'client_mac',
        'description': 'description'
    }

    def __init__(self, entity_id=None, timestamp=None, severity=None, category=None, device_mac=None, client_mac=None, description=None, local_vars_configuration=None):  # noqa: E501
        """XiqDeviceAlarm - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._entity_id = None
        self._timestamp = None
        self._severity = None
        self._category = None
        self._device_mac = None
        self._client_mac = None
        self._description = None
        self.discriminator = None

        if entity_id is not None:
            self.entity_id = entity_id
        if timestamp is not None:
            self.timestamp = timestamp
        if severity is not None:
            self.severity = severity
        if category is not None:
            self.category = category
        if device_mac is not None:
            self.device_mac = device_mac
        if client_mac is not None:
            self.client_mac = client_mac
        if description is not None:
            self.description = description

    @property
    def entity_id(self):
        """Gets the entity_id of this XiqDeviceAlarm.  # noqa: E501

        The device ID  # noqa: E501

        :return: The entity_id of this XiqDeviceAlarm.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this XiqDeviceAlarm.

        The device ID  # noqa: E501

        :param entity_id: The entity_id of this XiqDeviceAlarm.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def timestamp(self):
        """Gets the timestamp of this XiqDeviceAlarm.  # noqa: E501

        The timestamp for alarm created  # noqa: E501

        :return: The timestamp of this XiqDeviceAlarm.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this XiqDeviceAlarm.

        The timestamp for alarm created  # noqa: E501

        :param timestamp: The timestamp of this XiqDeviceAlarm.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def severity(self):
        """Gets the severity of this XiqDeviceAlarm.  # noqa: E501

        The severity of the alarm  # noqa: E501

        :return: The severity of this XiqDeviceAlarm.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this XiqDeviceAlarm.

        The severity of the alarm  # noqa: E501

        :param severity: The severity of this XiqDeviceAlarm.  # noqa: E501
        :type: str
        """

        self._severity = severity

    @property
    def category(self):
        """Gets the category of this XiqDeviceAlarm.  # noqa: E501

        The category of the alarm  # noqa: E501

        :return: The category of this XiqDeviceAlarm.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this XiqDeviceAlarm.

        The category of the alarm  # noqa: E501

        :param category: The category of this XiqDeviceAlarm.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def device_mac(self):
        """Gets the device_mac of this XiqDeviceAlarm.  # noqa: E501

        The device MAC of the alarm  # noqa: E501

        :return: The device_mac of this XiqDeviceAlarm.  # noqa: E501
        :rtype: str
        """
        return self._device_mac

    @device_mac.setter
    def device_mac(self, device_mac):
        """Sets the device_mac of this XiqDeviceAlarm.

        The device MAC of the alarm  # noqa: E501

        :param device_mac: The device_mac of this XiqDeviceAlarm.  # noqa: E501
        :type: str
        """

        self._device_mac = device_mac

    @property
    def client_mac(self):
        """Gets the client_mac of this XiqDeviceAlarm.  # noqa: E501

        The client MAC of the alarm  # noqa: E501

        :return: The client_mac of this XiqDeviceAlarm.  # noqa: E501
        :rtype: str
        """
        return self._client_mac

    @client_mac.setter
    def client_mac(self, client_mac):
        """Sets the client_mac of this XiqDeviceAlarm.

        The client MAC of the alarm  # noqa: E501

        :param client_mac: The client_mac of this XiqDeviceAlarm.  # noqa: E501
        :type: str
        """

        self._client_mac = client_mac

    @property
    def description(self):
        """Gets the description of this XiqDeviceAlarm.  # noqa: E501

        The alarm description  # noqa: E501

        :return: The description of this XiqDeviceAlarm.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this XiqDeviceAlarm.

        The alarm description  # noqa: E501

        :param description: The description of this XiqDeviceAlarm.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqDeviceAlarm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqDeviceAlarm):
            return True

        return self.to_dict() != other.to_dict()
