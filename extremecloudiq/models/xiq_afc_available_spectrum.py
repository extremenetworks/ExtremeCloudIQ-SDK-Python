# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.6.0.74
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqAfcAvailableSpectrum(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'request_id': 'str',
        'available_channel_info': 'list[XiqAvailableChannelInfo]',
        'availability_expire_time': 'str'
    }

    attribute_map = {
        'request_id': 'request_id',
        'available_channel_info': 'available_channel_info',
        'availability_expire_time': 'availability_expire_time'
    }

    def __init__(self, request_id=None, available_channel_info=None, availability_expire_time=None, local_vars_configuration=None):  # noqa: E501
        """XiqAfcAvailableSpectrum - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._request_id = None
        self._available_channel_info = None
        self._availability_expire_time = None
        self.discriminator = None

        if request_id is not None:
            self.request_id = request_id
        if available_channel_info is not None:
            self.available_channel_info = available_channel_info
        if availability_expire_time is not None:
            self.availability_expire_time = availability_expire_time

    @property
    def request_id(self):
        """Gets the request_id of this XiqAfcAvailableSpectrum.  # noqa: E501


        :return: The request_id of this XiqAfcAvailableSpectrum.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this XiqAfcAvailableSpectrum.


        :param request_id: The request_id of this XiqAfcAvailableSpectrum.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def available_channel_info(self):
        """Gets the available_channel_info of this XiqAfcAvailableSpectrum.  # noqa: E501


        :return: The available_channel_info of this XiqAfcAvailableSpectrum.  # noqa: E501
        :rtype: list[XiqAvailableChannelInfo]
        """
        return self._available_channel_info

    @available_channel_info.setter
    def available_channel_info(self, available_channel_info):
        """Sets the available_channel_info of this XiqAfcAvailableSpectrum.


        :param available_channel_info: The available_channel_info of this XiqAfcAvailableSpectrum.  # noqa: E501
        :type: list[XiqAvailableChannelInfo]
        """

        self._available_channel_info = available_channel_info

    @property
    def availability_expire_time(self):
        """Gets the availability_expire_time of this XiqAfcAvailableSpectrum.  # noqa: E501


        :return: The availability_expire_time of this XiqAfcAvailableSpectrum.  # noqa: E501
        :rtype: str
        """
        return self._availability_expire_time

    @availability_expire_time.setter
    def availability_expire_time(self, availability_expire_time):
        """Sets the availability_expire_time of this XiqAfcAvailableSpectrum.


        :param availability_expire_time: The availability_expire_time of this XiqAfcAvailableSpectrum.  # noqa: E501
        :type: str
        """

        self._availability_expire_time = availability_expire_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqAfcAvailableSpectrum):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqAfcAvailableSpectrum):
            return True

        return self.to_dict() != other.to_dict()
