# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqThreadLeaderService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'partition_id': 'int',
        'weighting': 'int',
        'full_network_data_version': 'int',
        'stable_network_data_version': 'int'
    }

    attribute_map = {
        'partition_id': 'partition_id',
        'weighting': 'weighting',
        'full_network_data_version': 'full_network_data_version',
        'stable_network_data_version': 'stable_network_data_version'
    }

    def __init__(self, partition_id=None, weighting=None, full_network_data_version=None, stable_network_data_version=None, local_vars_configuration=None):  # noqa: E501
        """XiqThreadLeaderService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._partition_id = None
        self._weighting = None
        self._full_network_data_version = None
        self._stable_network_data_version = None
        self.discriminator = None

        if partition_id is not None:
            self.partition_id = partition_id
        if weighting is not None:
            self.weighting = weighting
        if full_network_data_version is not None:
            self.full_network_data_version = full_network_data_version
        if stable_network_data_version is not None:
            self.stable_network_data_version = stable_network_data_version

    @property
    def partition_id(self):
        """Gets the partition_id of this XiqThreadLeaderService.  # noqa: E501


        :return: The partition_id of this XiqThreadLeaderService.  # noqa: E501
        :rtype: int
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """Sets the partition_id of this XiqThreadLeaderService.


        :param partition_id: The partition_id of this XiqThreadLeaderService.  # noqa: E501
        :type: int
        """

        self._partition_id = partition_id

    @property
    def weighting(self):
        """Gets the weighting of this XiqThreadLeaderService.  # noqa: E501


        :return: The weighting of this XiqThreadLeaderService.  # noqa: E501
        :rtype: int
        """
        return self._weighting

    @weighting.setter
    def weighting(self, weighting):
        """Sets the weighting of this XiqThreadLeaderService.


        :param weighting: The weighting of this XiqThreadLeaderService.  # noqa: E501
        :type: int
        """

        self._weighting = weighting

    @property
    def full_network_data_version(self):
        """Gets the full_network_data_version of this XiqThreadLeaderService.  # noqa: E501


        :return: The full_network_data_version of this XiqThreadLeaderService.  # noqa: E501
        :rtype: int
        """
        return self._full_network_data_version

    @full_network_data_version.setter
    def full_network_data_version(self, full_network_data_version):
        """Sets the full_network_data_version of this XiqThreadLeaderService.


        :param full_network_data_version: The full_network_data_version of this XiqThreadLeaderService.  # noqa: E501
        :type: int
        """

        self._full_network_data_version = full_network_data_version

    @property
    def stable_network_data_version(self):
        """Gets the stable_network_data_version of this XiqThreadLeaderService.  # noqa: E501


        :return: The stable_network_data_version of this XiqThreadLeaderService.  # noqa: E501
        :rtype: int
        """
        return self._stable_network_data_version

    @stable_network_data_version.setter
    def stable_network_data_version(self, stable_network_data_version):
        """Sets the stable_network_data_version of this XiqThreadLeaderService.


        :param stable_network_data_version: The stable_network_data_version of this XiqThreadLeaderService.  # noqa: E501
        :type: int
        """

        self._stable_network_data_version = stable_network_data_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqThreadLeaderService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqThreadLeaderService):
            return True

        return self.to_dict() != other.to_dict()
