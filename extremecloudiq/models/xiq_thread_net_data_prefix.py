# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqThreadNetDataPrefix(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'prefix': 'str',
        'route_preference': 'str',
        'added_by_rloc16': 'str',
        'added_by_ext_mac': 'str',
        'preferred': 'bool',
        'slaac': 'bool',
        'dhcp': 'bool',
        'configure': 'bool',
        'default_route': 'bool',
        'on_mesh': 'str',
        'stable': 'bool',
        'nd_dns': 'bool',
        'dp': 'bool'
    }

    attribute_map = {
        'prefix': 'prefix',
        'route_preference': 'route_preference',
        'added_by_rloc16': 'added_by_rloc16',
        'added_by_ext_mac': 'added_by_ext_mac',
        'preferred': 'preferred',
        'slaac': 'slaac',
        'dhcp': 'dhcp',
        'configure': 'configure',
        'default_route': 'default_route',
        'on_mesh': 'on_mesh',
        'stable': 'stable',
        'nd_dns': 'nd_dns',
        'dp': 'dp'
    }

    def __init__(self, prefix=None, route_preference=None, added_by_rloc16=None, added_by_ext_mac=None, preferred=None, slaac=None, dhcp=None, configure=None, default_route=None, on_mesh=None, stable=None, nd_dns=None, dp=None, local_vars_configuration=None):  # noqa: E501
        """XiqThreadNetDataPrefix - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._prefix = None
        self._route_preference = None
        self._added_by_rloc16 = None
        self._added_by_ext_mac = None
        self._preferred = None
        self._slaac = None
        self._dhcp = None
        self._configure = None
        self._default_route = None
        self._on_mesh = None
        self._stable = None
        self._nd_dns = None
        self._dp = None
        self.discriminator = None

        if prefix is not None:
            self.prefix = prefix
        if route_preference is not None:
            self.route_preference = route_preference
        if added_by_rloc16 is not None:
            self.added_by_rloc16 = added_by_rloc16
        if added_by_ext_mac is not None:
            self.added_by_ext_mac = added_by_ext_mac
        if preferred is not None:
            self.preferred = preferred
        if slaac is not None:
            self.slaac = slaac
        if dhcp is not None:
            self.dhcp = dhcp
        if configure is not None:
            self.configure = configure
        if default_route is not None:
            self.default_route = default_route
        if on_mesh is not None:
            self.on_mesh = on_mesh
        if stable is not None:
            self.stable = stable
        if nd_dns is not None:
            self.nd_dns = nd_dns
        if dp is not None:
            self.dp = dp

    @property
    def prefix(self):
        """Gets the prefix of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The prefix of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this XiqThreadNetDataPrefix.


        :param prefix: The prefix of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def route_preference(self):
        """Gets the route_preference of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The route_preference of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: str
        """
        return self._route_preference

    @route_preference.setter
    def route_preference(self, route_preference):
        """Sets the route_preference of this XiqThreadNetDataPrefix.


        :param route_preference: The route_preference of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: str
        """

        self._route_preference = route_preference

    @property
    def added_by_rloc16(self):
        """Gets the added_by_rloc16 of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The added_by_rloc16 of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: str
        """
        return self._added_by_rloc16

    @added_by_rloc16.setter
    def added_by_rloc16(self, added_by_rloc16):
        """Sets the added_by_rloc16 of this XiqThreadNetDataPrefix.


        :param added_by_rloc16: The added_by_rloc16 of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: str
        """

        self._added_by_rloc16 = added_by_rloc16

    @property
    def added_by_ext_mac(self):
        """Gets the added_by_ext_mac of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The added_by_ext_mac of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: str
        """
        return self._added_by_ext_mac

    @added_by_ext_mac.setter
    def added_by_ext_mac(self, added_by_ext_mac):
        """Sets the added_by_ext_mac of this XiqThreadNetDataPrefix.


        :param added_by_ext_mac: The added_by_ext_mac of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: str
        """

        self._added_by_ext_mac = added_by_ext_mac

    @property
    def preferred(self):
        """Gets the preferred of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The preferred of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this XiqThreadNetDataPrefix.


        :param preferred: The preferred of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: bool
        """

        self._preferred = preferred

    @property
    def slaac(self):
        """Gets the slaac of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The slaac of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: bool
        """
        return self._slaac

    @slaac.setter
    def slaac(self, slaac):
        """Sets the slaac of this XiqThreadNetDataPrefix.


        :param slaac: The slaac of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: bool
        """

        self._slaac = slaac

    @property
    def dhcp(self):
        """Gets the dhcp of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The dhcp of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: bool
        """
        return self._dhcp

    @dhcp.setter
    def dhcp(self, dhcp):
        """Sets the dhcp of this XiqThreadNetDataPrefix.


        :param dhcp: The dhcp of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: bool
        """

        self._dhcp = dhcp

    @property
    def configure(self):
        """Gets the configure of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The configure of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: bool
        """
        return self._configure

    @configure.setter
    def configure(self, configure):
        """Sets the configure of this XiqThreadNetDataPrefix.


        :param configure: The configure of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: bool
        """

        self._configure = configure

    @property
    def default_route(self):
        """Gets the default_route of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The default_route of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: bool
        """
        return self._default_route

    @default_route.setter
    def default_route(self, default_route):
        """Sets the default_route of this XiqThreadNetDataPrefix.


        :param default_route: The default_route of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: bool
        """

        self._default_route = default_route

    @property
    def on_mesh(self):
        """Gets the on_mesh of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The on_mesh of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: str
        """
        return self._on_mesh

    @on_mesh.setter
    def on_mesh(self, on_mesh):
        """Sets the on_mesh of this XiqThreadNetDataPrefix.


        :param on_mesh: The on_mesh of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: str
        """

        self._on_mesh = on_mesh

    @property
    def stable(self):
        """Gets the stable of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The stable of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: bool
        """
        return self._stable

    @stable.setter
    def stable(self, stable):
        """Sets the stable of this XiqThreadNetDataPrefix.


        :param stable: The stable of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: bool
        """

        self._stable = stable

    @property
    def nd_dns(self):
        """Gets the nd_dns of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The nd_dns of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: bool
        """
        return self._nd_dns

    @nd_dns.setter
    def nd_dns(self, nd_dns):
        """Sets the nd_dns of this XiqThreadNetDataPrefix.


        :param nd_dns: The nd_dns of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: bool
        """

        self._nd_dns = nd_dns

    @property
    def dp(self):
        """Gets the dp of this XiqThreadNetDataPrefix.  # noqa: E501


        :return: The dp of this XiqThreadNetDataPrefix.  # noqa: E501
        :rtype: bool
        """
        return self._dp

    @dp.setter
    def dp(self, dp):
        """Sets the dp of this XiqThreadNetDataPrefix.


        :param dp: The dp of this XiqThreadNetDataPrefix.  # noqa: E501
        :type: bool
        """

        self._dp = dp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqThreadNetDataPrefix):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqThreadNetDataPrefix):
            return True

        return self.to_dict() != other.to_dict()
