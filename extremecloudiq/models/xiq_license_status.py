# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.1.0.65
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqLicenseStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'license_health_color': 'XiqLicenseHealthColor',
        'license_health_state': 'XiqLicenseHealthState',
        'param1': 'str',
        'param2': 'str',
        'description': 'str'
    }

    attribute_map = {
        'license_health_color': 'license_health_color',
        'license_health_state': 'license_health_state',
        'param1': 'param1',
        'param2': 'param2',
        'description': 'description'
    }

    def __init__(self, license_health_color=None, license_health_state=None, param1=None, param2=None, description=None, local_vars_configuration=None):  # noqa: E501
        """XiqLicenseStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._license_health_color = None
        self._license_health_state = None
        self._param1 = None
        self._param2 = None
        self._description = None
        self.discriminator = None

        if license_health_color is not None:
            self.license_health_color = license_health_color
        if license_health_state is not None:
            self.license_health_state = license_health_state
        if param1 is not None:
            self.param1 = param1
        if param2 is not None:
            self.param2 = param2
        if description is not None:
            self.description = description

    @property
    def license_health_color(self):
        """Gets the license_health_color of this XiqLicenseStatus.  # noqa: E501


        :return: The license_health_color of this XiqLicenseStatus.  # noqa: E501
        :rtype: XiqLicenseHealthColor
        """
        return self._license_health_color

    @license_health_color.setter
    def license_health_color(self, license_health_color):
        """Sets the license_health_color of this XiqLicenseStatus.


        :param license_health_color: The license_health_color of this XiqLicenseStatus.  # noqa: E501
        :type: XiqLicenseHealthColor
        """

        self._license_health_color = license_health_color

    @property
    def license_health_state(self):
        """Gets the license_health_state of this XiqLicenseStatus.  # noqa: E501


        :return: The license_health_state of this XiqLicenseStatus.  # noqa: E501
        :rtype: XiqLicenseHealthState
        """
        return self._license_health_state

    @license_health_state.setter
    def license_health_state(self, license_health_state):
        """Sets the license_health_state of this XiqLicenseStatus.


        :param license_health_state: The license_health_state of this XiqLicenseStatus.  # noqa: E501
        :type: XiqLicenseHealthState
        """

        self._license_health_state = license_health_state

    @property
    def param1(self):
        """Gets the param1 of this XiqLicenseStatus.  # noqa: E501

        License health state parameter 1  # noqa: E501

        :return: The param1 of this XiqLicenseStatus.  # noqa: E501
        :rtype: str
        """
        return self._param1

    @param1.setter
    def param1(self, param1):
        """Sets the param1 of this XiqLicenseStatus.

        License health state parameter 1  # noqa: E501

        :param param1: The param1 of this XiqLicenseStatus.  # noqa: E501
        :type: str
        """

        self._param1 = param1

    @property
    def param2(self):
        """Gets the param2 of this XiqLicenseStatus.  # noqa: E501

        License health state parameter 2  # noqa: E501

        :return: The param2 of this XiqLicenseStatus.  # noqa: E501
        :rtype: str
        """
        return self._param2

    @param2.setter
    def param2(self, param2):
        """Sets the param2 of this XiqLicenseStatus.

        License health state parameter 2  # noqa: E501

        :param param2: The param2 of this XiqLicenseStatus.  # noqa: E501
        :type: str
        """

        self._param2 = param2

    @property
    def description(self):
        """Gets the description of this XiqLicenseStatus.  # noqa: E501

        License status description  # noqa: E501

        :return: The description of this XiqLicenseStatus.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this XiqLicenseStatus.

        License status description  # noqa: E501

        :param description: The description of this XiqLicenseStatus.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqLicenseStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqLicenseStatus):
            return True

        return self.to_dict() != other.to_dict()
