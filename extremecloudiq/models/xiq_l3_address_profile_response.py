# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqL3AddressProfileResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ip_address_profile': 'XiqIpAddressProfile',
        'wildcard_address_profile': 'XiqWildcardAddressProfile',
        'wildcard_host_name_address_profile': 'XiqWildcardHostNameAddressProfile',
        'subnet_address_profile': 'XiqSubnetAddressProfile',
        'ip_range_address_profile': 'XiqIpRangeAddressProfile',
        'host_name_address_profile': 'XiqHostNameAddressProfile'
    }

    attribute_map = {
        'ip_address_profile': 'ip_address_profile',
        'wildcard_address_profile': 'wildcard_address_profile',
        'wildcard_host_name_address_profile': 'wildcard_host_name_address_profile',
        'subnet_address_profile': 'subnet_address_profile',
        'ip_range_address_profile': 'ip_range_address_profile',
        'host_name_address_profile': 'host_name_address_profile'
    }

    def __init__(self, ip_address_profile=None, wildcard_address_profile=None, wildcard_host_name_address_profile=None, subnet_address_profile=None, ip_range_address_profile=None, host_name_address_profile=None, local_vars_configuration=None):  # noqa: E501
        """XiqL3AddressProfileResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ip_address_profile = None
        self._wildcard_address_profile = None
        self._wildcard_host_name_address_profile = None
        self._subnet_address_profile = None
        self._ip_range_address_profile = None
        self._host_name_address_profile = None
        self.discriminator = None

        if ip_address_profile is not None:
            self.ip_address_profile = ip_address_profile
        if wildcard_address_profile is not None:
            self.wildcard_address_profile = wildcard_address_profile
        if wildcard_host_name_address_profile is not None:
            self.wildcard_host_name_address_profile = wildcard_host_name_address_profile
        if subnet_address_profile is not None:
            self.subnet_address_profile = subnet_address_profile
        if ip_range_address_profile is not None:
            self.ip_range_address_profile = ip_range_address_profile
        if host_name_address_profile is not None:
            self.host_name_address_profile = host_name_address_profile

    @property
    def ip_address_profile(self):
        """Gets the ip_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501


        :return: The ip_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :rtype: XiqIpAddressProfile
        """
        return self._ip_address_profile

    @ip_address_profile.setter
    def ip_address_profile(self, ip_address_profile):
        """Sets the ip_address_profile of this XiqL3AddressProfileResponse.


        :param ip_address_profile: The ip_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :type: XiqIpAddressProfile
        """

        self._ip_address_profile = ip_address_profile

    @property
    def wildcard_address_profile(self):
        """Gets the wildcard_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501


        :return: The wildcard_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :rtype: XiqWildcardAddressProfile
        """
        return self._wildcard_address_profile

    @wildcard_address_profile.setter
    def wildcard_address_profile(self, wildcard_address_profile):
        """Sets the wildcard_address_profile of this XiqL3AddressProfileResponse.


        :param wildcard_address_profile: The wildcard_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :type: XiqWildcardAddressProfile
        """

        self._wildcard_address_profile = wildcard_address_profile

    @property
    def wildcard_host_name_address_profile(self):
        """Gets the wildcard_host_name_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501


        :return: The wildcard_host_name_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :rtype: XiqWildcardHostNameAddressProfile
        """
        return self._wildcard_host_name_address_profile

    @wildcard_host_name_address_profile.setter
    def wildcard_host_name_address_profile(self, wildcard_host_name_address_profile):
        """Sets the wildcard_host_name_address_profile of this XiqL3AddressProfileResponse.


        :param wildcard_host_name_address_profile: The wildcard_host_name_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :type: XiqWildcardHostNameAddressProfile
        """

        self._wildcard_host_name_address_profile = wildcard_host_name_address_profile

    @property
    def subnet_address_profile(self):
        """Gets the subnet_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501


        :return: The subnet_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :rtype: XiqSubnetAddressProfile
        """
        return self._subnet_address_profile

    @subnet_address_profile.setter
    def subnet_address_profile(self, subnet_address_profile):
        """Sets the subnet_address_profile of this XiqL3AddressProfileResponse.


        :param subnet_address_profile: The subnet_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :type: XiqSubnetAddressProfile
        """

        self._subnet_address_profile = subnet_address_profile

    @property
    def ip_range_address_profile(self):
        """Gets the ip_range_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501


        :return: The ip_range_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :rtype: XiqIpRangeAddressProfile
        """
        return self._ip_range_address_profile

    @ip_range_address_profile.setter
    def ip_range_address_profile(self, ip_range_address_profile):
        """Sets the ip_range_address_profile of this XiqL3AddressProfileResponse.


        :param ip_range_address_profile: The ip_range_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :type: XiqIpRangeAddressProfile
        """

        self._ip_range_address_profile = ip_range_address_profile

    @property
    def host_name_address_profile(self):
        """Gets the host_name_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501


        :return: The host_name_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :rtype: XiqHostNameAddressProfile
        """
        return self._host_name_address_profile

    @host_name_address_profile.setter
    def host_name_address_profile(self, host_name_address_profile):
        """Sets the host_name_address_profile of this XiqL3AddressProfileResponse.


        :param host_name_address_profile: The host_name_address_profile of this XiqL3AddressProfileResponse.  # noqa: E501
        :type: XiqHostNameAddressProfile
        """

        self._host_name_address_profile = host_name_address_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqL3AddressProfileResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqL3AddressProfileResponse):
            return True

        return self.to_dict() != other.to_dict()
