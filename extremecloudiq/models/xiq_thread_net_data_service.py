# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.3.1.2
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqThreadNetDataService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enterprise_number': 'int',
        'service_data': 'str',
        'server_data': 'str',
        'stable': 'bool',
        'added_by_rloc16': 'str',
        'added_by_ext_mac': 'str'
    }

    attribute_map = {
        'enterprise_number': 'enterprise_number',
        'service_data': 'service_data',
        'server_data': 'server_data',
        'stable': 'stable',
        'added_by_rloc16': 'added_by_rloc16',
        'added_by_ext_mac': 'added_by_ext_mac'
    }

    def __init__(self, enterprise_number=None, service_data=None, server_data=None, stable=None, added_by_rloc16=None, added_by_ext_mac=None, local_vars_configuration=None):  # noqa: E501
        """XiqThreadNetDataService - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enterprise_number = None
        self._service_data = None
        self._server_data = None
        self._stable = None
        self._added_by_rloc16 = None
        self._added_by_ext_mac = None
        self.discriminator = None

        if enterprise_number is not None:
            self.enterprise_number = enterprise_number
        if service_data is not None:
            self.service_data = service_data
        if server_data is not None:
            self.server_data = server_data
        if stable is not None:
            self.stable = stable
        if added_by_rloc16 is not None:
            self.added_by_rloc16 = added_by_rloc16
        if added_by_ext_mac is not None:
            self.added_by_ext_mac = added_by_ext_mac

    @property
    def enterprise_number(self):
        """Gets the enterprise_number of this XiqThreadNetDataService.  # noqa: E501


        :return: The enterprise_number of this XiqThreadNetDataService.  # noqa: E501
        :rtype: int
        """
        return self._enterprise_number

    @enterprise_number.setter
    def enterprise_number(self, enterprise_number):
        """Sets the enterprise_number of this XiqThreadNetDataService.


        :param enterprise_number: The enterprise_number of this XiqThreadNetDataService.  # noqa: E501
        :type: int
        """

        self._enterprise_number = enterprise_number

    @property
    def service_data(self):
        """Gets the service_data of this XiqThreadNetDataService.  # noqa: E501


        :return: The service_data of this XiqThreadNetDataService.  # noqa: E501
        :rtype: str
        """
        return self._service_data

    @service_data.setter
    def service_data(self, service_data):
        """Sets the service_data of this XiqThreadNetDataService.


        :param service_data: The service_data of this XiqThreadNetDataService.  # noqa: E501
        :type: str
        """

        self._service_data = service_data

    @property
    def server_data(self):
        """Gets the server_data of this XiqThreadNetDataService.  # noqa: E501


        :return: The server_data of this XiqThreadNetDataService.  # noqa: E501
        :rtype: str
        """
        return self._server_data

    @server_data.setter
    def server_data(self, server_data):
        """Sets the server_data of this XiqThreadNetDataService.


        :param server_data: The server_data of this XiqThreadNetDataService.  # noqa: E501
        :type: str
        """

        self._server_data = server_data

    @property
    def stable(self):
        """Gets the stable of this XiqThreadNetDataService.  # noqa: E501


        :return: The stable of this XiqThreadNetDataService.  # noqa: E501
        :rtype: bool
        """
        return self._stable

    @stable.setter
    def stable(self, stable):
        """Sets the stable of this XiqThreadNetDataService.


        :param stable: The stable of this XiqThreadNetDataService.  # noqa: E501
        :type: bool
        """

        self._stable = stable

    @property
    def added_by_rloc16(self):
        """Gets the added_by_rloc16 of this XiqThreadNetDataService.  # noqa: E501


        :return: The added_by_rloc16 of this XiqThreadNetDataService.  # noqa: E501
        :rtype: str
        """
        return self._added_by_rloc16

    @added_by_rloc16.setter
    def added_by_rloc16(self, added_by_rloc16):
        """Sets the added_by_rloc16 of this XiqThreadNetDataService.


        :param added_by_rloc16: The added_by_rloc16 of this XiqThreadNetDataService.  # noqa: E501
        :type: str
        """

        self._added_by_rloc16 = added_by_rloc16

    @property
    def added_by_ext_mac(self):
        """Gets the added_by_ext_mac of this XiqThreadNetDataService.  # noqa: E501


        :return: The added_by_ext_mac of this XiqThreadNetDataService.  # noqa: E501
        :rtype: str
        """
        return self._added_by_ext_mac

    @added_by_ext_mac.setter
    def added_by_ext_mac(self, added_by_ext_mac):
        """Sets the added_by_ext_mac of this XiqThreadNetDataService.


        :param added_by_ext_mac: The added_by_ext_mac of this XiqThreadNetDataService.  # noqa: E501
        :type: str
        """

        self._added_by_ext_mac = added_by_ext_mac

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqThreadNetDataService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqThreadNetDataService):
            return True

        return self.to_dict() != other.to_dict()
