# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.3.1.2
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqAddressProfileClassifiedEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'class_asgn_id': 'int',
        'value': 'str',
        'description': 'str',
        'netmask': 'str',
        'ip_address_end': 'str',
        'wildcard_mask': 'str'
    }

    attribute_map = {
        'class_asgn_id': 'class_asgn_id',
        'value': 'value',
        'description': 'description',
        'netmask': 'netmask',
        'ip_address_end': 'ip_address_end',
        'wildcard_mask': 'wildcard_mask'
    }

    def __init__(self, class_asgn_id=None, value=None, description=None, netmask=None, ip_address_end=None, wildcard_mask=None, local_vars_configuration=None):  # noqa: E501
        """XiqAddressProfileClassifiedEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._class_asgn_id = None
        self._value = None
        self._description = None
        self._netmask = None
        self._ip_address_end = None
        self._wildcard_mask = None
        self.discriminator = None

        if class_asgn_id is not None:
            self.class_asgn_id = class_asgn_id
        if value is not None:
            self.value = value
        if description is not None:
            self.description = description
        if netmask is not None:
            self.netmask = netmask
        if ip_address_end is not None:
            self.ip_address_end = ip_address_end
        if wildcard_mask is not None:
            self.wildcard_mask = wildcard_mask

    @property
    def class_asgn_id(self):
        """Gets the class_asgn_id of this XiqAddressProfileClassifiedEntry.  # noqa: E501

        The classification assignment id value.  # noqa: E501

        :return: The class_asgn_id of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :rtype: int
        """
        return self._class_asgn_id

    @class_asgn_id.setter
    def class_asgn_id(self, class_asgn_id):
        """Sets the class_asgn_id of this XiqAddressProfileClassifiedEntry.

        The classification assignment id value.  # noqa: E501

        :param class_asgn_id: The class_asgn_id of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :type: int
        """

        self._class_asgn_id = class_asgn_id

    @property
    def value(self):
        """Gets the value of this XiqAddressProfileClassifiedEntry.  # noqa: E501

        The classified entry value.  # noqa: E501

        :return: The value of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this XiqAddressProfileClassifiedEntry.

        The classified entry value.  # noqa: E501

        :param value: The value of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def description(self):
        """Gets the description of this XiqAddressProfileClassifiedEntry.  # noqa: E501

        The classified entry description.  # noqa: E501

        :return: The description of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this XiqAddressProfileClassifiedEntry.

        The classified entry description.  # noqa: E501

        :param description: The description of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def netmask(self):
        """Gets the netmask of this XiqAddressProfileClassifiedEntry.  # noqa: E501

        The classified entry netmask  # noqa: E501

        :return: The netmask of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :rtype: str
        """
        return self._netmask

    @netmask.setter
    def netmask(self, netmask):
        """Sets the netmask of this XiqAddressProfileClassifiedEntry.

        The classified entry netmask  # noqa: E501

        :param netmask: The netmask of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :type: str
        """

        self._netmask = netmask

    @property
    def ip_address_end(self):
        """Gets the ip_address_end of this XiqAddressProfileClassifiedEntry.  # noqa: E501

        The classified entry IP address end.  # noqa: E501

        :return: The ip_address_end of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :rtype: str
        """
        return self._ip_address_end

    @ip_address_end.setter
    def ip_address_end(self, ip_address_end):
        """Sets the ip_address_end of this XiqAddressProfileClassifiedEntry.

        The classified entry IP address end.  # noqa: E501

        :param ip_address_end: The ip_address_end of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :type: str
        """

        self._ip_address_end = ip_address_end

    @property
    def wildcard_mask(self):
        """Gets the wildcard_mask of this XiqAddressProfileClassifiedEntry.  # noqa: E501

        The classified entry wildcard mask.  # noqa: E501

        :return: The wildcard_mask of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :rtype: str
        """
        return self._wildcard_mask

    @wildcard_mask.setter
    def wildcard_mask(self, wildcard_mask):
        """Sets the wildcard_mask of this XiqAddressProfileClassifiedEntry.

        The classified entry wildcard mask.  # noqa: E501

        :param wildcard_mask: The wildcard_mask of this XiqAddressProfileClassifiedEntry.  # noqa: E501
        :type: str
        """

        self._wildcard_mask = wildcard_mask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqAddressProfileClassifiedEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqAddressProfileClassifiedEntry):
            return True

        return self.to_dict() != other.to_dict()
