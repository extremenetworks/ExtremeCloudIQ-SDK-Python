# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.4.0.61
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqThreadNat64Service(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'prefix_manager_state': 'str',
        'translator_state': 'str',
        'translator_cidr': 'str'
    }

    attribute_map = {
        'prefix_manager_state': 'prefix_manager_state',
        'translator_state': 'translator_state',
        'translator_cidr': 'translator_cidr'
    }

    def __init__(self, prefix_manager_state=None, translator_state=None, translator_cidr=None, local_vars_configuration=None):  # noqa: E501
        """XiqThreadNat64Service - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._prefix_manager_state = None
        self._translator_state = None
        self._translator_cidr = None
        self.discriminator = None

        if prefix_manager_state is not None:
            self.prefix_manager_state = prefix_manager_state
        if translator_state is not None:
            self.translator_state = translator_state
        if translator_cidr is not None:
            self.translator_cidr = translator_cidr

    @property
    def prefix_manager_state(self):
        """Gets the prefix_manager_state of this XiqThreadNat64Service.  # noqa: E501


        :return: The prefix_manager_state of this XiqThreadNat64Service.  # noqa: E501
        :rtype: str
        """
        return self._prefix_manager_state

    @prefix_manager_state.setter
    def prefix_manager_state(self, prefix_manager_state):
        """Sets the prefix_manager_state of this XiqThreadNat64Service.


        :param prefix_manager_state: The prefix_manager_state of this XiqThreadNat64Service.  # noqa: E501
        :type: str
        """

        self._prefix_manager_state = prefix_manager_state

    @property
    def translator_state(self):
        """Gets the translator_state of this XiqThreadNat64Service.  # noqa: E501


        :return: The translator_state of this XiqThreadNat64Service.  # noqa: E501
        :rtype: str
        """
        return self._translator_state

    @translator_state.setter
    def translator_state(self, translator_state):
        """Sets the translator_state of this XiqThreadNat64Service.


        :param translator_state: The translator_state of this XiqThreadNat64Service.  # noqa: E501
        :type: str
        """

        self._translator_state = translator_state

    @property
    def translator_cidr(self):
        """Gets the translator_cidr of this XiqThreadNat64Service.  # noqa: E501


        :return: The translator_cidr of this XiqThreadNat64Service.  # noqa: E501
        :rtype: str
        """
        return self._translator_cidr

    @translator_cidr.setter
    def translator_cidr(self, translator_cidr):
        """Sets the translator_cidr of this XiqThreadNat64Service.


        :param translator_cidr: The translator_cidr of this XiqThreadNat64Service.  # noqa: E501
        :type: str
        """

        self._translator_cidr = translator_cidr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqThreadNat64Service):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqThreadNat64Service):
            return True

        return self.to_dict() != other.to_dict()
