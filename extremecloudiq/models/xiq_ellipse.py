# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 24.6.0.74
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from extremecloudiq.configuration import Configuration


class XiqEllipse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'major_axis': 'float',
        'minor_axis': 'float',
        'orientation': 'float'
    }

    attribute_map = {
        'major_axis': 'major_axis',
        'minor_axis': 'minor_axis',
        'orientation': 'orientation'
    }

    def __init__(self, major_axis=None, minor_axis=None, orientation=None, local_vars_configuration=None):  # noqa: E501
        """XiqEllipse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._major_axis = None
        self._minor_axis = None
        self._orientation = None
        self.discriminator = None

        if major_axis is not None:
            self.major_axis = major_axis
        if minor_axis is not None:
            self.minor_axis = minor_axis
        if orientation is not None:
            self.orientation = orientation

    @property
    def major_axis(self):
        """Gets the major_axis of this XiqEllipse.  # noqa: E501


        :return: The major_axis of this XiqEllipse.  # noqa: E501
        :rtype: float
        """
        return self._major_axis

    @major_axis.setter
    def major_axis(self, major_axis):
        """Sets the major_axis of this XiqEllipse.


        :param major_axis: The major_axis of this XiqEllipse.  # noqa: E501
        :type: float
        """

        self._major_axis = major_axis

    @property
    def minor_axis(self):
        """Gets the minor_axis of this XiqEllipse.  # noqa: E501


        :return: The minor_axis of this XiqEllipse.  # noqa: E501
        :rtype: float
        """
        return self._minor_axis

    @minor_axis.setter
    def minor_axis(self, minor_axis):
        """Sets the minor_axis of this XiqEllipse.


        :param minor_axis: The minor_axis of this XiqEllipse.  # noqa: E501
        :type: float
        """

        self._minor_axis = minor_axis

    @property
    def orientation(self):
        """Gets the orientation of this XiqEllipse.  # noqa: E501


        :return: The orientation of this XiqEllipse.  # noqa: E501
        :rtype: float
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this XiqEllipse.


        :param orientation: The orientation of this XiqEllipse.  # noqa: E501
        :type: float
        """

        self._orientation = orientation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XiqEllipse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, XiqEllipse):
            return True

        return self.to_dict() != other.to_dict()
