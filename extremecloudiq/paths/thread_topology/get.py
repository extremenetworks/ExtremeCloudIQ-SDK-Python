# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from extremecloudiq import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401

from extremecloudiq.model.xiq_client_field import XiqClientField
from extremecloudiq.model.xiq_error import XiqError
from extremecloudiq.model.xiq_client_view import XiqClientView
from extremecloudiq.model.xiq_thread_network_topology import XiqThreadNetworkTopology

from . import path

# Query params


class NetworkConfigIdsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        items = schemas.Int64Schema

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'NetworkConfigIdsSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class RouterFieldsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "DEVICE_ID": "DEVICE_ID",
                    "SERIAL_NUMBER": "SERIAL_NUMBER",
                    "EUI64": "EUI64",
                    "EXT_MAC": "EXT_MAC",
                    "RLOC16": "RLOC16",
                    "GLOBAL_IPV6": "GLOBAL_IPV6",
                    "TX_POWER": "TX_POWER",
                    "REGION": "REGION",
                    "THREAD_PLATFORM": "THREAD_PLATFORM",
                    "DEVICE_ROLE": "DEVICE_ROLE",
                    "ROUTER_INTERFACE": "ROUTER_INTERFACE",
                    "VETH0": "VETH0",
                    "NETWORK_DATA": "NETWORK_DATA",
                    "THREAD_MLE_LINK_MODE": "THREAD_MLE_LINK_MODE",
                    "THREAD_VERSION": "THREAD_VERSION",
                    "LEADER_SERVICE": "LEADER_SERVICE",
                    "BORDER_ROUTER_SERVICE": "BORDER_ROUTER_SERVICE",
                    "BACKBONE_BORDER_ROUTER_SERVICE": "BACKBONE_BORDER_ROUTER_SERVICE",
                    "BORDER_AGENT_SERVICE": "BORDER_AGENT_SERVICE",
                    "COMMISSIONER_SERVICE": "COMMISSIONER_SERVICE",
                    "NAT64_SERVICE": "NAT64_SERVICE",
                    "NETWORK_CONFIG": "NETWORK_CONFIG",
                    "OWNER_ID": "OWNER_ID",
                    "ORG_ID": "ORG_ID",
                    "ID": "ID",
                    "CREATE_TIME": "CREATE_TIME",
                    "UPDATE_TIME": "UPDATE_TIME",
                    "ACTIVE_CLIENTS": "ACTIVE_CLIENTS",
                    "HOSTNAME": "HOSTNAME",
                    "LAST_REPORTED": "LAST_REPORTED",
                    "THREAD_CONNECTED": "THREAD_CONNECTED",
                }
            
            @schemas.classproperty
            def DEVICE_ID(cls):
                return cls("DEVICE_ID")
            
            @schemas.classproperty
            def SERIAL_NUMBER(cls):
                return cls("SERIAL_NUMBER")
            
            @schemas.classproperty
            def EUI64(cls):
                return cls("EUI64")
            
            @schemas.classproperty
            def EXT_MAC(cls):
                return cls("EXT_MAC")
            
            @schemas.classproperty
            def RLOC16(cls):
                return cls("RLOC16")
            
            @schemas.classproperty
            def GLOBAL_IPV6(cls):
                return cls("GLOBAL_IPV6")
            
            @schemas.classproperty
            def TX_POWER(cls):
                return cls("TX_POWER")
            
            @schemas.classproperty
            def REGION(cls):
                return cls("REGION")
            
            @schemas.classproperty
            def THREAD_PLATFORM(cls):
                return cls("THREAD_PLATFORM")
            
            @schemas.classproperty
            def DEVICE_ROLE(cls):
                return cls("DEVICE_ROLE")
            
            @schemas.classproperty
            def ROUTER_INTERFACE(cls):
                return cls("ROUTER_INTERFACE")
            
            @schemas.classproperty
            def VETH0(cls):
                return cls("VETH0")
            
            @schemas.classproperty
            def NETWORK_DATA(cls):
                return cls("NETWORK_DATA")
            
            @schemas.classproperty
            def THREAD_MLE_LINK_MODE(cls):
                return cls("THREAD_MLE_LINK_MODE")
            
            @schemas.classproperty
            def THREAD_VERSION(cls):
                return cls("THREAD_VERSION")
            
            @schemas.classproperty
            def LEADER_SERVICE(cls):
                return cls("LEADER_SERVICE")
            
            @schemas.classproperty
            def BORDER_ROUTER_SERVICE(cls):
                return cls("BORDER_ROUTER_SERVICE")
            
            @schemas.classproperty
            def BACKBONE_BORDER_ROUTER_SERVICE(cls):
                return cls("BACKBONE_BORDER_ROUTER_SERVICE")
            
            @schemas.classproperty
            def BORDER_AGENT_SERVICE(cls):
                return cls("BORDER_AGENT_SERVICE")
            
            @schemas.classproperty
            def COMMISSIONER_SERVICE(cls):
                return cls("COMMISSIONER_SERVICE")
            
            @schemas.classproperty
            def NAT64_SERVICE(cls):
                return cls("NAT64_SERVICE")
            
            @schemas.classproperty
            def NETWORK_CONFIG(cls):
                return cls("NETWORK_CONFIG")
            
            @schemas.classproperty
            def OWNER_ID(cls):
                return cls("OWNER_ID")
            
            @schemas.classproperty
            def ORG_ID(cls):
                return cls("ORG_ID")
            
            @schemas.classproperty
            def ID(cls):
                return cls("ID")
            
            @schemas.classproperty
            def CREATE_TIME(cls):
                return cls("CREATE_TIME")
            
            @schemas.classproperty
            def UPDATE_TIME(cls):
                return cls("UPDATE_TIME")
            
            @schemas.classproperty
            def ACTIVE_CLIENTS(cls):
                return cls("ACTIVE_CLIENTS")
            
            @schemas.classproperty
            def HOSTNAME(cls):
                return cls("HOSTNAME")
            
            @schemas.classproperty
            def LAST_REPORTED(cls):
                return cls("LAST_REPORTED")
            
            @schemas.classproperty
            def THREAD_CONNECTED(cls):
                return cls("THREAD_CONNECTED")

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RouterFieldsSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class RouterViewsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "BASIC": "BASIC",
                    "DETAIL": "DETAIL",
                    "FULL": "FULL",
                }
            
            @schemas.classproperty
            def BASIC(cls):
                return cls("BASIC")
            
            @schemas.classproperty
            def DETAIL(cls):
                return cls("DETAIL")
            
            @schemas.classproperty
            def FULL(cls):
                return cls("FULL")

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'RouterViewsSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)


class ClientViewsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['XiqClientView']:
            return XiqClientView

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['XiqClientView'], typing.List['XiqClientView']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ClientViewsSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'XiqClientView':
        return super().__getitem__(i)


class ClientFieldsSchema(
    schemas.ListSchema
):


    class MetaOapg:
        
        @staticmethod
        def items() -> typing.Type['XiqClientField']:
            return XiqClientField

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple['XiqClientField'], typing.List['XiqClientField']],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ClientFieldsSchema':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> 'XiqClientField':
        return super().__getitem__(i)
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
        'networkConfigIds': typing.Union[NetworkConfigIdsSchema, list, tuple, ],
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'routerFields': typing.Union[RouterFieldsSchema, list, tuple, ],
        'routerViews': typing.Union[RouterViewsSchema, list, tuple, ],
        'clientViews': typing.Union[ClientViewsSchema, list, tuple, ],
        'clientFields': typing.Union[ClientFieldsSchema, list, tuple, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_network_config_ids = api_client.QueryParameter(
    name="networkConfigIds",
    style=api_client.ParameterStyle.FORM,
    schema=NetworkConfigIdsSchema,
    required=True,
    explode=True,
)
request_query_router_fields = api_client.QueryParameter(
    name="routerFields",
    style=api_client.ParameterStyle.FORM,
    schema=RouterFieldsSchema,
    explode=True,
)
request_query_router_views = api_client.QueryParameter(
    name="routerViews",
    style=api_client.ParameterStyle.FORM,
    schema=RouterViewsSchema,
    explode=True,
)
request_query_client_views = api_client.QueryParameter(
    name="clientViews",
    style=api_client.ParameterStyle.FORM,
    schema=ClientViewsSchema,
    explode=True,
)
request_query_client_fields = api_client.QueryParameter(
    name="clientFields",
    style=api_client.ParameterStyle.FORM,
    schema=ClientFieldsSchema,
    explode=True,
)
_auth = [
    'Bearer',
]
SchemaFor401ResponseBodyApplicationJson = XiqError


@dataclass
class ApiResponseFor401(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor401ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_401 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor401,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor401ResponseBodyApplicationJson),
    },
)
SchemaFor400ResponseBodyApplicationJson = XiqError


@dataclass
class ApiResponseFor400(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor400ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_400 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor400,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor400ResponseBodyApplicationJson),
    },
)
SchemaFor503ResponseBodyApplicationJson = XiqError


@dataclass
class ApiResponseFor503(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor503ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_503 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor503,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor503ResponseBodyApplicationJson),
    },
)
SchemaFor500ResponseBodyApplicationJson = XiqError


@dataclass
class ApiResponseFor500(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor500ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_500 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor500,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor500ResponseBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = XiqThreadNetworkTopology


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '401': _response_for_401,
    '400': _response_for_400,
    '503': _response_for_503,
    '500': _response_for_500,
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _get_thread_network_topology_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def _get_thread_network_topology_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _get_thread_network_topology_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _get_thread_network_topology_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        Get thread network topology
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_network_config_ids,
            request_query_router_fields,
            request_query_router_views,
            request_query_client_views,
            request_query_client_fields,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(
                status=response.status,
                reason=response.reason,
                api_response=api_response
            )

        return api_response


class GetThreadNetworkTopology(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def get_thread_network_topology(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get_thread_network_topology(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get_thread_network_topology(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get_thread_network_topology(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_thread_network_topology_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._get_thread_network_topology_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


