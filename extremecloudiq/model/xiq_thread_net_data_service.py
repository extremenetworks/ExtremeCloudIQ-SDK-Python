# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqThreadNetDataService(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            enterprise_number = schemas.Int64Schema
            service_data = schemas.StrSchema
            server_data = schemas.StrSchema
            stable = schemas.BoolSchema
            added_by_rloc16 = schemas.StrSchema
            added_by_ext_mac = schemas.StrSchema
            __annotations__ = {
                "enterprise_number": enterprise_number,
                "service_data": service_data,
                "server_data": server_data,
                "stable": stable,
                "added_by_rloc16": added_by_rloc16,
                "added_by_ext_mac": added_by_ext_mac,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enterprise_number"]) -> MetaOapg.properties.enterprise_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_data"]) -> MetaOapg.properties.service_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["server_data"]) -> MetaOapg.properties.server_data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stable"]) -> MetaOapg.properties.stable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_by_rloc16"]) -> MetaOapg.properties.added_by_rloc16: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_by_ext_mac"]) -> MetaOapg.properties.added_by_ext_mac: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["enterprise_number", "service_data", "server_data", "stable", "added_by_rloc16", "added_by_ext_mac", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enterprise_number"]) -> typing.Union[MetaOapg.properties.enterprise_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_data"]) -> typing.Union[MetaOapg.properties.service_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["server_data"]) -> typing.Union[MetaOapg.properties.server_data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stable"]) -> typing.Union[MetaOapg.properties.stable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_by_rloc16"]) -> typing.Union[MetaOapg.properties.added_by_rloc16, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_by_ext_mac"]) -> typing.Union[MetaOapg.properties.added_by_ext_mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enterprise_number", "service_data", "server_data", "stable", "added_by_rloc16", "added_by_ext_mac", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        enterprise_number: typing.Union[MetaOapg.properties.enterprise_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        service_data: typing.Union[MetaOapg.properties.service_data, str, schemas.Unset] = schemas.unset,
        server_data: typing.Union[MetaOapg.properties.server_data, str, schemas.Unset] = schemas.unset,
        stable: typing.Union[MetaOapg.properties.stable, bool, schemas.Unset] = schemas.unset,
        added_by_rloc16: typing.Union[MetaOapg.properties.added_by_rloc16, str, schemas.Unset] = schemas.unset,
        added_by_ext_mac: typing.Union[MetaOapg.properties.added_by_ext_mac, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqThreadNetDataService':
        return super().__new__(
            cls,
            *_args,
            enterprise_number=enterprise_number,
            service_data=service_data,
            server_data=server_data,
            stable=stable,
            added_by_rloc16=added_by_rloc16,
            added_by_ext_mac=added_by_ext_mac,
            _configuration=_configuration,
            **kwargs,
        )
