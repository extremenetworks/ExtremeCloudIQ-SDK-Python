# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.3.0.140
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqRoamingTrial(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Get roaming trial
    """


    class MetaOapg:
        
        class properties:
            timestamp = schemas.Int64Schema
            device_name_from = schemas.StrSchema
            device_name_to = schemas.StrSchema
            device_mac_from = schemas.StrSchema
            device_mac_to = schemas.StrSchema
            roam_duration = schemas.Int32Schema
            status_action = schemas.StrSchema
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqRoamingTrialDetail']:
                        return XiqRoamingTrialDetail
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqRoamingTrialDetail'], typing.List['XiqRoamingTrialDetail']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqRoamingTrialDetail':
                    return super().__getitem__(i)
            __annotations__ = {
                "timestamp": timestamp,
                "device_name_from": device_name_from,
                "device_name_to": device_name_to,
                "device_mac_from": device_mac_from,
                "device_mac_to": device_mac_to,
                "roam_duration": roam_duration,
                "status_action": status_action,
                "data": data,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_name_from"]) -> MetaOapg.properties.device_name_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_name_to"]) -> MetaOapg.properties.device_name_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_mac_from"]) -> MetaOapg.properties.device_mac_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_mac_to"]) -> MetaOapg.properties.device_mac_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roam_duration"]) -> MetaOapg.properties.roam_duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status_action"]) -> MetaOapg.properties.status_action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timestamp", "device_name_from", "device_name_to", "device_mac_from", "device_mac_to", "roam_duration", "status_action", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_name_from"]) -> typing.Union[MetaOapg.properties.device_name_from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_name_to"]) -> typing.Union[MetaOapg.properties.device_name_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_mac_from"]) -> typing.Union[MetaOapg.properties.device_mac_from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_mac_to"]) -> typing.Union[MetaOapg.properties.device_mac_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roam_duration"]) -> typing.Union[MetaOapg.properties.roam_duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status_action"]) -> typing.Union[MetaOapg.properties.status_action, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timestamp", "device_name_from", "device_name_to", "device_mac_from", "device_mac_to", "roam_duration", "status_action", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_name_from: typing.Union[MetaOapg.properties.device_name_from, str, schemas.Unset] = schemas.unset,
        device_name_to: typing.Union[MetaOapg.properties.device_name_to, str, schemas.Unset] = schemas.unset,
        device_mac_from: typing.Union[MetaOapg.properties.device_mac_from, str, schemas.Unset] = schemas.unset,
        device_mac_to: typing.Union[MetaOapg.properties.device_mac_to, str, schemas.Unset] = schemas.unset,
        roam_duration: typing.Union[MetaOapg.properties.roam_duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status_action: typing.Union[MetaOapg.properties.status_action, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqRoamingTrial':
        return super().__new__(
            cls,
            *_args,
            timestamp=timestamp,
            device_name_from=device_name_from,
            device_name_to=device_name_to,
            device_mac_from=device_mac_from,
            device_mac_to=device_mac_to,
            roam_duration=roam_duration,
            status_action=status_action,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_roaming_trial_detail import XiqRoamingTrialDetail
