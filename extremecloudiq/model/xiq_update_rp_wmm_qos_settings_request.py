# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqUpdateRpWmmQosSettingsRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class arbitration_interframe_space(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 15
                    inclusive_minimum = 1
            
            
            class min_contention_window(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 15
                    inclusive_minimum = 1
            
            
            class max_contention_window(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 15
                    inclusive_minimum = 1
            
            
            class transmission_opportunity_limit(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 8192
                    inclusive_minimum = 0
            enable_no_ack = schemas.BoolSchema
            __annotations__ = {
                "arbitration_interframe_space": arbitration_interframe_space,
                "min_contention_window": min_contention_window,
                "max_contention_window": max_contention_window,
                "transmission_opportunity_limit": transmission_opportunity_limit,
                "enable_no_ack": enable_no_ack,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arbitration_interframe_space"]) -> MetaOapg.properties.arbitration_interframe_space: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_contention_window"]) -> MetaOapg.properties.min_contention_window: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_contention_window"]) -> MetaOapg.properties.max_contention_window: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transmission_opportunity_limit"]) -> MetaOapg.properties.transmission_opportunity_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_no_ack"]) -> MetaOapg.properties.enable_no_ack: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["arbitration_interframe_space", "min_contention_window", "max_contention_window", "transmission_opportunity_limit", "enable_no_ack", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arbitration_interframe_space"]) -> typing.Union[MetaOapg.properties.arbitration_interframe_space, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_contention_window"]) -> typing.Union[MetaOapg.properties.min_contention_window, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_contention_window"]) -> typing.Union[MetaOapg.properties.max_contention_window, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transmission_opportunity_limit"]) -> typing.Union[MetaOapg.properties.transmission_opportunity_limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_no_ack"]) -> typing.Union[MetaOapg.properties.enable_no_ack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["arbitration_interframe_space", "min_contention_window", "max_contention_window", "transmission_opportunity_limit", "enable_no_ack", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        arbitration_interframe_space: typing.Union[MetaOapg.properties.arbitration_interframe_space, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        min_contention_window: typing.Union[MetaOapg.properties.min_contention_window, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_contention_window: typing.Union[MetaOapg.properties.max_contention_window, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        transmission_opportunity_limit: typing.Union[MetaOapg.properties.transmission_opportunity_limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        enable_no_ack: typing.Union[MetaOapg.properties.enable_no_ack, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqUpdateRpWmmQosSettingsRequest':
        return super().__new__(
            cls,
            *_args,
            arbitration_interframe_space=arbitration_interframe_space,
            min_contention_window=min_contention_window,
            max_contention_window=max_contention_window,
            transmission_opportunity_limit=transmission_opportunity_limit,
            enable_no_ack=enable_no_ack,
            _configuration=_configuration,
            **kwargs,
        )
