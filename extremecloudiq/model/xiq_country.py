# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqCountry(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            dial_code = schemas.StrSchema
            alpha2_code = schemas.StrSchema
            
            
            class country_code(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 999
                    inclusive_minimum = 1
            
            
            class internal_country_codes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'internal_country_codes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            short_name = schemas.StrSchema
            name_en = schemas.StrSchema
            name_jp = schemas.StrSchema
            name_fr = schemas.StrSchema
            name_de = schemas.StrSchema
            name_it = schemas.StrSchema
            name_pt = schemas.StrSchema
            name_zh = schemas.StrSchema
            name_es = schemas.StrSchema
            name_ko = schemas.StrSchema
            __annotations__ = {
                "dial_code": dial_code,
                "alpha2_code": alpha2_code,
                "country_code": country_code,
                "internal_country_codes": internal_country_codes,
                "short_name": short_name,
                "name_en": name_en,
                "name_jp": name_jp,
                "name_fr": name_fr,
                "name_de": name_de,
                "name_it": name_it,
                "name_pt": name_pt,
                "name_zh": name_zh,
                "name_es": name_es,
                "name_ko": name_ko,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dial_code"]) -> MetaOapg.properties.dial_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alpha2_code"]) -> MetaOapg.properties.alpha2_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internal_country_codes"]) -> MetaOapg.properties.internal_country_codes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["short_name"]) -> MetaOapg.properties.short_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_en"]) -> MetaOapg.properties.name_en: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_jp"]) -> MetaOapg.properties.name_jp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_fr"]) -> MetaOapg.properties.name_fr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_de"]) -> MetaOapg.properties.name_de: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_it"]) -> MetaOapg.properties.name_it: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_pt"]) -> MetaOapg.properties.name_pt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_zh"]) -> MetaOapg.properties.name_zh: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_es"]) -> MetaOapg.properties.name_es: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_ko"]) -> MetaOapg.properties.name_ko: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["dial_code", "alpha2_code", "country_code", "internal_country_codes", "short_name", "name_en", "name_jp", "name_fr", "name_de", "name_it", "name_pt", "name_zh", "name_es", "name_ko", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dial_code"]) -> typing.Union[MetaOapg.properties.dial_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alpha2_code"]) -> typing.Union[MetaOapg.properties.alpha2_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internal_country_codes"]) -> typing.Union[MetaOapg.properties.internal_country_codes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["short_name"]) -> typing.Union[MetaOapg.properties.short_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_en"]) -> typing.Union[MetaOapg.properties.name_en, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_jp"]) -> typing.Union[MetaOapg.properties.name_jp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_fr"]) -> typing.Union[MetaOapg.properties.name_fr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_de"]) -> typing.Union[MetaOapg.properties.name_de, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_it"]) -> typing.Union[MetaOapg.properties.name_it, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_pt"]) -> typing.Union[MetaOapg.properties.name_pt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_zh"]) -> typing.Union[MetaOapg.properties.name_zh, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_es"]) -> typing.Union[MetaOapg.properties.name_es, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_ko"]) -> typing.Union[MetaOapg.properties.name_ko, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["dial_code", "alpha2_code", "country_code", "internal_country_codes", "short_name", "name_en", "name_jp", "name_fr", "name_de", "name_it", "name_pt", "name_zh", "name_es", "name_ko", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        dial_code: typing.Union[MetaOapg.properties.dial_code, str, schemas.Unset] = schemas.unset,
        alpha2_code: typing.Union[MetaOapg.properties.alpha2_code, str, schemas.Unset] = schemas.unset,
        country_code: typing.Union[MetaOapg.properties.country_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        internal_country_codes: typing.Union[MetaOapg.properties.internal_country_codes, list, tuple, schemas.Unset] = schemas.unset,
        short_name: typing.Union[MetaOapg.properties.short_name, str, schemas.Unset] = schemas.unset,
        name_en: typing.Union[MetaOapg.properties.name_en, str, schemas.Unset] = schemas.unset,
        name_jp: typing.Union[MetaOapg.properties.name_jp, str, schemas.Unset] = schemas.unset,
        name_fr: typing.Union[MetaOapg.properties.name_fr, str, schemas.Unset] = schemas.unset,
        name_de: typing.Union[MetaOapg.properties.name_de, str, schemas.Unset] = schemas.unset,
        name_it: typing.Union[MetaOapg.properties.name_it, str, schemas.Unset] = schemas.unset,
        name_pt: typing.Union[MetaOapg.properties.name_pt, str, schemas.Unset] = schemas.unset,
        name_zh: typing.Union[MetaOapg.properties.name_zh, str, schemas.Unset] = schemas.unset,
        name_es: typing.Union[MetaOapg.properties.name_es, str, schemas.Unset] = schemas.unset,
        name_ko: typing.Union[MetaOapg.properties.name_ko, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqCountry':
        return super().__new__(
            cls,
            *_args,
            dial_code=dial_code,
            alpha2_code=alpha2_code,
            country_code=country_code,
            internal_country_codes=internal_country_codes,
            short_name=short_name,
            name_en=name_en,
            name_jp=name_jp,
            name_fr=name_fr,
            name_de=name_de,
            name_it=name_it,
            name_pt=name_pt,
            name_zh=name_zh,
            name_es=name_es,
            name_ko=name_ko,
            _configuration=_configuration,
            **kwargs,
        )
