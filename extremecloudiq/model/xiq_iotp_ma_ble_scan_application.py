# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqIotpMaBleScanApplication(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Collection of BLE Scan applications
    """


    class MetaOapg:
        required = {
            "app_type",
        }
        
        class properties:
        
            @staticmethod
            def app_type() -> typing.Type['XiqIotpMaBleScanAppType']:
                return XiqIotpMaBleScanAppType
            
            
            class min_rss(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 20
                    inclusive_minimum = -120
            
            
            class uuid(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$',  # noqa: E501
                    }]
            
            
            class vendors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqIotpMaBleScanVendor']:
                        return XiqIotpMaBleScanVendor
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqIotpMaBleScanVendor'], typing.List['XiqIotpMaBleScanVendor']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vendors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqIotpMaBleScanVendor':
                    return super().__getitem__(i)
            __annotations__ = {
                "app_type": app_type,
                "min_rss": min_rss,
                "uuid": uuid,
                "vendors": vendors,
            }
    
    app_type: 'XiqIotpMaBleScanAppType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_type"]) -> 'XiqIotpMaBleScanAppType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["min_rss"]) -> MetaOapg.properties.min_rss: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendors"]) -> MetaOapg.properties.vendors: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["app_type", "min_rss", "uuid", "vendors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_type"]) -> 'XiqIotpMaBleScanAppType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["min_rss"]) -> typing.Union[MetaOapg.properties.min_rss, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> typing.Union[MetaOapg.properties.uuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendors"]) -> typing.Union[MetaOapg.properties.vendors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["app_type", "min_rss", "uuid", "vendors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        app_type: 'XiqIotpMaBleScanAppType',
        min_rss: typing.Union[MetaOapg.properties.min_rss, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uuid: typing.Union[MetaOapg.properties.uuid, str, schemas.Unset] = schemas.unset,
        vendors: typing.Union[MetaOapg.properties.vendors, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqIotpMaBleScanApplication':
        return super().__new__(
            cls,
            *_args,
            app_type=app_type,
            min_rss=min_rss,
            uuid=uuid,
            vendors=vendors,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_iotp_ma_ble_scan_app_type import XiqIotpMaBleScanAppType
from extremecloudiq.model.xiq_iotp_ma_ble_scan_vendor import XiqIotpMaBleScanVendor
