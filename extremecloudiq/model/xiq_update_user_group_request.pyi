# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqUpdateUserGroupRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "password_settings",
            "password_type",
            "name",
            "expiration_settings",
            "password_db_location",
            "delivery_settings",
        }
        
        class properties:
            name = schemas.StrSchema
        
            @staticmethod
            def password_db_location() -> typing.Type['XiqPasswordDbLocation']:
                return XiqPasswordDbLocation
        
            @staticmethod
            def password_type() -> typing.Type['XiqPasswordType']:
                return XiqPasswordType
        
            @staticmethod
            def password_settings() -> typing.Type['XiqPasswordSettings']:
                return XiqPasswordSettings
        
            @staticmethod
            def expiration_settings() -> typing.Type['XiqExpirationSettings']:
                return XiqExpirationSettings
        
            @staticmethod
            def delivery_settings() -> typing.Type['XiqDeliverySettings']:
                return XiqDeliverySettings
            description = schemas.StrSchema
            ppsk_use_only = schemas.BoolSchema
            enable_max_clients_per_ppsk = schemas.BoolSchema
            max_clients_per_ppsk = schemas.Int32Schema
            pcg_use_only = schemas.BoolSchema
        
            @staticmethod
            def pcg_type() -> typing.Type['XiqPcgType']:
                return XiqPcgType
            enable_cwp_reg = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "password_db_location": password_db_location,
                "password_type": password_type,
                "password_settings": password_settings,
                "expiration_settings": expiration_settings,
                "delivery_settings": delivery_settings,
                "description": description,
                "ppsk_use_only": ppsk_use_only,
                "enable_max_clients_per_ppsk": enable_max_clients_per_ppsk,
                "max_clients_per_ppsk": max_clients_per_ppsk,
                "pcg_use_only": pcg_use_only,
                "pcg_type": pcg_type,
                "enable_cwp_reg": enable_cwp_reg,
            }
    
    password_settings: 'XiqPasswordSettings'
    password_type: 'XiqPasswordType'
    name: MetaOapg.properties.name
    expiration_settings: 'XiqExpirationSettings'
    password_db_location: 'XiqPasswordDbLocation'
    delivery_settings: 'XiqDeliverySettings'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password_db_location"]) -> 'XiqPasswordDbLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password_type"]) -> 'XiqPasswordType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password_settings"]) -> 'XiqPasswordSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration_settings"]) -> 'XiqExpirationSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delivery_settings"]) -> 'XiqDeliverySettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ppsk_use_only"]) -> MetaOapg.properties.ppsk_use_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_max_clients_per_ppsk"]) -> MetaOapg.properties.enable_max_clients_per_ppsk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_clients_per_ppsk"]) -> MetaOapg.properties.max_clients_per_ppsk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pcg_use_only"]) -> MetaOapg.properties.pcg_use_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pcg_type"]) -> 'XiqPcgType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_cwp_reg"]) -> MetaOapg.properties.enable_cwp_reg: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "password_db_location", "password_type", "password_settings", "expiration_settings", "delivery_settings", "description", "ppsk_use_only", "enable_max_clients_per_ppsk", "max_clients_per_ppsk", "pcg_use_only", "pcg_type", "enable_cwp_reg", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password_db_location"]) -> 'XiqPasswordDbLocation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password_type"]) -> 'XiqPasswordType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password_settings"]) -> 'XiqPasswordSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration_settings"]) -> 'XiqExpirationSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delivery_settings"]) -> 'XiqDeliverySettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ppsk_use_only"]) -> typing.Union[MetaOapg.properties.ppsk_use_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_max_clients_per_ppsk"]) -> typing.Union[MetaOapg.properties.enable_max_clients_per_ppsk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_clients_per_ppsk"]) -> typing.Union[MetaOapg.properties.max_clients_per_ppsk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pcg_use_only"]) -> typing.Union[MetaOapg.properties.pcg_use_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pcg_type"]) -> typing.Union['XiqPcgType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_cwp_reg"]) -> typing.Union[MetaOapg.properties.enable_cwp_reg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "password_db_location", "password_type", "password_settings", "expiration_settings", "delivery_settings", "description", "ppsk_use_only", "enable_max_clients_per_ppsk", "max_clients_per_ppsk", "pcg_use_only", "pcg_type", "enable_cwp_reg", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        password_settings: 'XiqPasswordSettings',
        password_type: 'XiqPasswordType',
        name: typing.Union[MetaOapg.properties.name, str, ],
        expiration_settings: 'XiqExpirationSettings',
        password_db_location: 'XiqPasswordDbLocation',
        delivery_settings: 'XiqDeliverySettings',
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        ppsk_use_only: typing.Union[MetaOapg.properties.ppsk_use_only, bool, schemas.Unset] = schemas.unset,
        enable_max_clients_per_ppsk: typing.Union[MetaOapg.properties.enable_max_clients_per_ppsk, bool, schemas.Unset] = schemas.unset,
        max_clients_per_ppsk: typing.Union[MetaOapg.properties.max_clients_per_ppsk, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pcg_use_only: typing.Union[MetaOapg.properties.pcg_use_only, bool, schemas.Unset] = schemas.unset,
        pcg_type: typing.Union['XiqPcgType', schemas.Unset] = schemas.unset,
        enable_cwp_reg: typing.Union[MetaOapg.properties.enable_cwp_reg, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqUpdateUserGroupRequest':
        return super().__new__(
            cls,
            *_args,
            password_settings=password_settings,
            password_type=password_type,
            name=name,
            expiration_settings=expiration_settings,
            password_db_location=password_db_location,
            delivery_settings=delivery_settings,
            description=description,
            ppsk_use_only=ppsk_use_only,
            enable_max_clients_per_ppsk=enable_max_clients_per_ppsk,
            max_clients_per_ppsk=max_clients_per_ppsk,
            pcg_use_only=pcg_use_only,
            pcg_type=pcg_type,
            enable_cwp_reg=enable_cwp_reg,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_delivery_settings import XiqDeliverySettings
from extremecloudiq.model.xiq_expiration_settings import XiqExpirationSettings
from extremecloudiq.model.xiq_password_db_location import XiqPasswordDbLocation
from extremecloudiq.model.xiq_password_settings import XiqPasswordSettings
from extremecloudiq.model.xiq_password_type import XiqPasswordType
from extremecloudiq.model.xiq_pcg_type import XiqPcgType
