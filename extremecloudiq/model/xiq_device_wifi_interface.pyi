# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDeviceWifiInterface(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Get the device WiFi interface stats
    """


    class MetaOapg:
        
        class properties:
            frequency = schemas.StrSchema
            ssid_count = schemas.Int32Schema
            client_count = schemas.Int64Schema
            neighbor_clients = schemas.Int64Schema
            channel_util = schemas.Int32Schema
            channel = schemas.Int32Schema
            channel_width = schemas.Int32Schema
            tx_utilization = schemas.Int64Schema
            rx_utilization = schemas.Int64Schema
            tx_byte_count = schemas.Int64Schema
            rx_byte_count = schemas.Int64Schema
            noise_floor = schemas.Int64Schema
            crc_error_frame = schemas.Int64Schema
            tx_retry_frame = schemas.Int64Schema
            rx_retry_frame = schemas.Int64Schema
            unicast_tx_packet_count = schemas.Int64Schema
            unicast_rx_packet_count = schemas.Int64Schema
            broadcast_tx_packet_count = schemas.Int64Schema
            broadcast_rx_packet_count = schemas.Int64Schema
            tx_air_time = schemas.Int64Schema
            rx_air_time = schemas.Int64Schema
            total_utilization = schemas.Int64Schema
            scan_avg_interference = schemas.Int32Schema
            mac_address = schemas.StrSchema
            power = schemas.Int32Schema
            rx_errors = schemas.Int64Schema
            tx_errors = schemas.Int64Schema
            interface_name = schemas.StrSchema
            radio_profile_name = schemas.StrSchema
            __annotations__ = {
                "frequency": frequency,
                "ssid_count": ssid_count,
                "client_count": client_count,
                "neighbor_clients": neighbor_clients,
                "channel_util": channel_util,
                "channel": channel,
                "channel_width": channel_width,
                "tx_utilization": tx_utilization,
                "rx_utilization": rx_utilization,
                "tx_byte_count": tx_byte_count,
                "rx_byte_count": rx_byte_count,
                "noise_floor": noise_floor,
                "crc_error_frame": crc_error_frame,
                "tx_retry_frame": tx_retry_frame,
                "rx_retry_frame": rx_retry_frame,
                "unicast_tx_packet_count": unicast_tx_packet_count,
                "unicast_rx_packet_count": unicast_rx_packet_count,
                "broadcast_tx_packet_count": broadcast_tx_packet_count,
                "broadcast_rx_packet_count": broadcast_rx_packet_count,
                "tx_air_time": tx_air_time,
                "rx_air_time": rx_air_time,
                "total_utilization": total_utilization,
                "scan_avg_interference": scan_avg_interference,
                "mac_address": mac_address,
                "power": power,
                "rx_errors": rx_errors,
                "tx_errors": tx_errors,
                "interface_name": interface_name,
                "radio_profile_name": radio_profile_name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssid_count"]) -> MetaOapg.properties.ssid_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_count"]) -> MetaOapg.properties.client_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neighbor_clients"]) -> MetaOapg.properties.neighbor_clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_util"]) -> MetaOapg.properties.channel_util: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_width"]) -> MetaOapg.properties.channel_width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tx_utilization"]) -> MetaOapg.properties.tx_utilization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rx_utilization"]) -> MetaOapg.properties.rx_utilization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tx_byte_count"]) -> MetaOapg.properties.tx_byte_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rx_byte_count"]) -> MetaOapg.properties.rx_byte_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noise_floor"]) -> MetaOapg.properties.noise_floor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crc_error_frame"]) -> MetaOapg.properties.crc_error_frame: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tx_retry_frame"]) -> MetaOapg.properties.tx_retry_frame: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rx_retry_frame"]) -> MetaOapg.properties.rx_retry_frame: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unicast_tx_packet_count"]) -> MetaOapg.properties.unicast_tx_packet_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unicast_rx_packet_count"]) -> MetaOapg.properties.unicast_rx_packet_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["broadcast_tx_packet_count"]) -> MetaOapg.properties.broadcast_tx_packet_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["broadcast_rx_packet_count"]) -> MetaOapg.properties.broadcast_rx_packet_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tx_air_time"]) -> MetaOapg.properties.tx_air_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rx_air_time"]) -> MetaOapg.properties.rx_air_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_utilization"]) -> MetaOapg.properties.total_utilization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scan_avg_interference"]) -> MetaOapg.properties.scan_avg_interference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_address"]) -> MetaOapg.properties.mac_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power"]) -> MetaOapg.properties.power: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rx_errors"]) -> MetaOapg.properties.rx_errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tx_errors"]) -> MetaOapg.properties.tx_errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interface_name"]) -> MetaOapg.properties.interface_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_profile_name"]) -> MetaOapg.properties.radio_profile_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["frequency", "ssid_count", "client_count", "neighbor_clients", "channel_util", "channel", "channel_width", "tx_utilization", "rx_utilization", "tx_byte_count", "rx_byte_count", "noise_floor", "crc_error_frame", "tx_retry_frame", "rx_retry_frame", "unicast_tx_packet_count", "unicast_rx_packet_count", "broadcast_tx_packet_count", "broadcast_rx_packet_count", "tx_air_time", "rx_air_time", "total_utilization", "scan_avg_interference", "mac_address", "power", "rx_errors", "tx_errors", "interface_name", "radio_profile_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union[MetaOapg.properties.frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssid_count"]) -> typing.Union[MetaOapg.properties.ssid_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_count"]) -> typing.Union[MetaOapg.properties.client_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neighbor_clients"]) -> typing.Union[MetaOapg.properties.neighbor_clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_util"]) -> typing.Union[MetaOapg.properties.channel_util, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union[MetaOapg.properties.channel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_width"]) -> typing.Union[MetaOapg.properties.channel_width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tx_utilization"]) -> typing.Union[MetaOapg.properties.tx_utilization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rx_utilization"]) -> typing.Union[MetaOapg.properties.rx_utilization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tx_byte_count"]) -> typing.Union[MetaOapg.properties.tx_byte_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rx_byte_count"]) -> typing.Union[MetaOapg.properties.rx_byte_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noise_floor"]) -> typing.Union[MetaOapg.properties.noise_floor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crc_error_frame"]) -> typing.Union[MetaOapg.properties.crc_error_frame, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tx_retry_frame"]) -> typing.Union[MetaOapg.properties.tx_retry_frame, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rx_retry_frame"]) -> typing.Union[MetaOapg.properties.rx_retry_frame, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unicast_tx_packet_count"]) -> typing.Union[MetaOapg.properties.unicast_tx_packet_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unicast_rx_packet_count"]) -> typing.Union[MetaOapg.properties.unicast_rx_packet_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["broadcast_tx_packet_count"]) -> typing.Union[MetaOapg.properties.broadcast_tx_packet_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["broadcast_rx_packet_count"]) -> typing.Union[MetaOapg.properties.broadcast_rx_packet_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tx_air_time"]) -> typing.Union[MetaOapg.properties.tx_air_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rx_air_time"]) -> typing.Union[MetaOapg.properties.rx_air_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_utilization"]) -> typing.Union[MetaOapg.properties.total_utilization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scan_avg_interference"]) -> typing.Union[MetaOapg.properties.scan_avg_interference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_address"]) -> typing.Union[MetaOapg.properties.mac_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power"]) -> typing.Union[MetaOapg.properties.power, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rx_errors"]) -> typing.Union[MetaOapg.properties.rx_errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tx_errors"]) -> typing.Union[MetaOapg.properties.tx_errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interface_name"]) -> typing.Union[MetaOapg.properties.interface_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_profile_name"]) -> typing.Union[MetaOapg.properties.radio_profile_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["frequency", "ssid_count", "client_count", "neighbor_clients", "channel_util", "channel", "channel_width", "tx_utilization", "rx_utilization", "tx_byte_count", "rx_byte_count", "noise_floor", "crc_error_frame", "tx_retry_frame", "rx_retry_frame", "unicast_tx_packet_count", "unicast_rx_packet_count", "broadcast_tx_packet_count", "broadcast_rx_packet_count", "tx_air_time", "rx_air_time", "total_utilization", "scan_avg_interference", "mac_address", "power", "rx_errors", "tx_errors", "interface_name", "radio_profile_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        frequency: typing.Union[MetaOapg.properties.frequency, str, schemas.Unset] = schemas.unset,
        ssid_count: typing.Union[MetaOapg.properties.ssid_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        client_count: typing.Union[MetaOapg.properties.client_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        neighbor_clients: typing.Union[MetaOapg.properties.neighbor_clients, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel_util: typing.Union[MetaOapg.properties.channel_util, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel: typing.Union[MetaOapg.properties.channel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel_width: typing.Union[MetaOapg.properties.channel_width, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tx_utilization: typing.Union[MetaOapg.properties.tx_utilization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rx_utilization: typing.Union[MetaOapg.properties.rx_utilization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tx_byte_count: typing.Union[MetaOapg.properties.tx_byte_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rx_byte_count: typing.Union[MetaOapg.properties.rx_byte_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        noise_floor: typing.Union[MetaOapg.properties.noise_floor, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        crc_error_frame: typing.Union[MetaOapg.properties.crc_error_frame, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tx_retry_frame: typing.Union[MetaOapg.properties.tx_retry_frame, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rx_retry_frame: typing.Union[MetaOapg.properties.rx_retry_frame, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        unicast_tx_packet_count: typing.Union[MetaOapg.properties.unicast_tx_packet_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        unicast_rx_packet_count: typing.Union[MetaOapg.properties.unicast_rx_packet_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        broadcast_tx_packet_count: typing.Union[MetaOapg.properties.broadcast_tx_packet_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        broadcast_rx_packet_count: typing.Union[MetaOapg.properties.broadcast_rx_packet_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tx_air_time: typing.Union[MetaOapg.properties.tx_air_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rx_air_time: typing.Union[MetaOapg.properties.rx_air_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_utilization: typing.Union[MetaOapg.properties.total_utilization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        scan_avg_interference: typing.Union[MetaOapg.properties.scan_avg_interference, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mac_address: typing.Union[MetaOapg.properties.mac_address, str, schemas.Unset] = schemas.unset,
        power: typing.Union[MetaOapg.properties.power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rx_errors: typing.Union[MetaOapg.properties.rx_errors, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tx_errors: typing.Union[MetaOapg.properties.tx_errors, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        interface_name: typing.Union[MetaOapg.properties.interface_name, str, schemas.Unset] = schemas.unset,
        radio_profile_name: typing.Union[MetaOapg.properties.radio_profile_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDeviceWifiInterface':
        return super().__new__(
            cls,
            *_args,
            frequency=frequency,
            ssid_count=ssid_count,
            client_count=client_count,
            neighbor_clients=neighbor_clients,
            channel_util=channel_util,
            channel=channel,
            channel_width=channel_width,
            tx_utilization=tx_utilization,
            rx_utilization=rx_utilization,
            tx_byte_count=tx_byte_count,
            rx_byte_count=rx_byte_count,
            noise_floor=noise_floor,
            crc_error_frame=crc_error_frame,
            tx_retry_frame=tx_retry_frame,
            rx_retry_frame=rx_retry_frame,
            unicast_tx_packet_count=unicast_tx_packet_count,
            unicast_rx_packet_count=unicast_rx_packet_count,
            broadcast_tx_packet_count=broadcast_tx_packet_count,
            broadcast_rx_packet_count=broadcast_rx_packet_count,
            tx_air_time=tx_air_time,
            rx_air_time=rx_air_time,
            total_utilization=total_utilization,
            scan_avg_interference=scan_avg_interference,
            mac_address=mac_address,
            power=power,
            rx_errors=rx_errors,
            tx_errors=tx_errors,
            interface_name=interface_name,
            radio_profile_name=radio_profile_name,
            _configuration=_configuration,
            **kwargs,
        )
