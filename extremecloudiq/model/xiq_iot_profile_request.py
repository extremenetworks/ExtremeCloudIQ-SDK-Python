# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqIotProfileRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "app_id",
            "app_supported",
        }
        
        class properties:
            name = schemas.StrSchema
        
            @staticmethod
            def app_id() -> typing.Type['XiqIotApplicationId']:
                return XiqIotApplicationId
        
            @staticmethod
            def app_supported() -> typing.Type['XiqIotApplicationSupported']:
                return XiqIotApplicationSupported
        
            @staticmethod
            def thread_gateway() -> typing.Type['XiqIotProfileThreadGateway']:
                return XiqIotProfileThreadGateway
        
            @staticmethod
            def ble_beacon() -> typing.Type['XiqIotpMaBleBeacon']:
                return XiqIotpMaBleBeacon
        
            @staticmethod
            def ble_scan() -> typing.Type['XiqIotpMaBleScan']:
                return XiqIotpMaBleScan
            __annotations__ = {
                "name": name,
                "app_id": app_id,
                "app_supported": app_supported,
                "thread_gateway": thread_gateway,
                "ble_beacon": ble_beacon,
                "ble_scan": ble_scan,
            }
    
    name: MetaOapg.properties.name
    app_id: 'XiqIotApplicationId'
    app_supported: 'XiqIotApplicationSupported'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_id"]) -> 'XiqIotApplicationId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_supported"]) -> 'XiqIotApplicationSupported': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_gateway"]) -> 'XiqIotProfileThreadGateway': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ble_beacon"]) -> 'XiqIotpMaBleBeacon': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ble_scan"]) -> 'XiqIotpMaBleScan': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "app_id", "app_supported", "thread_gateway", "ble_beacon", "ble_scan", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_id"]) -> 'XiqIotApplicationId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_supported"]) -> 'XiqIotApplicationSupported': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_gateway"]) -> typing.Union['XiqIotProfileThreadGateway', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ble_beacon"]) -> typing.Union['XiqIotpMaBleBeacon', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ble_scan"]) -> typing.Union['XiqIotpMaBleScan', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "app_id", "app_supported", "thread_gateway", "ble_beacon", "ble_scan", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        app_id: 'XiqIotApplicationId',
        app_supported: 'XiqIotApplicationSupported',
        thread_gateway: typing.Union['XiqIotProfileThreadGateway', schemas.Unset] = schemas.unset,
        ble_beacon: typing.Union['XiqIotpMaBleBeacon', schemas.Unset] = schemas.unset,
        ble_scan: typing.Union['XiqIotpMaBleScan', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqIotProfileRequest':
        return super().__new__(
            cls,
            *_args,
            name=name,
            app_id=app_id,
            app_supported=app_supported,
            thread_gateway=thread_gateway,
            ble_beacon=ble_beacon,
            ble_scan=ble_scan,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_iot_application_id import XiqIotApplicationId
from extremecloudiq.model.xiq_iot_application_supported import XiqIotApplicationSupported
from extremecloudiq.model.xiq_iot_profile_thread_gateway import XiqIotProfileThreadGateway
from extremecloudiq.model.xiq_iotp_ma_ble_beacon import XiqIotpMaBleBeacon
from extremecloudiq.model.xiq_iotp_ma_ble_scan import XiqIotpMaBleScan
