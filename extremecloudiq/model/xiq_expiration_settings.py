# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqExpirationSettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The password expiration settings
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def expiration_type() -> typing.Type['XiqExpirationType']:
                return XiqExpirationType
        
            @staticmethod
            def valid_during_dates() -> typing.Type['XiqValidDuringDateSettings']:
                return XiqValidDuringDateSettings
        
            @staticmethod
            def valid_for_time_period() -> typing.Type['XiqValidForTimePeriodSettings']:
                return XiqValidForTimePeriodSettings
        
            @staticmethod
            def valid_daily() -> typing.Type['XiqValidDailySettings']:
                return XiqValidDailySettings
        
            @staticmethod
            def expiration_action() -> typing.Type['XiqExpirationActionType']:
                return XiqExpirationActionType
        
            @staticmethod
            def post_expiration_action() -> typing.Type['XiqPostExpirationAction']:
                return XiqPostExpirationAction
            __annotations__ = {
                "expiration_type": expiration_type,
                "valid_during_dates": valid_during_dates,
                "valid_for_time_period": valid_for_time_period,
                "valid_daily": valid_daily,
                "expiration_action": expiration_action,
                "post_expiration_action": post_expiration_action,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration_type"]) -> 'XiqExpirationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid_during_dates"]) -> 'XiqValidDuringDateSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid_for_time_period"]) -> 'XiqValidForTimePeriodSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valid_daily"]) -> 'XiqValidDailySettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration_action"]) -> 'XiqExpirationActionType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_expiration_action"]) -> 'XiqPostExpirationAction': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expiration_type", "valid_during_dates", "valid_for_time_period", "valid_daily", "expiration_action", "post_expiration_action", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration_type"]) -> typing.Union['XiqExpirationType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid_during_dates"]) -> typing.Union['XiqValidDuringDateSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid_for_time_period"]) -> typing.Union['XiqValidForTimePeriodSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valid_daily"]) -> typing.Union['XiqValidDailySettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration_action"]) -> typing.Union['XiqExpirationActionType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_expiration_action"]) -> typing.Union['XiqPostExpirationAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expiration_type", "valid_during_dates", "valid_for_time_period", "valid_daily", "expiration_action", "post_expiration_action", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        expiration_type: typing.Union['XiqExpirationType', schemas.Unset] = schemas.unset,
        valid_during_dates: typing.Union['XiqValidDuringDateSettings', schemas.Unset] = schemas.unset,
        valid_for_time_period: typing.Union['XiqValidForTimePeriodSettings', schemas.Unset] = schemas.unset,
        valid_daily: typing.Union['XiqValidDailySettings', schemas.Unset] = schemas.unset,
        expiration_action: typing.Union['XiqExpirationActionType', schemas.Unset] = schemas.unset,
        post_expiration_action: typing.Union['XiqPostExpirationAction', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqExpirationSettings':
        return super().__new__(
            cls,
            *_args,
            expiration_type=expiration_type,
            valid_during_dates=valid_during_dates,
            valid_for_time_period=valid_for_time_period,
            valid_daily=valid_daily,
            expiration_action=expiration_action,
            post_expiration_action=post_expiration_action,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_expiration_action_type import XiqExpirationActionType
from extremecloudiq.model.xiq_expiration_type import XiqExpirationType
from extremecloudiq.model.xiq_post_expiration_action import XiqPostExpirationAction
from extremecloudiq.model.xiq_valid_daily_settings import XiqValidDailySettings
from extremecloudiq.model.xiq_valid_during_date_settings import XiqValidDuringDateSettings
from extremecloudiq.model.xiq_valid_for_time_period_settings import XiqValidForTimePeriodSettings
