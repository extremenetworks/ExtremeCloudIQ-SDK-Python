# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqZsubelement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The payload of Z-subelement Settings
    """


    class MetaOapg:
        required = {
            "floor_number",
            "expected_to_move",
        }
        
        class properties:
            expected_to_move = schemas.BoolSchema
            floor_number = schemas.Int32Schema
        
            @staticmethod
            def above_floor() -> typing.Type['XiqZsubelementAboveFloor']:
                return XiqZsubelementAboveFloor
            __annotations__ = {
                "expected_to_move": expected_to_move,
                "floor_number": floor_number,
                "above_floor": above_floor,
            }
    
    floor_number: MetaOapg.properties.floor_number
    expected_to_move: MetaOapg.properties.expected_to_move
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expected_to_move"]) -> MetaOapg.properties.expected_to_move: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["floor_number"]) -> MetaOapg.properties.floor_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["above_floor"]) -> 'XiqZsubelementAboveFloor': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expected_to_move", "floor_number", "above_floor", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expected_to_move"]) -> MetaOapg.properties.expected_to_move: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["floor_number"]) -> MetaOapg.properties.floor_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["above_floor"]) -> typing.Union['XiqZsubelementAboveFloor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expected_to_move", "floor_number", "above_floor", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        floor_number: typing.Union[MetaOapg.properties.floor_number, decimal.Decimal, int, ],
        expected_to_move: typing.Union[MetaOapg.properties.expected_to_move, bool, ],
        above_floor: typing.Union['XiqZsubelementAboveFloor', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqZsubelement':
        return super().__new__(
            cls,
            *_args,
            floor_number=floor_number,
            expected_to_move=expected_to_move,
            above_floor=above_floor,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_zsubelement_above_floor import XiqZsubelementAboveFloor
