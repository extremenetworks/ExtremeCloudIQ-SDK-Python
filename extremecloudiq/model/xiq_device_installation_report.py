# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDeviceInstallationReport(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            onboarded = schemas.BoolSchema
            location_name = schemas.StrSchema
            network_policy_name = schemas.StrSchema
            device_template_name = schemas.StrSchema
            ip_address = schemas.StrSchema
            default_gateway = schemas.StrSchema
            ntp_server = schemas.StrSchema
            dns_server = schemas.StrSchema
            enable_poe = schemas.BoolSchema
            xiq_connectivity = schemas.BoolSchema
            image_count = schemas.Int32Schema
            
            
            class image_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'image_names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            installation_time = schemas.DateTimeSchema
            installed_by = schemas.StrSchema
            __annotations__ = {
                "onboarded": onboarded,
                "location_name": location_name,
                "network_policy_name": network_policy_name,
                "device_template_name": device_template_name,
                "ip_address": ip_address,
                "default_gateway": default_gateway,
                "ntp_server": ntp_server,
                "dns_server": dns_server,
                "enable_poe": enable_poe,
                "xiq_connectivity": xiq_connectivity,
                "image_count": image_count,
                "image_names": image_names,
                "installation_time": installation_time,
                "installed_by": installed_by,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboarded"]) -> MetaOapg.properties.onboarded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_name"]) -> MetaOapg.properties.location_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_policy_name"]) -> MetaOapg.properties.network_policy_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_template_name"]) -> MetaOapg.properties.device_template_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_gateway"]) -> MetaOapg.properties.default_gateway: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ntp_server"]) -> MetaOapg.properties.ntp_server: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dns_server"]) -> MetaOapg.properties.dns_server: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_poe"]) -> MetaOapg.properties.enable_poe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xiq_connectivity"]) -> MetaOapg.properties.xiq_connectivity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_count"]) -> MetaOapg.properties.image_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_names"]) -> MetaOapg.properties.image_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["installation_time"]) -> MetaOapg.properties.installation_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["installed_by"]) -> MetaOapg.properties.installed_by: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["onboarded", "location_name", "network_policy_name", "device_template_name", "ip_address", "default_gateway", "ntp_server", "dns_server", "enable_poe", "xiq_connectivity", "image_count", "image_names", "installation_time", "installed_by", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboarded"]) -> typing.Union[MetaOapg.properties.onboarded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_name"]) -> typing.Union[MetaOapg.properties.location_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_policy_name"]) -> typing.Union[MetaOapg.properties.network_policy_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_template_name"]) -> typing.Union[MetaOapg.properties.device_template_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> typing.Union[MetaOapg.properties.ip_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_gateway"]) -> typing.Union[MetaOapg.properties.default_gateway, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ntp_server"]) -> typing.Union[MetaOapg.properties.ntp_server, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dns_server"]) -> typing.Union[MetaOapg.properties.dns_server, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_poe"]) -> typing.Union[MetaOapg.properties.enable_poe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xiq_connectivity"]) -> typing.Union[MetaOapg.properties.xiq_connectivity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_count"]) -> typing.Union[MetaOapg.properties.image_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_names"]) -> typing.Union[MetaOapg.properties.image_names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["installation_time"]) -> typing.Union[MetaOapg.properties.installation_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["installed_by"]) -> typing.Union[MetaOapg.properties.installed_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["onboarded", "location_name", "network_policy_name", "device_template_name", "ip_address", "default_gateway", "ntp_server", "dns_server", "enable_poe", "xiq_connectivity", "image_count", "image_names", "installation_time", "installed_by", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        onboarded: typing.Union[MetaOapg.properties.onboarded, bool, schemas.Unset] = schemas.unset,
        location_name: typing.Union[MetaOapg.properties.location_name, str, schemas.Unset] = schemas.unset,
        network_policy_name: typing.Union[MetaOapg.properties.network_policy_name, str, schemas.Unset] = schemas.unset,
        device_template_name: typing.Union[MetaOapg.properties.device_template_name, str, schemas.Unset] = schemas.unset,
        ip_address: typing.Union[MetaOapg.properties.ip_address, str, schemas.Unset] = schemas.unset,
        default_gateway: typing.Union[MetaOapg.properties.default_gateway, str, schemas.Unset] = schemas.unset,
        ntp_server: typing.Union[MetaOapg.properties.ntp_server, str, schemas.Unset] = schemas.unset,
        dns_server: typing.Union[MetaOapg.properties.dns_server, str, schemas.Unset] = schemas.unset,
        enable_poe: typing.Union[MetaOapg.properties.enable_poe, bool, schemas.Unset] = schemas.unset,
        xiq_connectivity: typing.Union[MetaOapg.properties.xiq_connectivity, bool, schemas.Unset] = schemas.unset,
        image_count: typing.Union[MetaOapg.properties.image_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        image_names: typing.Union[MetaOapg.properties.image_names, list, tuple, schemas.Unset] = schemas.unset,
        installation_time: typing.Union[MetaOapg.properties.installation_time, str, datetime, schemas.Unset] = schemas.unset,
        installed_by: typing.Union[MetaOapg.properties.installed_by, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDeviceInstallationReport':
        return super().__new__(
            cls,
            *_args,
            onboarded=onboarded,
            location_name=location_name,
            network_policy_name=network_policy_name,
            device_template_name=device_template_name,
            ip_address=ip_address,
            default_gateway=default_gateway,
            ntp_server=ntp_server,
            dns_server=dns_server,
            enable_poe=enable_poe,
            xiq_connectivity=xiq_connectivity,
            image_count=image_count,
            image_names=image_names,
            installation_time=installation_time,
            installed_by=installed_by,
            _configuration=_configuration,
            **kwargs,
        )
