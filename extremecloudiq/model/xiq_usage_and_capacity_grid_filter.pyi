# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqUsageAndCapacityGridFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request body for Usage and Capacity Filter
    """


    class MetaOapg:
        
        class properties:
            
            
            class site_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'site_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class device_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'device_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class building_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'building_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class buildings(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'buildings':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class floors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'floors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            has_usage_capacity_issues = schemas.BoolSchema
            
            
            class number_filters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqNumberFilter']:
                        return XiqNumberFilter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqNumberFilter'], typing.List['XiqNumberFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'number_filters':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqNumberFilter':
                    return super().__getitem__(i)
            has_packet_loss_issues = schemas.BoolSchema
            has_retries_issues = schemas.BoolSchema
            __annotations__ = {
                "site_ids": site_ids,
                "device_ids": device_ids,
                "building_ids": building_ids,
                "buildings": buildings,
                "floors": floors,
                "has_usage_capacity_issues": has_usage_capacity_issues,
                "number_filters": number_filters,
                "has_packet_loss_issues": has_packet_loss_issues,
                "has_retries_issues": has_retries_issues,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["site_ids"]) -> MetaOapg.properties.site_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_ids"]) -> MetaOapg.properties.device_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["building_ids"]) -> MetaOapg.properties.building_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildings"]) -> MetaOapg.properties.buildings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["floors"]) -> MetaOapg.properties.floors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_usage_capacity_issues"]) -> MetaOapg.properties.has_usage_capacity_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_filters"]) -> MetaOapg.properties.number_filters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_packet_loss_issues"]) -> MetaOapg.properties.has_packet_loss_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_retries_issues"]) -> MetaOapg.properties.has_retries_issues: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["site_ids", "device_ids", "building_ids", "buildings", "floors", "has_usage_capacity_issues", "number_filters", "has_packet_loss_issues", "has_retries_issues", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["site_ids"]) -> typing.Union[MetaOapg.properties.site_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_ids"]) -> typing.Union[MetaOapg.properties.device_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["building_ids"]) -> typing.Union[MetaOapg.properties.building_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildings"]) -> typing.Union[MetaOapg.properties.buildings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["floors"]) -> typing.Union[MetaOapg.properties.floors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_usage_capacity_issues"]) -> typing.Union[MetaOapg.properties.has_usage_capacity_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_filters"]) -> typing.Union[MetaOapg.properties.number_filters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_packet_loss_issues"]) -> typing.Union[MetaOapg.properties.has_packet_loss_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_retries_issues"]) -> typing.Union[MetaOapg.properties.has_retries_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["site_ids", "device_ids", "building_ids", "buildings", "floors", "has_usage_capacity_issues", "number_filters", "has_packet_loss_issues", "has_retries_issues", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        site_ids: typing.Union[MetaOapg.properties.site_ids, list, tuple, schemas.Unset] = schemas.unset,
        device_ids: typing.Union[MetaOapg.properties.device_ids, list, tuple, schemas.Unset] = schemas.unset,
        building_ids: typing.Union[MetaOapg.properties.building_ids, list, tuple, schemas.Unset] = schemas.unset,
        buildings: typing.Union[MetaOapg.properties.buildings, list, tuple, schemas.Unset] = schemas.unset,
        floors: typing.Union[MetaOapg.properties.floors, list, tuple, schemas.Unset] = schemas.unset,
        has_usage_capacity_issues: typing.Union[MetaOapg.properties.has_usage_capacity_issues, bool, schemas.Unset] = schemas.unset,
        number_filters: typing.Union[MetaOapg.properties.number_filters, list, tuple, schemas.Unset] = schemas.unset,
        has_packet_loss_issues: typing.Union[MetaOapg.properties.has_packet_loss_issues, bool, schemas.Unset] = schemas.unset,
        has_retries_issues: typing.Union[MetaOapg.properties.has_retries_issues, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqUsageAndCapacityGridFilter':
        return super().__new__(
            cls,
            *_args,
            site_ids=site_ids,
            device_ids=device_ids,
            building_ids=building_ids,
            buildings=buildings,
            floors=floors,
            has_usage_capacity_issues=has_usage_capacity_issues,
            number_filters=number_filters,
            has_packet_loss_issues=has_packet_loss_issues,
            has_retries_issues=has_retries_issues,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_number_filter import XiqNumberFilter
