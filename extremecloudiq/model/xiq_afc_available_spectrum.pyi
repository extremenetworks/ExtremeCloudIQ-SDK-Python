# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAfcAvailableSpectrum(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            request_id = schemas.StrSchema
            
            
            class available_channel_info(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqAvailableChannelInfo']:
                        return XiqAvailableChannelInfo
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqAvailableChannelInfo'], typing.List['XiqAvailableChannelInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'available_channel_info':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqAvailableChannelInfo':
                    return super().__getitem__(i)
            availability_expire_time = schemas.StrSchema
            __annotations__ = {
                "request_id": request_id,
                "available_channel_info": available_channel_info,
                "availability_expire_time": availability_expire_time,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["request_id"]) -> MetaOapg.properties.request_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_channel_info"]) -> MetaOapg.properties.available_channel_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availability_expire_time"]) -> MetaOapg.properties.availability_expire_time: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["request_id", "available_channel_info", "availability_expire_time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["request_id"]) -> typing.Union[MetaOapg.properties.request_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_channel_info"]) -> typing.Union[MetaOapg.properties.available_channel_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availability_expire_time"]) -> typing.Union[MetaOapg.properties.availability_expire_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["request_id", "available_channel_info", "availability_expire_time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        request_id: typing.Union[MetaOapg.properties.request_id, str, schemas.Unset] = schemas.unset,
        available_channel_info: typing.Union[MetaOapg.properties.available_channel_info, list, tuple, schemas.Unset] = schemas.unset,
        availability_expire_time: typing.Union[MetaOapg.properties.availability_expire_time, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAfcAvailableSpectrum':
        return super().__new__(
            cls,
            *_args,
            request_id=request_id,
            available_channel_info=available_channel_info,
            availability_expire_time=availability_expire_time,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_available_channel_info import XiqAvailableChannelInfo
