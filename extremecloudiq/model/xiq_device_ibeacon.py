# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDeviceIbeacon(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The device iBeacon settings.
    """


    class MetaOapg:
        required = {
            "device_id",
        }
        
        class properties:
            device_id = schemas.Int64Schema
            enabled = schemas.BoolSchema
            
            
            class major(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 65635
                    inclusive_minimum = 0
            
            
            class minor(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 65635
                    inclusive_minimum = 0
            
            
            class power(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 127
                    inclusive_minimum = -128
            enable_monitoring = schemas.BoolSchema
            enable_ble_scan_ibeacon = schemas.BoolSchema
            enable_ble_scan_generic = schemas.BoolSchema
            enable_cloud_reporting = schemas.BoolSchema
            enable_batch_reporting = schemas.BoolSchema
            __annotations__ = {
                "device_id": device_id,
                "enabled": enabled,
                "major": major,
                "minor": minor,
                "power": power,
                "enable_monitoring": enable_monitoring,
                "enable_ble_scan_ibeacon": enable_ble_scan_ibeacon,
                "enable_ble_scan_generic": enable_ble_scan_generic,
                "enable_cloud_reporting": enable_cloud_reporting,
                "enable_batch_reporting": enable_batch_reporting,
            }
    
    device_id: MetaOapg.properties.device_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["major"]) -> MetaOapg.properties.major: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minor"]) -> MetaOapg.properties.minor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power"]) -> MetaOapg.properties.power: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_monitoring"]) -> MetaOapg.properties.enable_monitoring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_ble_scan_ibeacon"]) -> MetaOapg.properties.enable_ble_scan_ibeacon: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_ble_scan_generic"]) -> MetaOapg.properties.enable_ble_scan_generic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_cloud_reporting"]) -> MetaOapg.properties.enable_cloud_reporting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_batch_reporting"]) -> MetaOapg.properties.enable_batch_reporting: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["device_id", "enabled", "major", "minor", "power", "enable_monitoring", "enable_ble_scan_ibeacon", "enable_ble_scan_generic", "enable_cloud_reporting", "enable_batch_reporting", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["major"]) -> typing.Union[MetaOapg.properties.major, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minor"]) -> typing.Union[MetaOapg.properties.minor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power"]) -> typing.Union[MetaOapg.properties.power, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_monitoring"]) -> typing.Union[MetaOapg.properties.enable_monitoring, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_ble_scan_ibeacon"]) -> typing.Union[MetaOapg.properties.enable_ble_scan_ibeacon, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_ble_scan_generic"]) -> typing.Union[MetaOapg.properties.enable_ble_scan_generic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_cloud_reporting"]) -> typing.Union[MetaOapg.properties.enable_cloud_reporting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_batch_reporting"]) -> typing.Union[MetaOapg.properties.enable_batch_reporting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device_id", "enabled", "major", "minor", "power", "enable_monitoring", "enable_ble_scan_ibeacon", "enable_ble_scan_generic", "enable_cloud_reporting", "enable_batch_reporting", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        device_id: typing.Union[MetaOapg.properties.device_id, decimal.Decimal, int, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
        major: typing.Union[MetaOapg.properties.major, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minor: typing.Union[MetaOapg.properties.minor, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        power: typing.Union[MetaOapg.properties.power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        enable_monitoring: typing.Union[MetaOapg.properties.enable_monitoring, bool, schemas.Unset] = schemas.unset,
        enable_ble_scan_ibeacon: typing.Union[MetaOapg.properties.enable_ble_scan_ibeacon, bool, schemas.Unset] = schemas.unset,
        enable_ble_scan_generic: typing.Union[MetaOapg.properties.enable_ble_scan_generic, bool, schemas.Unset] = schemas.unset,
        enable_cloud_reporting: typing.Union[MetaOapg.properties.enable_cloud_reporting, bool, schemas.Unset] = schemas.unset,
        enable_batch_reporting: typing.Union[MetaOapg.properties.enable_batch_reporting, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDeviceIbeacon':
        return super().__new__(
            cls,
            *_args,
            device_id=device_id,
            enabled=enabled,
            major=major,
            minor=minor,
            power=power,
            enable_monitoring=enable_monitoring,
            enable_ble_scan_ibeacon=enable_ble_scan_ibeacon,
            enable_ble_scan_generic=enable_ble_scan_generic,
            enable_cloud_reporting=enable_cloud_reporting,
            enable_batch_reporting=enable_batch_reporting,
            _configuration=_configuration,
            **kwargs,
        )
