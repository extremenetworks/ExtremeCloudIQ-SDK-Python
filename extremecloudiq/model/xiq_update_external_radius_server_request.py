# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqUpdateExternalRadiusServerRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "authentication_port",
            "accounting_port",
            "name",
            "ip_addr",
            "server_type",
        }
        
        class properties:
            name = schemas.StrSchema
            
            
            class authentication_port(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 65535
                    inclusive_minimum = 1
            
            
            class accounting_port(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 65535
                    inclusive_minimum = 1
        
            @staticmethod
            def server_type() -> typing.Type['XiqRadiusServerType']:
                return XiqRadiusServerType
            ip_addr = schemas.StrSchema
            shared_secret = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "authentication_port": authentication_port,
                "accounting_port": accounting_port,
                "server_type": server_type,
                "ip_addr": ip_addr,
                "shared_secret": shared_secret,
            }
    
    authentication_port: MetaOapg.properties.authentication_port
    accounting_port: MetaOapg.properties.accounting_port
    name: MetaOapg.properties.name
    ip_addr: MetaOapg.properties.ip_addr
    server_type: 'XiqRadiusServerType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_port"]) -> MetaOapg.properties.authentication_port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accounting_port"]) -> MetaOapg.properties.accounting_port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["server_type"]) -> 'XiqRadiusServerType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_addr"]) -> MetaOapg.properties.ip_addr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shared_secret"]) -> MetaOapg.properties.shared_secret: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "authentication_port", "accounting_port", "server_type", "ip_addr", "shared_secret", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_port"]) -> MetaOapg.properties.authentication_port: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accounting_port"]) -> MetaOapg.properties.accounting_port: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["server_type"]) -> 'XiqRadiusServerType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_addr"]) -> MetaOapg.properties.ip_addr: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shared_secret"]) -> typing.Union[MetaOapg.properties.shared_secret, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "authentication_port", "accounting_port", "server_type", "ip_addr", "shared_secret", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        authentication_port: typing.Union[MetaOapg.properties.authentication_port, decimal.Decimal, int, ],
        accounting_port: typing.Union[MetaOapg.properties.accounting_port, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        ip_addr: typing.Union[MetaOapg.properties.ip_addr, str, ],
        server_type: 'XiqRadiusServerType',
        shared_secret: typing.Union[MetaOapg.properties.shared_secret, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqUpdateExternalRadiusServerRequest':
        return super().__new__(
            cls,
            *_args,
            authentication_port=authentication_port,
            accounting_port=accounting_port,
            name=name,
            ip_addr=ip_addr,
            server_type=server_type,
            shared_secret=shared_secret,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_radius_server_type import XiqRadiusServerType
