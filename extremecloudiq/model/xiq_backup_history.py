# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqBackupHistory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The data in the current page
    """


    class MetaOapg:
        
        class properties:
            backup_date = schemas.Int64Schema
            backup_units = schemas.StrSchema
            owner_id = schemas.Int64Schema
            backup_file_name = schemas.StrSchema
            backup_version = schemas.StrSchema
            backup_file_suffix = schemas.StrSchema
            version_matched = schemas.BoolSchema
            __annotations__ = {
                "backup_date": backup_date,
                "backup_units": backup_units,
                "owner_id": owner_id,
                "backup_file_name": backup_file_name,
                "backup_version": backup_version,
                "backup_file_suffix": backup_file_suffix,
                "version_matched": version_matched,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_date"]) -> MetaOapg.properties.backup_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_units"]) -> MetaOapg.properties.backup_units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_file_name"]) -> MetaOapg.properties.backup_file_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_version"]) -> MetaOapg.properties.backup_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_file_suffix"]) -> MetaOapg.properties.backup_file_suffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version_matched"]) -> MetaOapg.properties.version_matched: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["backup_date", "backup_units", "owner_id", "backup_file_name", "backup_version", "backup_file_suffix", "version_matched", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_date"]) -> typing.Union[MetaOapg.properties.backup_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_units"]) -> typing.Union[MetaOapg.properties.backup_units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_file_name"]) -> typing.Union[MetaOapg.properties.backup_file_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_version"]) -> typing.Union[MetaOapg.properties.backup_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_file_suffix"]) -> typing.Union[MetaOapg.properties.backup_file_suffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version_matched"]) -> typing.Union[MetaOapg.properties.version_matched, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["backup_date", "backup_units", "owner_id", "backup_file_name", "backup_version", "backup_file_suffix", "version_matched", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        backup_date: typing.Union[MetaOapg.properties.backup_date, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        backup_units: typing.Union[MetaOapg.properties.backup_units, str, schemas.Unset] = schemas.unset,
        owner_id: typing.Union[MetaOapg.properties.owner_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        backup_file_name: typing.Union[MetaOapg.properties.backup_file_name, str, schemas.Unset] = schemas.unset,
        backup_version: typing.Union[MetaOapg.properties.backup_version, str, schemas.Unset] = schemas.unset,
        backup_file_suffix: typing.Union[MetaOapg.properties.backup_file_suffix, str, schemas.Unset] = schemas.unset,
        version_matched: typing.Union[MetaOapg.properties.version_matched, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqBackupHistory':
        return super().__new__(
            cls,
            *_args,
            backup_date=backup_date,
            backup_units=backup_units,
            owner_id=owner_id,
            backup_file_name=backup_file_name,
            backup_version=backup_version,
            backup_file_suffix=backup_file_suffix,
            version_matched=version_matched,
            _configuration=_configuration,
            **kwargs,
        )
