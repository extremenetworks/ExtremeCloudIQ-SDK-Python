# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqValidDailySettings(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The settings for Valid Daily option or null for other settings.
    """


    class MetaOapg:
        required = {
            "daily_start_minute",
            "daily_end_minute",
            "daily_end_hour",
            "daily_start_hour",
        }
        
        class properties:
            daily_start_hour = schemas.Int32Schema
            daily_start_minute = schemas.Int32Schema
            daily_end_hour = schemas.Int32Schema
            daily_end_minute = schemas.Int32Schema
            __annotations__ = {
                "daily_start_hour": daily_start_hour,
                "daily_start_minute": daily_start_minute,
                "daily_end_hour": daily_end_hour,
                "daily_end_minute": daily_end_minute,
            }
    
    daily_start_minute: MetaOapg.properties.daily_start_minute
    daily_end_minute: MetaOapg.properties.daily_end_minute
    daily_end_hour: MetaOapg.properties.daily_end_hour
    daily_start_hour: MetaOapg.properties.daily_start_hour
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_start_hour"]) -> MetaOapg.properties.daily_start_hour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_start_minute"]) -> MetaOapg.properties.daily_start_minute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_end_hour"]) -> MetaOapg.properties.daily_end_hour: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_end_minute"]) -> MetaOapg.properties.daily_end_minute: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["daily_start_hour", "daily_start_minute", "daily_end_hour", "daily_end_minute", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_start_hour"]) -> MetaOapg.properties.daily_start_hour: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_start_minute"]) -> MetaOapg.properties.daily_start_minute: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_end_hour"]) -> MetaOapg.properties.daily_end_hour: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_end_minute"]) -> MetaOapg.properties.daily_end_minute: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["daily_start_hour", "daily_start_minute", "daily_end_hour", "daily_end_minute", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        daily_start_minute: typing.Union[MetaOapg.properties.daily_start_minute, decimal.Decimal, int, ],
        daily_end_minute: typing.Union[MetaOapg.properties.daily_end_minute, decimal.Decimal, int, ],
        daily_end_hour: typing.Union[MetaOapg.properties.daily_end_hour, decimal.Decimal, int, ],
        daily_start_hour: typing.Union[MetaOapg.properties.daily_start_hour, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqValidDailySettings':
        return super().__new__(
            cls,
            *_args,
            daily_start_minute=daily_start_minute,
            daily_end_minute=daily_end_minute,
            daily_end_hour=daily_end_hour,
            daily_start_hour=daily_start_hour,
            _configuration=_configuration,
            **kwargs,
        )
