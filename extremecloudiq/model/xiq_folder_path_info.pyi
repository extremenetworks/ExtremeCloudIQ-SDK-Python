# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqFolderPathInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The folder path info
    """


    class MetaOapg:
        required = {
            "folder_type",
            "parent_id",
            "name",
            "folder_id",
        }
        
        class properties:
            folder_id = schemas.Int64Schema
            parent_id = schemas.Int64Schema
            name = schemas.StrSchema
            folder_type = schemas.StrSchema
            __annotations__ = {
                "folder_id": folder_id,
                "parent_id": parent_id,
                "name": name,
                "folder_type": folder_type,
            }
    
    folder_type: MetaOapg.properties.folder_type
    parent_id: MetaOapg.properties.parent_id
    name: MetaOapg.properties.name
    folder_id: MetaOapg.properties.folder_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder_id"]) -> MetaOapg.properties.folder_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_id"]) -> MetaOapg.properties.parent_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder_type"]) -> MetaOapg.properties.folder_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["folder_id", "parent_id", "name", "folder_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder_id"]) -> MetaOapg.properties.folder_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_id"]) -> MetaOapg.properties.parent_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder_type"]) -> MetaOapg.properties.folder_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["folder_id", "parent_id", "name", "folder_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        folder_type: typing.Union[MetaOapg.properties.folder_type, str, ],
        parent_id: typing.Union[MetaOapg.properties.parent_id, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        folder_id: typing.Union[MetaOapg.properties.folder_id, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqFolderPathInfo':
        return super().__new__(
            cls,
            *_args,
            folder_type=folder_type,
            parent_id=parent_id,
            name=name,
            folder_id=folder_id,
            _configuration=_configuration,
            **kwargs,
        )
