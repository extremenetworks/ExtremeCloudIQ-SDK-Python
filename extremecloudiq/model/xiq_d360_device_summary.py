# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqD360DeviceSummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            connected_status = schemas.BoolSchema
            active_since = schemas.Int64Schema
            device_health_issues = schemas.Int32Schema
            usage_and_capacity_issues = schemas.Int32Schema
            client_health_issues = schemas.Int32Schema
        
            @staticmethod
            def device_details() -> typing.Type['XiqDeviceDetails']:
                return XiqDeviceDetails
        
            @staticmethod
            def system_information() -> typing.Type['XiqDeviceSystemInformation']:
                return XiqDeviceSystemInformation
            __annotations__ = {
                "connected_status": connected_status,
                "active_since": active_since,
                "device_health_issues": device_health_issues,
                "usage_and_capacity_issues": usage_and_capacity_issues,
                "client_health_issues": client_health_issues,
                "device_details": device_details,
                "system_information": system_information,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected_status"]) -> MetaOapg.properties.connected_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active_since"]) -> MetaOapg.properties.active_since: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_health_issues"]) -> MetaOapg.properties.device_health_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage_and_capacity_issues"]) -> MetaOapg.properties.usage_and_capacity_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_health_issues"]) -> MetaOapg.properties.client_health_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_details"]) -> 'XiqDeviceDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_information"]) -> 'XiqDeviceSystemInformation': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["connected_status", "active_since", "device_health_issues", "usage_and_capacity_issues", "client_health_issues", "device_details", "system_information", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected_status"]) -> typing.Union[MetaOapg.properties.connected_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active_since"]) -> typing.Union[MetaOapg.properties.active_since, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_health_issues"]) -> typing.Union[MetaOapg.properties.device_health_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage_and_capacity_issues"]) -> typing.Union[MetaOapg.properties.usage_and_capacity_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_health_issues"]) -> typing.Union[MetaOapg.properties.client_health_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_details"]) -> typing.Union['XiqDeviceDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_information"]) -> typing.Union['XiqDeviceSystemInformation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connected_status", "active_since", "device_health_issues", "usage_and_capacity_issues", "client_health_issues", "device_details", "system_information", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        connected_status: typing.Union[MetaOapg.properties.connected_status, bool, schemas.Unset] = schemas.unset,
        active_since: typing.Union[MetaOapg.properties.active_since, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_health_issues: typing.Union[MetaOapg.properties.device_health_issues, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        usage_and_capacity_issues: typing.Union[MetaOapg.properties.usage_and_capacity_issues, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        client_health_issues: typing.Union[MetaOapg.properties.client_health_issues, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_details: typing.Union['XiqDeviceDetails', schemas.Unset] = schemas.unset,
        system_information: typing.Union['XiqDeviceSystemInformation', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqD360DeviceSummary':
        return super().__new__(
            cls,
            *_args,
            connected_status=connected_status,
            active_since=active_since,
            device_health_issues=device_health_issues,
            usage_and_capacity_issues=usage_and_capacity_issues,
            client_health_issues=client_health_issues,
            device_details=device_details,
            system_information=system_information,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_device_details import XiqDeviceDetails
from extremecloudiq.model.xiq_device_system_information import XiqDeviceSystemInformation
