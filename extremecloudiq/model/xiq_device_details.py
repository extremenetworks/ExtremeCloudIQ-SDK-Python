# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDeviceDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The device details
    """


    class MetaOapg:
        
        class properties:
            system_name = schemas.StrSchema
            ip_address = schemas.StrSchema
            model = schemas.StrSchema
            sys_up_time = schemas.StrSchema
            os_version = schemas.StrSchema
            location = schemas.StrSchema
            system_mac = schemas.StrSchema
            serial_number = schemas.StrSchema
            system_description = schemas.StrSchema
            software_version = schemas.StrSchema
            __annotations__ = {
                "system_name": system_name,
                "ip_address": ip_address,
                "model": model,
                "sys_up_time": sys_up_time,
                "os_version": os_version,
                "location": location,
                "system_mac": system_mac,
                "serial_number": serial_number,
                "system_description": system_description,
                "software_version": software_version,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_name"]) -> MetaOapg.properties.system_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sys_up_time"]) -> MetaOapg.properties.sys_up_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["os_version"]) -> MetaOapg.properties.os_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_mac"]) -> MetaOapg.properties.system_mac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_description"]) -> MetaOapg.properties.system_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["software_version"]) -> MetaOapg.properties.software_version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["system_name", "ip_address", "model", "sys_up_time", "os_version", "location", "system_mac", "serial_number", "system_description", "software_version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_name"]) -> typing.Union[MetaOapg.properties.system_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> typing.Union[MetaOapg.properties.ip_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> typing.Union[MetaOapg.properties.model, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sys_up_time"]) -> typing.Union[MetaOapg.properties.sys_up_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["os_version"]) -> typing.Union[MetaOapg.properties.os_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> typing.Union[MetaOapg.properties.location, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_mac"]) -> typing.Union[MetaOapg.properties.system_mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_description"]) -> typing.Union[MetaOapg.properties.system_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["software_version"]) -> typing.Union[MetaOapg.properties.software_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["system_name", "ip_address", "model", "sys_up_time", "os_version", "location", "system_mac", "serial_number", "system_description", "software_version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        system_name: typing.Union[MetaOapg.properties.system_name, str, schemas.Unset] = schemas.unset,
        ip_address: typing.Union[MetaOapg.properties.ip_address, str, schemas.Unset] = schemas.unset,
        model: typing.Union[MetaOapg.properties.model, str, schemas.Unset] = schemas.unset,
        sys_up_time: typing.Union[MetaOapg.properties.sys_up_time, str, schemas.Unset] = schemas.unset,
        os_version: typing.Union[MetaOapg.properties.os_version, str, schemas.Unset] = schemas.unset,
        location: typing.Union[MetaOapg.properties.location, str, schemas.Unset] = schemas.unset,
        system_mac: typing.Union[MetaOapg.properties.system_mac, str, schemas.Unset] = schemas.unset,
        serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
        system_description: typing.Union[MetaOapg.properties.system_description, str, schemas.Unset] = schemas.unset,
        software_version: typing.Union[MetaOapg.properties.software_version, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDeviceDetails':
        return super().__new__(
            cls,
            *_args,
            system_name=system_name,
            ip_address=ip_address,
            model=model,
            sys_up_time=sys_up_time,
            os_version=os_version,
            location=location,
            system_mac=system_mac,
            serial_number=serial_number,
            system_description=system_description,
            software_version=software_version,
            _configuration=_configuration,
            **kwargs,
        )
