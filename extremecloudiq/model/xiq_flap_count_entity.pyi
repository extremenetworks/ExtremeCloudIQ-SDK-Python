# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqFlapCountEntity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ExtremeCloud IQ FlapCount Point
    """


    class MetaOapg:
        required = {
            "timestamp",
        }
        
        class properties:
            timestamp = schemas.Int64Schema
            flap_count = schemas.NumberSchema
            sub_optimal_count = schemas.Int32Schema
            optimal_time_spent = schemas.Float64Schema
            __annotations__ = {
                "timestamp": timestamp,
                "flap_count": flap_count,
                "sub_optimal_count": sub_optimal_count,
                "optimal_time_spent": optimal_time_spent,
            }
    
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flap_count"]) -> MetaOapg.properties.flap_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sub_optimal_count"]) -> MetaOapg.properties.sub_optimal_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["optimal_time_spent"]) -> MetaOapg.properties.optimal_time_spent: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timestamp", "flap_count", "sub_optimal_count", "optimal_time_spent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flap_count"]) -> typing.Union[MetaOapg.properties.flap_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sub_optimal_count"]) -> typing.Union[MetaOapg.properties.sub_optimal_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["optimal_time_spent"]) -> typing.Union[MetaOapg.properties.optimal_time_spent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timestamp", "flap_count", "sub_optimal_count", "optimal_time_spent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, ],
        flap_count: typing.Union[MetaOapg.properties.flap_count, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        sub_optimal_count: typing.Union[MetaOapg.properties.sub_optimal_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        optimal_time_spent: typing.Union[MetaOapg.properties.optimal_time_spent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqFlapCountEntity':
        return super().__new__(
            cls,
            *_args,
            timestamp=timestamp,
            flap_count=flap_count,
            sub_optimal_count=sub_optimal_count,
            optimal_time_spent=optimal_time_spent,
            _configuration=_configuration,
            **kwargs,
        )
