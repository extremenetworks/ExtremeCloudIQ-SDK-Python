# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqRmDeviceMetdataResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    RM Metadata Response Class
    """


    class MetaOapg:
        
        class properties:
            
            
            class default_gateway(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'default_gateway':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class software_version(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'software_version':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class product_type(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'product_type':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class device_admin_state(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqDeviceAdminState']:
                        return XiqDeviceAdminState
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqDeviceAdminState'], typing.List['XiqDeviceAdminState']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'device_admin_state':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqDeviceAdminState':
                    return super().__getitem__(i)
            
            
            class country_code(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'country_code':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class managed_by(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'managed_by':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class sim_type(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqDeviceType']:
                        return XiqDeviceType
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqDeviceType'], typing.List['XiqDeviceType']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sim_type':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqDeviceType':
                    return super().__getitem__(i)
            __annotations__ = {
                "default_gateway": default_gateway,
                "software_version": software_version,
                "product_type": product_type,
                "device_admin_state": device_admin_state,
                "country_code": country_code,
                "managed_by": managed_by,
                "sim_type": sim_type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_gateway"]) -> MetaOapg.properties.default_gateway: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["software_version"]) -> MetaOapg.properties.software_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_type"]) -> MetaOapg.properties.product_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_admin_state"]) -> MetaOapg.properties.device_admin_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managed_by"]) -> MetaOapg.properties.managed_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sim_type"]) -> MetaOapg.properties.sim_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["default_gateway", "software_version", "product_type", "device_admin_state", "country_code", "managed_by", "sim_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_gateway"]) -> typing.Union[MetaOapg.properties.default_gateway, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["software_version"]) -> typing.Union[MetaOapg.properties.software_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_type"]) -> typing.Union[MetaOapg.properties.product_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_admin_state"]) -> typing.Union[MetaOapg.properties.device_admin_state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managed_by"]) -> typing.Union[MetaOapg.properties.managed_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sim_type"]) -> typing.Union[MetaOapg.properties.sim_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["default_gateway", "software_version", "product_type", "device_admin_state", "country_code", "managed_by", "sim_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        default_gateway: typing.Union[MetaOapg.properties.default_gateway, list, tuple, schemas.Unset] = schemas.unset,
        software_version: typing.Union[MetaOapg.properties.software_version, list, tuple, schemas.Unset] = schemas.unset,
        product_type: typing.Union[MetaOapg.properties.product_type, list, tuple, schemas.Unset] = schemas.unset,
        device_admin_state: typing.Union[MetaOapg.properties.device_admin_state, list, tuple, schemas.Unset] = schemas.unset,
        country_code: typing.Union[MetaOapg.properties.country_code, list, tuple, schemas.Unset] = schemas.unset,
        managed_by: typing.Union[MetaOapg.properties.managed_by, list, tuple, schemas.Unset] = schemas.unset,
        sim_type: typing.Union[MetaOapg.properties.sim_type, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqRmDeviceMetdataResponse':
        return super().__new__(
            cls,
            *_args,
            default_gateway=default_gateway,
            software_version=software_version,
            product_type=product_type,
            device_admin_state=device_admin_state,
            country_code=country_code,
            managed_by=managed_by,
            sim_type=sim_type,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_device_admin_state import XiqDeviceAdminState
from extremecloudiq.model.xiq_device_type import XiqDeviceType
