# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqCreateWirelessUsageCapacityCriteria(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            channel_utilization = schemas.Float64Schema
            lnk_err = schemas.Float64Schema
            retries = schemas.Float64Schema
            pkt_loss = schemas.Float64Schema
            interference = schemas.Float64Schema
            noise = schemas.Float64Schema
            noise_unit = schemas.StrSchema
            __annotations__ = {
                "channel_utilization": channel_utilization,
                "lnk_err": lnk_err,
                "retries": retries,
                "pkt_loss": pkt_loss,
                "interference": interference,
                "noise": noise,
                "noise_unit": noise_unit,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_utilization"]) -> MetaOapg.properties.channel_utilization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lnk_err"]) -> MetaOapg.properties.lnk_err: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["retries"]) -> MetaOapg.properties.retries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pkt_loss"]) -> MetaOapg.properties.pkt_loss: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interference"]) -> MetaOapg.properties.interference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noise"]) -> MetaOapg.properties.noise: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["noise_unit"]) -> MetaOapg.properties.noise_unit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel_utilization", "lnk_err", "retries", "pkt_loss", "interference", "noise", "noise_unit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_utilization"]) -> typing.Union[MetaOapg.properties.channel_utilization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lnk_err"]) -> typing.Union[MetaOapg.properties.lnk_err, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["retries"]) -> typing.Union[MetaOapg.properties.retries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pkt_loss"]) -> typing.Union[MetaOapg.properties.pkt_loss, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interference"]) -> typing.Union[MetaOapg.properties.interference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noise"]) -> typing.Union[MetaOapg.properties.noise, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["noise_unit"]) -> typing.Union[MetaOapg.properties.noise_unit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel_utilization", "lnk_err", "retries", "pkt_loss", "interference", "noise", "noise_unit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        channel_utilization: typing.Union[MetaOapg.properties.channel_utilization, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        lnk_err: typing.Union[MetaOapg.properties.lnk_err, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        retries: typing.Union[MetaOapg.properties.retries, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        pkt_loss: typing.Union[MetaOapg.properties.pkt_loss, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        interference: typing.Union[MetaOapg.properties.interference, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        noise: typing.Union[MetaOapg.properties.noise, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        noise_unit: typing.Union[MetaOapg.properties.noise_unit, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqCreateWirelessUsageCapacityCriteria':
        return super().__new__(
            cls,
            *_args,
            channel_utilization=channel_utilization,
            lnk_err=lnk_err,
            retries=retries,
            pkt_loss=pkt_loss,
            interference=interference,
            noise=noise,
            noise_unit=noise_unit,
            _configuration=_configuration,
            **kwargs,
        )
