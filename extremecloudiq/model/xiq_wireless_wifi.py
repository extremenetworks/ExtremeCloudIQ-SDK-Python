# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqWirelessWifi(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The unique identifier of the wireless interface
    """


    class MetaOapg:
        
        class properties:
            ssid_count = schemas.Int32Schema
            
            
            class ssids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ssids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            number_of_clients = schemas.Int64Schema
            channel_utilization = schemas.Int32Schema
            channel = schemas.Int32Schema
            channel_width = schemas.Int32Schema
            load_balancing = schemas.BoolSchema
            band_steering = schemas.BoolSchema
        
            @staticmethod
            def channel_utilization_details() -> typing.Type['XiqChannelUtilizationDetails']:
                return XiqChannelUtilizationDetails
            __annotations__ = {
                "ssid_count": ssid_count,
                "ssids": ssids,
                "number_of_clients": number_of_clients,
                "channel_utilization": channel_utilization,
                "channel": channel,
                "channel_width": channel_width,
                "load_balancing": load_balancing,
                "band_steering": band_steering,
                "channel_utilization_details": channel_utilization_details,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssid_count"]) -> MetaOapg.properties.ssid_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssids"]) -> MetaOapg.properties.ssids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_of_clients"]) -> MetaOapg.properties.number_of_clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_utilization"]) -> MetaOapg.properties.channel_utilization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_width"]) -> MetaOapg.properties.channel_width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["load_balancing"]) -> MetaOapg.properties.load_balancing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["band_steering"]) -> MetaOapg.properties.band_steering: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_utilization_details"]) -> 'XiqChannelUtilizationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ssid_count", "ssids", "number_of_clients", "channel_utilization", "channel", "channel_width", "load_balancing", "band_steering", "channel_utilization_details", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssid_count"]) -> typing.Union[MetaOapg.properties.ssid_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssids"]) -> typing.Union[MetaOapg.properties.ssids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_of_clients"]) -> typing.Union[MetaOapg.properties.number_of_clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_utilization"]) -> typing.Union[MetaOapg.properties.channel_utilization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union[MetaOapg.properties.channel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_width"]) -> typing.Union[MetaOapg.properties.channel_width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["load_balancing"]) -> typing.Union[MetaOapg.properties.load_balancing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["band_steering"]) -> typing.Union[MetaOapg.properties.band_steering, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_utilization_details"]) -> typing.Union['XiqChannelUtilizationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ssid_count", "ssids", "number_of_clients", "channel_utilization", "channel", "channel_width", "load_balancing", "band_steering", "channel_utilization_details", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ssid_count: typing.Union[MetaOapg.properties.ssid_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ssids: typing.Union[MetaOapg.properties.ssids, list, tuple, schemas.Unset] = schemas.unset,
        number_of_clients: typing.Union[MetaOapg.properties.number_of_clients, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel_utilization: typing.Union[MetaOapg.properties.channel_utilization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel: typing.Union[MetaOapg.properties.channel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel_width: typing.Union[MetaOapg.properties.channel_width, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        load_balancing: typing.Union[MetaOapg.properties.load_balancing, bool, schemas.Unset] = schemas.unset,
        band_steering: typing.Union[MetaOapg.properties.band_steering, bool, schemas.Unset] = schemas.unset,
        channel_utilization_details: typing.Union['XiqChannelUtilizationDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqWirelessWifi':
        return super().__new__(
            cls,
            *_args,
            ssid_count=ssid_count,
            ssids=ssids,
            number_of_clients=number_of_clients,
            channel_utilization=channel_utilization,
            channel=channel,
            channel_width=channel_width,
            load_balancing=load_balancing,
            band_steering=band_steering,
            channel_utilization_details=channel_utilization_details,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_channel_utilization_details import XiqChannelUtilizationDetails
