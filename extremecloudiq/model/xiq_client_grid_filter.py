# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqClientGridFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request body for Client Grid Filter
    """


    class MetaOapg:
        
        class properties:
            
            
            class site_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'site_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class device_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'device_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class number_filter(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqNumberFilter']:
                        return XiqNumberFilter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqNumberFilter'], typing.List['XiqNumberFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'number_filter':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqNumberFilter':
                    return super().__getitem__(i)
            
            
            class alias(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'alias':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class auth_methods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auth_methods':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class encryption_methods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'encryption_methods':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class operating_systems(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'operating_systems':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class ssids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ssids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class user_profiles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_profiles':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class frequency(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'frequency':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class category_assignments(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'category_assignments':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            has_authentication_issues = schemas.BoolSchema
            has_association_issues = schemas.BoolSchema
            has_ip_address_issues = schemas.BoolSchema
            has_roaming_issues = schemas.BoolSchema
            is_client_unhealthy = schemas.BoolSchema
            __annotations__ = {
                "site_ids": site_ids,
                "device_ids": device_ids,
                "number_filter": number_filter,
                "alias": alias,
                "auth_methods": auth_methods,
                "encryption_methods": encryption_methods,
                "operating_systems": operating_systems,
                "ssids": ssids,
                "user_profiles": user_profiles,
                "frequency": frequency,
                "category_assignments": category_assignments,
                "has_authentication_issues": has_authentication_issues,
                "has_association_issues": has_association_issues,
                "has_ip_address_issues": has_ip_address_issues,
                "has_roaming_issues": has_roaming_issues,
                "is_client_unhealthy": is_client_unhealthy,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["site_ids"]) -> MetaOapg.properties.site_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_ids"]) -> MetaOapg.properties.device_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_filter"]) -> MetaOapg.properties.number_filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias"]) -> MetaOapg.properties.alias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_methods"]) -> MetaOapg.properties.auth_methods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryption_methods"]) -> MetaOapg.properties.encryption_methods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operating_systems"]) -> MetaOapg.properties.operating_systems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssids"]) -> MetaOapg.properties.ssids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_profiles"]) -> MetaOapg.properties.user_profiles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_assignments"]) -> MetaOapg.properties.category_assignments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_authentication_issues"]) -> MetaOapg.properties.has_authentication_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_association_issues"]) -> MetaOapg.properties.has_association_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_ip_address_issues"]) -> MetaOapg.properties.has_ip_address_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_roaming_issues"]) -> MetaOapg.properties.has_roaming_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_client_unhealthy"]) -> MetaOapg.properties.is_client_unhealthy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["site_ids", "device_ids", "number_filter", "alias", "auth_methods", "encryption_methods", "operating_systems", "ssids", "user_profiles", "frequency", "category_assignments", "has_authentication_issues", "has_association_issues", "has_ip_address_issues", "has_roaming_issues", "is_client_unhealthy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["site_ids"]) -> typing.Union[MetaOapg.properties.site_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_ids"]) -> typing.Union[MetaOapg.properties.device_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_filter"]) -> typing.Union[MetaOapg.properties.number_filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias"]) -> typing.Union[MetaOapg.properties.alias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_methods"]) -> typing.Union[MetaOapg.properties.auth_methods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryption_methods"]) -> typing.Union[MetaOapg.properties.encryption_methods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operating_systems"]) -> typing.Union[MetaOapg.properties.operating_systems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssids"]) -> typing.Union[MetaOapg.properties.ssids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_profiles"]) -> typing.Union[MetaOapg.properties.user_profiles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union[MetaOapg.properties.frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_assignments"]) -> typing.Union[MetaOapg.properties.category_assignments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_authentication_issues"]) -> typing.Union[MetaOapg.properties.has_authentication_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_association_issues"]) -> typing.Union[MetaOapg.properties.has_association_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_ip_address_issues"]) -> typing.Union[MetaOapg.properties.has_ip_address_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_roaming_issues"]) -> typing.Union[MetaOapg.properties.has_roaming_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_client_unhealthy"]) -> typing.Union[MetaOapg.properties.is_client_unhealthy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["site_ids", "device_ids", "number_filter", "alias", "auth_methods", "encryption_methods", "operating_systems", "ssids", "user_profiles", "frequency", "category_assignments", "has_authentication_issues", "has_association_issues", "has_ip_address_issues", "has_roaming_issues", "is_client_unhealthy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        site_ids: typing.Union[MetaOapg.properties.site_ids, list, tuple, schemas.Unset] = schemas.unset,
        device_ids: typing.Union[MetaOapg.properties.device_ids, list, tuple, schemas.Unset] = schemas.unset,
        number_filter: typing.Union[MetaOapg.properties.number_filter, list, tuple, schemas.Unset] = schemas.unset,
        alias: typing.Union[MetaOapg.properties.alias, list, tuple, schemas.Unset] = schemas.unset,
        auth_methods: typing.Union[MetaOapg.properties.auth_methods, list, tuple, schemas.Unset] = schemas.unset,
        encryption_methods: typing.Union[MetaOapg.properties.encryption_methods, list, tuple, schemas.Unset] = schemas.unset,
        operating_systems: typing.Union[MetaOapg.properties.operating_systems, list, tuple, schemas.Unset] = schemas.unset,
        ssids: typing.Union[MetaOapg.properties.ssids, list, tuple, schemas.Unset] = schemas.unset,
        user_profiles: typing.Union[MetaOapg.properties.user_profiles, list, tuple, schemas.Unset] = schemas.unset,
        frequency: typing.Union[MetaOapg.properties.frequency, list, tuple, schemas.Unset] = schemas.unset,
        category_assignments: typing.Union[MetaOapg.properties.category_assignments, list, tuple, schemas.Unset] = schemas.unset,
        has_authentication_issues: typing.Union[MetaOapg.properties.has_authentication_issues, bool, schemas.Unset] = schemas.unset,
        has_association_issues: typing.Union[MetaOapg.properties.has_association_issues, bool, schemas.Unset] = schemas.unset,
        has_ip_address_issues: typing.Union[MetaOapg.properties.has_ip_address_issues, bool, schemas.Unset] = schemas.unset,
        has_roaming_issues: typing.Union[MetaOapg.properties.has_roaming_issues, bool, schemas.Unset] = schemas.unset,
        is_client_unhealthy: typing.Union[MetaOapg.properties.is_client_unhealthy, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqClientGridFilter':
        return super().__new__(
            cls,
            *_args,
            site_ids=site_ids,
            device_ids=device_ids,
            number_filter=number_filter,
            alias=alias,
            auth_methods=auth_methods,
            encryption_methods=encryption_methods,
            operating_systems=operating_systems,
            ssids=ssids,
            user_profiles=user_profiles,
            frequency=frequency,
            category_assignments=category_assignments,
            has_authentication_issues=has_authentication_issues,
            has_association_issues=has_association_issues,
            has_ip_address_issues=has_ip_address_issues,
            has_roaming_issues=has_roaming_issues,
            is_client_unhealthy=is_client_unhealthy,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_number_filter import XiqNumberFilter
