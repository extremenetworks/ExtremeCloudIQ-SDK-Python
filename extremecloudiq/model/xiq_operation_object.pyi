# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqOperationObject(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Long Running Operation (LRO) model
    """


    class MetaOapg:
        required = {
            "metadata",
            "id",
            "done",
        }
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['XiqOperationMetadata']:
                return XiqOperationMetadata
            done = schemas.BoolSchema
            response = schemas.DictSchema
        
            @staticmethod
            def error() -> typing.Type['XiqError']:
                return XiqError
            __annotations__ = {
                "id": id,
                "metadata": metadata,
                "done": done,
                "response": response,
                "error": error,
            }
    
    metadata: 'XiqOperationMetadata'
    id: MetaOapg.properties.id
    done: MetaOapg.properties.done
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'XiqOperationMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["done"]) -> MetaOapg.properties.done: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["response"]) -> MetaOapg.properties.response: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> 'XiqError': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "metadata", "done", "response", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'XiqOperationMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["done"]) -> MetaOapg.properties.done: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["response"]) -> typing.Union[MetaOapg.properties.response, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union['XiqError', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "metadata", "done", "response", "error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        metadata: 'XiqOperationMetadata',
        id: typing.Union[MetaOapg.properties.id, str, ],
        done: typing.Union[MetaOapg.properties.done, bool, ],
        response: typing.Union[MetaOapg.properties.response, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        error: typing.Union['XiqError', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqOperationObject':
        return super().__new__(
            cls,
            *_args,
            metadata=metadata,
            id=id,
            done=done,
            response=response,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_error import XiqError
from extremecloudiq.model.xiq_operation_metadata import XiqOperationMetadata
