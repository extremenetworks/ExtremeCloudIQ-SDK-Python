# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqThreadNetworkTopology(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The thread network topology
    """


    class MetaOapg:
        
        class properties:
            
            
            class neighbors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqThreadRouterNeighbor']:
                        return XiqThreadRouterNeighbor
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqThreadRouterNeighbor'], typing.List['XiqThreadRouterNeighbor']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'neighbors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqThreadRouterNeighbor':
                    return super().__getitem__(i)
            
            
            class routers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqThreadRouter']:
                        return XiqThreadRouter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqThreadRouter'], typing.List['XiqThreadRouter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'routers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqThreadRouter':
                    return super().__getitem__(i)
            
            
            class clients(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqClient']:
                        return XiqClient
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqClient'], typing.List['XiqClient']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clients':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqClient':
                    return super().__getitem__(i)
            __annotations__ = {
                "neighbors": neighbors,
                "routers": routers,
                "clients": clients,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neighbors"]) -> MetaOapg.properties.neighbors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["routers"]) -> MetaOapg.properties.routers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clients"]) -> MetaOapg.properties.clients: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["neighbors", "routers", "clients", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neighbors"]) -> typing.Union[MetaOapg.properties.neighbors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["routers"]) -> typing.Union[MetaOapg.properties.routers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clients"]) -> typing.Union[MetaOapg.properties.clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["neighbors", "routers", "clients", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        neighbors: typing.Union[MetaOapg.properties.neighbors, list, tuple, schemas.Unset] = schemas.unset,
        routers: typing.Union[MetaOapg.properties.routers, list, tuple, schemas.Unset] = schemas.unset,
        clients: typing.Union[MetaOapg.properties.clients, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqThreadNetworkTopology':
        return super().__new__(
            cls,
            *_args,
            neighbors=neighbors,
            routers=routers,
            clients=clients,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_client import XiqClient
from extremecloudiq.model.xiq_thread_router import XiqThreadRouter
from extremecloudiq.model.xiq_thread_router_neighbor import XiqThreadRouterNeighbor
