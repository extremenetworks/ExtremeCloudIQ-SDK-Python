# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqExternalUserDirectory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The setting for external user directory, AD or LDAP
    """


    class MetaOapg:
        required = {
            "user_group_attribute",
            "enable_radius_server_credential_caching",
            "entries",
            "local_check_interval",
            "cache_lifetime",
            "remote_check_interval",
            "external_user_directory_type",
            "ldap_retry_interval",
        }
        
        class properties:
            
            
            class ldap_retry_interval(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 200000000
                    inclusive_minimum = 60
            
            
            class local_check_interval(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 3600
                    inclusive_minimum = 30
            
            
            class remote_check_interval(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 3600
                    inclusive_minimum = 10
            enable_radius_server_credential_caching = schemas.BoolSchema
            
            
            class cache_lifetime(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 2592000
                    inclusive_minimum = 3600
            user_group_attribute = schemas.StrSchema
        
            @staticmethod
            def external_user_directory_type() -> typing.Type['XiqExternalUserDirectoryType']:
                return XiqExternalUserDirectoryType
            
            
            class entries(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqExternalUserDirectoryEntry']:
                        return XiqExternalUserDirectoryEntry
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqExternalUserDirectoryEntry'], typing.List['XiqExternalUserDirectoryEntry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'entries':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqExternalUserDirectoryEntry':
                    return super().__getitem__(i)
            __annotations__ = {
                "ldap_retry_interval": ldap_retry_interval,
                "local_check_interval": local_check_interval,
                "remote_check_interval": remote_check_interval,
                "enable_radius_server_credential_caching": enable_radius_server_credential_caching,
                "cache_lifetime": cache_lifetime,
                "user_group_attribute": user_group_attribute,
                "external_user_directory_type": external_user_directory_type,
                "entries": entries,
            }
    
    user_group_attribute: MetaOapg.properties.user_group_attribute
    enable_radius_server_credential_caching: MetaOapg.properties.enable_radius_server_credential_caching
    entries: MetaOapg.properties.entries
    local_check_interval: MetaOapg.properties.local_check_interval
    cache_lifetime: MetaOapg.properties.cache_lifetime
    remote_check_interval: MetaOapg.properties.remote_check_interval
    external_user_directory_type: 'XiqExternalUserDirectoryType'
    ldap_retry_interval: MetaOapg.properties.ldap_retry_interval
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ldap_retry_interval"]) -> MetaOapg.properties.ldap_retry_interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["local_check_interval"]) -> MetaOapg.properties.local_check_interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remote_check_interval"]) -> MetaOapg.properties.remote_check_interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_radius_server_credential_caching"]) -> MetaOapg.properties.enable_radius_server_credential_caching: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cache_lifetime"]) -> MetaOapg.properties.cache_lifetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_group_attribute"]) -> MetaOapg.properties.user_group_attribute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_user_directory_type"]) -> 'XiqExternalUserDirectoryType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entries"]) -> MetaOapg.properties.entries: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ldap_retry_interval", "local_check_interval", "remote_check_interval", "enable_radius_server_credential_caching", "cache_lifetime", "user_group_attribute", "external_user_directory_type", "entries", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ldap_retry_interval"]) -> MetaOapg.properties.ldap_retry_interval: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["local_check_interval"]) -> MetaOapg.properties.local_check_interval: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remote_check_interval"]) -> MetaOapg.properties.remote_check_interval: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_radius_server_credential_caching"]) -> MetaOapg.properties.enable_radius_server_credential_caching: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cache_lifetime"]) -> MetaOapg.properties.cache_lifetime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_group_attribute"]) -> MetaOapg.properties.user_group_attribute: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_user_directory_type"]) -> 'XiqExternalUserDirectoryType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entries"]) -> MetaOapg.properties.entries: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ldap_retry_interval", "local_check_interval", "remote_check_interval", "enable_radius_server_credential_caching", "cache_lifetime", "user_group_attribute", "external_user_directory_type", "entries", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        user_group_attribute: typing.Union[MetaOapg.properties.user_group_attribute, str, ],
        enable_radius_server_credential_caching: typing.Union[MetaOapg.properties.enable_radius_server_credential_caching, bool, ],
        entries: typing.Union[MetaOapg.properties.entries, list, tuple, ],
        local_check_interval: typing.Union[MetaOapg.properties.local_check_interval, decimal.Decimal, int, ],
        cache_lifetime: typing.Union[MetaOapg.properties.cache_lifetime, decimal.Decimal, int, ],
        remote_check_interval: typing.Union[MetaOapg.properties.remote_check_interval, decimal.Decimal, int, ],
        external_user_directory_type: 'XiqExternalUserDirectoryType',
        ldap_retry_interval: typing.Union[MetaOapg.properties.ldap_retry_interval, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqExternalUserDirectory':
        return super().__new__(
            cls,
            *_args,
            user_group_attribute=user_group_attribute,
            enable_radius_server_credential_caching=enable_radius_server_credential_caching,
            entries=entries,
            local_check_interval=local_check_interval,
            cache_lifetime=cache_lifetime,
            remote_check_interval=remote_check_interval,
            external_user_directory_type=external_user_directory_type,
            ldap_retry_interval=ldap_retry_interval,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_external_user_directory_entry import XiqExternalUserDirectoryEntry
from extremecloudiq.model.xiq_external_user_directory_type import XiqExternalUserDirectoryType
