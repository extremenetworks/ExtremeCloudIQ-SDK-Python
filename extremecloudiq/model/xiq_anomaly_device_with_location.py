# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAnomalyDeviceWithLocation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Copilot Anomaly details with Location
    """


    class MetaOapg:
        required = {
            "severity",
            "building_id",
            "device_id",
            "device_model",
            "interface_name",
            "device_make",
            "device_name",
            "location_name",
            "last_detected_time",
            "anomaly_type",
            "category",
            "switch_stack",
            "muted",
        }
        
        class properties:
            building_id = schemas.Int64Schema
            location_name = schemas.StrSchema
            muted = schemas.BoolSchema
        
            @staticmethod
            def severity() -> typing.Type['XiqAnomalySeverity']:
                return XiqAnomalySeverity
        
            @staticmethod
            def anomaly_type() -> typing.Type['XiqAnomalyType']:
                return XiqAnomalyType
            last_detected_time = schemas.Int64Schema
            device_id = schemas.Int64Schema
            device_name = schemas.StrSchema
            device_model = schemas.StrSchema
            device_make = schemas.StrSchema
            switch_stack = schemas.BoolSchema
        
            @staticmethod
            def category() -> typing.Type['XiqDeviceCategory']:
                return XiqDeviceCategory
            interface_name = schemas.StrSchema
            location_id = schemas.Int64Schema
            anomaly_id = schemas.StrSchema
            frequency = schemas.StrSchema
            channel_number = schemas.Int32Schema
            channel_mode = schemas.StrSchema
            recommended_action = schemas.StrSchema
            issue = schemas.StrSchema
            current_poe_mode = schemas.StrSchema
            device_status = schemas.BoolSchema
            anomaly_subtypes = schemas.StrSchema
        
            @staticmethod
            def missing_vlan_info() -> typing.Type['XiqMissingVlanInfo']:
                return XiqMissingVlanInfo
            __annotations__ = {
                "building_id": building_id,
                "location_name": location_name,
                "muted": muted,
                "severity": severity,
                "anomaly_type": anomaly_type,
                "last_detected_time": last_detected_time,
                "device_id": device_id,
                "device_name": device_name,
                "device_model": device_model,
                "device_make": device_make,
                "switch_stack": switch_stack,
                "category": category,
                "interface_name": interface_name,
                "location_id": location_id,
                "anomaly_id": anomaly_id,
                "frequency": frequency,
                "channel_number": channel_number,
                "channel_mode": channel_mode,
                "recommended_action": recommended_action,
                "issue": issue,
                "current_poe_mode": current_poe_mode,
                "device_status": device_status,
                "anomaly_subtypes": anomaly_subtypes,
                "missing_vlan_info": missing_vlan_info,
            }
    
    severity: 'XiqAnomalySeverity'
    building_id: MetaOapg.properties.building_id
    device_id: MetaOapg.properties.device_id
    device_model: MetaOapg.properties.device_model
    interface_name: MetaOapg.properties.interface_name
    device_make: MetaOapg.properties.device_make
    device_name: MetaOapg.properties.device_name
    location_name: MetaOapg.properties.location_name
    last_detected_time: MetaOapg.properties.last_detected_time
    anomaly_type: 'XiqAnomalyType'
    category: 'XiqDeviceCategory'
    switch_stack: MetaOapg.properties.switch_stack
    muted: MetaOapg.properties.muted
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["building_id"]) -> MetaOapg.properties.building_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_name"]) -> MetaOapg.properties.location_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["muted"]) -> MetaOapg.properties.muted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> 'XiqAnomalySeverity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anomaly_type"]) -> 'XiqAnomalyType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_detected_time"]) -> MetaOapg.properties.last_detected_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_model"]) -> MetaOapg.properties.device_model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_make"]) -> MetaOapg.properties.device_make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["switch_stack"]) -> MetaOapg.properties.switch_stack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'XiqDeviceCategory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interface_name"]) -> MetaOapg.properties.interface_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anomaly_id"]) -> MetaOapg.properties.anomaly_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_number"]) -> MetaOapg.properties.channel_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_mode"]) -> MetaOapg.properties.channel_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recommended_action"]) -> MetaOapg.properties.recommended_action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issue"]) -> MetaOapg.properties.issue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_poe_mode"]) -> MetaOapg.properties.current_poe_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_status"]) -> MetaOapg.properties.device_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anomaly_subtypes"]) -> MetaOapg.properties.anomaly_subtypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["missing_vlan_info"]) -> 'XiqMissingVlanInfo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["building_id", "location_name", "muted", "severity", "anomaly_type", "last_detected_time", "device_id", "device_name", "device_model", "device_make", "switch_stack", "category", "interface_name", "location_id", "anomaly_id", "frequency", "channel_number", "channel_mode", "recommended_action", "issue", "current_poe_mode", "device_status", "anomaly_subtypes", "missing_vlan_info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["building_id"]) -> MetaOapg.properties.building_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_name"]) -> MetaOapg.properties.location_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["muted"]) -> MetaOapg.properties.muted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> 'XiqAnomalySeverity': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anomaly_type"]) -> 'XiqAnomalyType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_detected_time"]) -> MetaOapg.properties.last_detected_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_model"]) -> MetaOapg.properties.device_model: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_make"]) -> MetaOapg.properties.device_make: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["switch_stack"]) -> MetaOapg.properties.switch_stack: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> 'XiqDeviceCategory': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interface_name"]) -> MetaOapg.properties.interface_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_id"]) -> typing.Union[MetaOapg.properties.location_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anomaly_id"]) -> typing.Union[MetaOapg.properties.anomaly_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union[MetaOapg.properties.frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_number"]) -> typing.Union[MetaOapg.properties.channel_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_mode"]) -> typing.Union[MetaOapg.properties.channel_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recommended_action"]) -> typing.Union[MetaOapg.properties.recommended_action, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issue"]) -> typing.Union[MetaOapg.properties.issue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_poe_mode"]) -> typing.Union[MetaOapg.properties.current_poe_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_status"]) -> typing.Union[MetaOapg.properties.device_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anomaly_subtypes"]) -> typing.Union[MetaOapg.properties.anomaly_subtypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["missing_vlan_info"]) -> typing.Union['XiqMissingVlanInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["building_id", "location_name", "muted", "severity", "anomaly_type", "last_detected_time", "device_id", "device_name", "device_model", "device_make", "switch_stack", "category", "interface_name", "location_id", "anomaly_id", "frequency", "channel_number", "channel_mode", "recommended_action", "issue", "current_poe_mode", "device_status", "anomaly_subtypes", "missing_vlan_info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        severity: 'XiqAnomalySeverity',
        building_id: typing.Union[MetaOapg.properties.building_id, decimal.Decimal, int, ],
        device_id: typing.Union[MetaOapg.properties.device_id, decimal.Decimal, int, ],
        device_model: typing.Union[MetaOapg.properties.device_model, str, ],
        interface_name: typing.Union[MetaOapg.properties.interface_name, str, ],
        device_make: typing.Union[MetaOapg.properties.device_make, str, ],
        device_name: typing.Union[MetaOapg.properties.device_name, str, ],
        location_name: typing.Union[MetaOapg.properties.location_name, str, ],
        last_detected_time: typing.Union[MetaOapg.properties.last_detected_time, decimal.Decimal, int, ],
        anomaly_type: 'XiqAnomalyType',
        category: 'XiqDeviceCategory',
        switch_stack: typing.Union[MetaOapg.properties.switch_stack, bool, ],
        muted: typing.Union[MetaOapg.properties.muted, bool, ],
        location_id: typing.Union[MetaOapg.properties.location_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        anomaly_id: typing.Union[MetaOapg.properties.anomaly_id, str, schemas.Unset] = schemas.unset,
        frequency: typing.Union[MetaOapg.properties.frequency, str, schemas.Unset] = schemas.unset,
        channel_number: typing.Union[MetaOapg.properties.channel_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel_mode: typing.Union[MetaOapg.properties.channel_mode, str, schemas.Unset] = schemas.unset,
        recommended_action: typing.Union[MetaOapg.properties.recommended_action, str, schemas.Unset] = schemas.unset,
        issue: typing.Union[MetaOapg.properties.issue, str, schemas.Unset] = schemas.unset,
        current_poe_mode: typing.Union[MetaOapg.properties.current_poe_mode, str, schemas.Unset] = schemas.unset,
        device_status: typing.Union[MetaOapg.properties.device_status, bool, schemas.Unset] = schemas.unset,
        anomaly_subtypes: typing.Union[MetaOapg.properties.anomaly_subtypes, str, schemas.Unset] = schemas.unset,
        missing_vlan_info: typing.Union['XiqMissingVlanInfo', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAnomalyDeviceWithLocation':
        return super().__new__(
            cls,
            *_args,
            severity=severity,
            building_id=building_id,
            device_id=device_id,
            device_model=device_model,
            interface_name=interface_name,
            device_make=device_make,
            device_name=device_name,
            location_name=location_name,
            last_detected_time=last_detected_time,
            anomaly_type=anomaly_type,
            category=category,
            switch_stack=switch_stack,
            muted=muted,
            location_id=location_id,
            anomaly_id=anomaly_id,
            frequency=frequency,
            channel_number=channel_number,
            channel_mode=channel_mode,
            recommended_action=recommended_action,
            issue=issue,
            current_poe_mode=current_poe_mode,
            device_status=device_status,
            anomaly_subtypes=anomaly_subtypes,
            missing_vlan_info=missing_vlan_info,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_anomaly_severity import XiqAnomalySeverity
from extremecloudiq.model.xiq_anomaly_type import XiqAnomalyType
from extremecloudiq.model.xiq_device_category import XiqDeviceCategory
from extremecloudiq.model.xiq_missing_vlan_info import XiqMissingVlanInfo
