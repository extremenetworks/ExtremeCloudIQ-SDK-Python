# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAvailableChannelInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            global_operating_class = schemas.Int32Schema
            
            
            class channel_cfi(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'channel_cfi':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class max_eirp(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Float64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, float, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'max_eirp':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "global_operating_class": global_operating_class,
                "channel_cfi": channel_cfi,
                "max_eirp": max_eirp,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["global_operating_class"]) -> MetaOapg.properties.global_operating_class: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_cfi"]) -> MetaOapg.properties.channel_cfi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_eirp"]) -> MetaOapg.properties.max_eirp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["global_operating_class", "channel_cfi", "max_eirp", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["global_operating_class"]) -> typing.Union[MetaOapg.properties.global_operating_class, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_cfi"]) -> typing.Union[MetaOapg.properties.channel_cfi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_eirp"]) -> typing.Union[MetaOapg.properties.max_eirp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["global_operating_class", "channel_cfi", "max_eirp", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        global_operating_class: typing.Union[MetaOapg.properties.global_operating_class, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel_cfi: typing.Union[MetaOapg.properties.channel_cfi, list, tuple, schemas.Unset] = schemas.unset,
        max_eirp: typing.Union[MetaOapg.properties.max_eirp, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAvailableChannelInfo':
        return super().__new__(
            cls,
            *_args,
            global_operating_class=global_operating_class,
            channel_cfi=channel_cfi,
            max_eirp=max_eirp,
            _configuration=_configuration,
            **kwargs,
        )
