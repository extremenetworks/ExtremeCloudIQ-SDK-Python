# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqIssueClientIpAddress(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Wireless clients issue ipAddress
    """


    class MetaOapg:
        
        class properties:
            date_time = schemas.Int64Schema
            issue_type = schemas.StrSchema
            device_name = schemas.StrSchema
            __annotations__ = {
                "date_time": date_time,
                "issue_type": issue_type,
                "device_name": device_name,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_time"]) -> MetaOapg.properties.date_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issue_type"]) -> MetaOapg.properties.issue_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_time", "issue_type", "device_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_time"]) -> typing.Union[MetaOapg.properties.date_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issue_type"]) -> typing.Union[MetaOapg.properties.issue_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_name"]) -> typing.Union[MetaOapg.properties.device_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_time", "issue_type", "device_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        date_time: typing.Union[MetaOapg.properties.date_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        issue_type: typing.Union[MetaOapg.properties.issue_type, str, schemas.Unset] = schemas.unset,
        device_name: typing.Union[MetaOapg.properties.device_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqIssueClientIpAddress':
        return super().__new__(
            cls,
            *_args,
            date_time=date_time,
            issue_type=issue_type,
            device_name=device_name,
            _configuration=_configuration,
            **kwargs,
        )
