# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqRmDeviceListRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request body for RM Device List
    """


    class MetaOapg:
        
        class properties:
            
            
            class site_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'site_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class sns(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sns':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class mac_addresses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mac_addresses':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class hostnames(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hostnames':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class default_gateway_ips(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'default_gateway_ips':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class product_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'product_types':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class firmware_versions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'firmware_versions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class country_codes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'country_codes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class managed_by(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'managed_by':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "site_ids": site_ids,
                "sns": sns,
                "mac_addresses": mac_addresses,
                "hostnames": hostnames,
                "default_gateway_ips": default_gateway_ips,
                "product_types": product_types,
                "firmware_versions": firmware_versions,
                "country_codes": country_codes,
                "managed_by": managed_by,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["site_ids"]) -> MetaOapg.properties.site_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sns"]) -> MetaOapg.properties.sns: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_addresses"]) -> MetaOapg.properties.mac_addresses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostnames"]) -> MetaOapg.properties.hostnames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_gateway_ips"]) -> MetaOapg.properties.default_gateway_ips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_types"]) -> MetaOapg.properties.product_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmware_versions"]) -> MetaOapg.properties.firmware_versions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_codes"]) -> MetaOapg.properties.country_codes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managed_by"]) -> MetaOapg.properties.managed_by: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["site_ids", "sns", "mac_addresses", "hostnames", "default_gateway_ips", "product_types", "firmware_versions", "country_codes", "managed_by", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["site_ids"]) -> typing.Union[MetaOapg.properties.site_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sns"]) -> typing.Union[MetaOapg.properties.sns, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_addresses"]) -> typing.Union[MetaOapg.properties.mac_addresses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostnames"]) -> typing.Union[MetaOapg.properties.hostnames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_gateway_ips"]) -> typing.Union[MetaOapg.properties.default_gateway_ips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_types"]) -> typing.Union[MetaOapg.properties.product_types, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmware_versions"]) -> typing.Union[MetaOapg.properties.firmware_versions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_codes"]) -> typing.Union[MetaOapg.properties.country_codes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managed_by"]) -> typing.Union[MetaOapg.properties.managed_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["site_ids", "sns", "mac_addresses", "hostnames", "default_gateway_ips", "product_types", "firmware_versions", "country_codes", "managed_by", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        site_ids: typing.Union[MetaOapg.properties.site_ids, list, tuple, schemas.Unset] = schemas.unset,
        sns: typing.Union[MetaOapg.properties.sns, list, tuple, schemas.Unset] = schemas.unset,
        mac_addresses: typing.Union[MetaOapg.properties.mac_addresses, list, tuple, schemas.Unset] = schemas.unset,
        hostnames: typing.Union[MetaOapg.properties.hostnames, list, tuple, schemas.Unset] = schemas.unset,
        default_gateway_ips: typing.Union[MetaOapg.properties.default_gateway_ips, list, tuple, schemas.Unset] = schemas.unset,
        product_types: typing.Union[MetaOapg.properties.product_types, list, tuple, schemas.Unset] = schemas.unset,
        firmware_versions: typing.Union[MetaOapg.properties.firmware_versions, list, tuple, schemas.Unset] = schemas.unset,
        country_codes: typing.Union[MetaOapg.properties.country_codes, list, tuple, schemas.Unset] = schemas.unset,
        managed_by: typing.Union[MetaOapg.properties.managed_by, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqRmDeviceListRequest':
        return super().__new__(
            cls,
            *_args,
            site_ids=site_ids,
            sns=sns,
            mac_addresses=mac_addresses,
            hostnames=hostnames,
            default_gateway_ips=default_gateway_ips,
            product_types=product_types,
            firmware_versions=firmware_versions,
            country_codes=country_codes,
            managed_by=managed_by,
            _configuration=_configuration,
            **kwargs,
        )
