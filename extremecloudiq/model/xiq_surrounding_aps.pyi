# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqSurroundingAps(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The data in the current page
    """


    class MetaOapg:
        
        class properties:
            mac = schemas.StrSchema
            ssid = schemas.StrSchema
            channel_width = schemas.StrSchema
            rssi = schemas.Int32Schema
            mode = schemas.StrSchema
            ap_type = schemas.Int64Schema
            is_extreme_device = schemas.StrSchema
            channel_utilization = schemas.Int64Schema
            channel_crc_rate = schemas.StrSchema
            client_num = schemas.Int64Schema
            __annotations__ = {
                "mac": mac,
                "ssid": ssid,
                "channel_width": channel_width,
                "rssi": rssi,
                "mode": mode,
                "ap_type": ap_type,
                "is_extreme_device": is_extreme_device,
                "channel_utilization": channel_utilization,
                "channel_crc_rate": channel_crc_rate,
                "client_num": client_num,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac"]) -> MetaOapg.properties.mac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssid"]) -> MetaOapg.properties.ssid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_width"]) -> MetaOapg.properties.channel_width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rssi"]) -> MetaOapg.properties.rssi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ap_type"]) -> MetaOapg.properties.ap_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_extreme_device"]) -> MetaOapg.properties.is_extreme_device: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_utilization"]) -> MetaOapg.properties.channel_utilization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_crc_rate"]) -> MetaOapg.properties.channel_crc_rate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_num"]) -> MetaOapg.properties.client_num: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mac", "ssid", "channel_width", "rssi", "mode", "ap_type", "is_extreme_device", "channel_utilization", "channel_crc_rate", "client_num", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac"]) -> typing.Union[MetaOapg.properties.mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssid"]) -> typing.Union[MetaOapg.properties.ssid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_width"]) -> typing.Union[MetaOapg.properties.channel_width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rssi"]) -> typing.Union[MetaOapg.properties.rssi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> typing.Union[MetaOapg.properties.mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ap_type"]) -> typing.Union[MetaOapg.properties.ap_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_extreme_device"]) -> typing.Union[MetaOapg.properties.is_extreme_device, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_utilization"]) -> typing.Union[MetaOapg.properties.channel_utilization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_crc_rate"]) -> typing.Union[MetaOapg.properties.channel_crc_rate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_num"]) -> typing.Union[MetaOapg.properties.client_num, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mac", "ssid", "channel_width", "rssi", "mode", "ap_type", "is_extreme_device", "channel_utilization", "channel_crc_rate", "client_num", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        mac: typing.Union[MetaOapg.properties.mac, str, schemas.Unset] = schemas.unset,
        ssid: typing.Union[MetaOapg.properties.ssid, str, schemas.Unset] = schemas.unset,
        channel_width: typing.Union[MetaOapg.properties.channel_width, str, schemas.Unset] = schemas.unset,
        rssi: typing.Union[MetaOapg.properties.rssi, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mode: typing.Union[MetaOapg.properties.mode, str, schemas.Unset] = schemas.unset,
        ap_type: typing.Union[MetaOapg.properties.ap_type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_extreme_device: typing.Union[MetaOapg.properties.is_extreme_device, str, schemas.Unset] = schemas.unset,
        channel_utilization: typing.Union[MetaOapg.properties.channel_utilization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel_crc_rate: typing.Union[MetaOapg.properties.channel_crc_rate, str, schemas.Unset] = schemas.unset,
        client_num: typing.Union[MetaOapg.properties.client_num, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqSurroundingAps':
        return super().__new__(
            cls,
            *_args,
            mac=mac,
            ssid=ssid,
            channel_width=channel_width,
            rssi=rssi,
            mode=mode,
            ap_type=ap_type,
            is_extreme_device=is_extreme_device,
            channel_utilization=channel_utilization,
            channel_crc_rate=channel_crc_rate,
            client_num=client_num,
            _configuration=_configuration,
            **kwargs,
        )
