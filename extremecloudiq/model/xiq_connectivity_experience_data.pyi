# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqConnectivityExperienceData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ExtremeCloud IQ Connectivity Experience data
    """


    class MetaOapg:
        required = {
            "trend_indicator",
            "quality_index_graph",
            "quality_index_value",
            "name",
            "client_type",
            "quality_index",
        }
        
        class properties:
            name = schemas.StrSchema
            quality_index = schemas.Int32Schema
        
            @staticmethod
            def quality_index_value() -> typing.Type['XiqQualityIndex']:
                return XiqQualityIndex
        
            @staticmethod
            def client_type() -> typing.Type['XiqClientType']:
                return XiqClientType
        
            @staticmethod
            def trend_indicator() -> typing.Type['XiqTrendIndicator']:
                return XiqTrendIndicator
            
            
            class quality_index_graph(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqDataPoint']:
                        return XiqDataPoint
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqDataPoint'], typing.List['XiqDataPoint']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'quality_index_graph':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqDataPoint':
                    return super().__getitem__(i)
            id = schemas.StrSchema
            info = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "quality_index": quality_index,
                "quality_index_value": quality_index_value,
                "client_type": client_type,
                "trend_indicator": trend_indicator,
                "quality_index_graph": quality_index_graph,
                "id": id,
                "info": info,
            }
    
    trend_indicator: 'XiqTrendIndicator'
    quality_index_graph: MetaOapg.properties.quality_index_graph
    quality_index_value: 'XiqQualityIndex'
    name: MetaOapg.properties.name
    client_type: 'XiqClientType'
    quality_index: MetaOapg.properties.quality_index
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quality_index"]) -> MetaOapg.properties.quality_index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quality_index_value"]) -> 'XiqQualityIndex': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_type"]) -> 'XiqClientType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trend_indicator"]) -> 'XiqTrendIndicator': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quality_index_graph"]) -> MetaOapg.properties.quality_index_graph: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info"]) -> MetaOapg.properties.info: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "quality_index", "quality_index_value", "client_type", "trend_indicator", "quality_index_graph", "id", "info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quality_index"]) -> MetaOapg.properties.quality_index: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quality_index_value"]) -> 'XiqQualityIndex': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_type"]) -> 'XiqClientType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trend_indicator"]) -> 'XiqTrendIndicator': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quality_index_graph"]) -> MetaOapg.properties.quality_index_graph: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info"]) -> typing.Union[MetaOapg.properties.info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "quality_index", "quality_index_value", "client_type", "trend_indicator", "quality_index_graph", "id", "info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        trend_indicator: 'XiqTrendIndicator',
        quality_index_graph: typing.Union[MetaOapg.properties.quality_index_graph, list, tuple, ],
        quality_index_value: 'XiqQualityIndex',
        name: typing.Union[MetaOapg.properties.name, str, ],
        client_type: 'XiqClientType',
        quality_index: typing.Union[MetaOapg.properties.quality_index, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        info: typing.Union[MetaOapg.properties.info, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqConnectivityExperienceData':
        return super().__new__(
            cls,
            *_args,
            trend_indicator=trend_indicator,
            quality_index_graph=quality_index_graph,
            quality_index_value=quality_index_value,
            name=name,
            client_type=client_type,
            quality_index=quality_index,
            id=id,
            info=info,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_client_type import XiqClientType
from extremecloudiq.model.xiq_data_point import XiqDataPoint
from extremecloudiq.model.xiq_quality_index import XiqQualityIndex
from extremecloudiq.model.xiq_trend_indicator import XiqTrendIndicator
