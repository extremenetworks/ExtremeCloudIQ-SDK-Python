# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAfcInputInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            serial_number = schemas.StrSchema
        
            @staticmethod
            def coordinates() -> typing.Type['XiqApCoordinates']:
                return XiqApCoordinates
        
            @staticmethod
            def elevation() -> typing.Type['XiqElevation']:
                return XiqElevation
        
            @staticmethod
            def ellipse() -> typing.Type['XiqEllipse']:
                return XiqEllipse
            
            
            class environment(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "INDOOR": "INDOOR",
                        "OUTDOOR": "OUTDOOR",
                        "UNDERSEAT": "UNDERSEAT",
                    }
                
                @schemas.classproperty
                def INDOOR(cls):
                    return cls("INDOOR")
                
                @schemas.classproperty
                def OUTDOOR(cls):
                    return cls("OUTDOOR")
                
                @schemas.classproperty
                def UNDERSEAT(cls):
                    return cls("UNDERSEAT")
            __annotations__ = {
                "serial_number": serial_number,
                "coordinates": coordinates,
                "elevation": elevation,
                "ellipse": ellipse,
                "environment": environment,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coordinates"]) -> 'XiqApCoordinates': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["elevation"]) -> 'XiqElevation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ellipse"]) -> 'XiqEllipse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["serial_number", "coordinates", "elevation", "ellipse", "environment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coordinates"]) -> typing.Union['XiqApCoordinates', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["elevation"]) -> typing.Union['XiqElevation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ellipse"]) -> typing.Union['XiqEllipse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> typing.Union[MetaOapg.properties.environment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["serial_number", "coordinates", "elevation", "ellipse", "environment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
        coordinates: typing.Union['XiqApCoordinates', schemas.Unset] = schemas.unset,
        elevation: typing.Union['XiqElevation', schemas.Unset] = schemas.unset,
        ellipse: typing.Union['XiqEllipse', schemas.Unset] = schemas.unset,
        environment: typing.Union[MetaOapg.properties.environment, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAfcInputInfo':
        return super().__new__(
            cls,
            *_args,
            serial_number=serial_number,
            coordinates=coordinates,
            elevation=elevation,
            ellipse=ellipse,
            environment=environment,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_ap_coordinates import XiqApCoordinates
from extremecloudiq.model.xiq_elevation import XiqElevation
from extremecloudiq.model.xiq_ellipse import XiqEllipse
