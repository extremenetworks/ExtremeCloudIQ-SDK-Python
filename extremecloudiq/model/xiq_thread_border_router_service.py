# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqThreadBorderRouterService(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The thread border router service
    """


    class MetaOapg:
        
        class properties:
            state = schemas.StrSchema
            nat64_local_prefix = schemas.StrSchema
            nat64_favored_prefix = schemas.StrSchema
            nat64_favored_preference = schemas.StrSchema
            nat64_omr_local_prefix = schemas.StrSchema
            nat64_omr_favored_prefix = schemas.StrSchema
            nat64_omr_favored_preference = schemas.StrSchema
            nat64_onlink_local_prefix = schemas.StrSchema
            nat64_onlink_favored_prefix = schemas.StrSchema
            nat64_onlink_favored_preference = schemas.StrSchema
            __annotations__ = {
                "state": state,
                "nat64_local_prefix": nat64_local_prefix,
                "nat64_favored_prefix": nat64_favored_prefix,
                "nat64_favored_preference": nat64_favored_preference,
                "nat64_omr_local_prefix": nat64_omr_local_prefix,
                "nat64_omr_favored_prefix": nat64_omr_favored_prefix,
                "nat64_omr_favored_preference": nat64_omr_favored_preference,
                "nat64_onlink_local_prefix": nat64_onlink_local_prefix,
                "nat64_onlink_favored_prefix": nat64_onlink_favored_prefix,
                "nat64_onlink_favored_preference": nat64_onlink_favored_preference,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64_local_prefix"]) -> MetaOapg.properties.nat64_local_prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64_favored_prefix"]) -> MetaOapg.properties.nat64_favored_prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64_favored_preference"]) -> MetaOapg.properties.nat64_favored_preference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64_omr_local_prefix"]) -> MetaOapg.properties.nat64_omr_local_prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64_omr_favored_prefix"]) -> MetaOapg.properties.nat64_omr_favored_prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64_omr_favored_preference"]) -> MetaOapg.properties.nat64_omr_favored_preference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64_onlink_local_prefix"]) -> MetaOapg.properties.nat64_onlink_local_prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64_onlink_favored_prefix"]) -> MetaOapg.properties.nat64_onlink_favored_prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64_onlink_favored_preference"]) -> MetaOapg.properties.nat64_onlink_favored_preference: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["state", "nat64_local_prefix", "nat64_favored_prefix", "nat64_favored_preference", "nat64_omr_local_prefix", "nat64_omr_favored_prefix", "nat64_omr_favored_preference", "nat64_onlink_local_prefix", "nat64_onlink_favored_prefix", "nat64_onlink_favored_preference", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64_local_prefix"]) -> typing.Union[MetaOapg.properties.nat64_local_prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64_favored_prefix"]) -> typing.Union[MetaOapg.properties.nat64_favored_prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64_favored_preference"]) -> typing.Union[MetaOapg.properties.nat64_favored_preference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64_omr_local_prefix"]) -> typing.Union[MetaOapg.properties.nat64_omr_local_prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64_omr_favored_prefix"]) -> typing.Union[MetaOapg.properties.nat64_omr_favored_prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64_omr_favored_preference"]) -> typing.Union[MetaOapg.properties.nat64_omr_favored_preference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64_onlink_local_prefix"]) -> typing.Union[MetaOapg.properties.nat64_onlink_local_prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64_onlink_favored_prefix"]) -> typing.Union[MetaOapg.properties.nat64_onlink_favored_prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64_onlink_favored_preference"]) -> typing.Union[MetaOapg.properties.nat64_onlink_favored_preference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["state", "nat64_local_prefix", "nat64_favored_prefix", "nat64_favored_preference", "nat64_omr_local_prefix", "nat64_omr_favored_prefix", "nat64_omr_favored_preference", "nat64_onlink_local_prefix", "nat64_onlink_favored_prefix", "nat64_onlink_favored_preference", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        nat64_local_prefix: typing.Union[MetaOapg.properties.nat64_local_prefix, str, schemas.Unset] = schemas.unset,
        nat64_favored_prefix: typing.Union[MetaOapg.properties.nat64_favored_prefix, str, schemas.Unset] = schemas.unset,
        nat64_favored_preference: typing.Union[MetaOapg.properties.nat64_favored_preference, str, schemas.Unset] = schemas.unset,
        nat64_omr_local_prefix: typing.Union[MetaOapg.properties.nat64_omr_local_prefix, str, schemas.Unset] = schemas.unset,
        nat64_omr_favored_prefix: typing.Union[MetaOapg.properties.nat64_omr_favored_prefix, str, schemas.Unset] = schemas.unset,
        nat64_omr_favored_preference: typing.Union[MetaOapg.properties.nat64_omr_favored_preference, str, schemas.Unset] = schemas.unset,
        nat64_onlink_local_prefix: typing.Union[MetaOapg.properties.nat64_onlink_local_prefix, str, schemas.Unset] = schemas.unset,
        nat64_onlink_favored_prefix: typing.Union[MetaOapg.properties.nat64_onlink_favored_prefix, str, schemas.Unset] = schemas.unset,
        nat64_onlink_favored_preference: typing.Union[MetaOapg.properties.nat64_onlink_favored_preference, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqThreadBorderRouterService':
        return super().__new__(
            cls,
            *_args,
            state=state,
            nat64_local_prefix=nat64_local_prefix,
            nat64_favored_prefix=nat64_favored_prefix,
            nat64_favored_preference=nat64_favored_preference,
            nat64_omr_local_prefix=nat64_omr_local_prefix,
            nat64_omr_favored_prefix=nat64_omr_favored_prefix,
            nat64_omr_favored_preference=nat64_omr_favored_preference,
            nat64_onlink_local_prefix=nat64_onlink_local_prefix,
            nat64_onlink_favored_prefix=nat64_onlink_favored_prefix,
            nat64_onlink_favored_preference=nat64_onlink_favored_preference,
            _configuration=_configuration,
            **kwargs,
        )
