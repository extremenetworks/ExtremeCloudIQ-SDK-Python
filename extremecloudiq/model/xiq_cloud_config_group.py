# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqCloudConfigGroup(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The CCG
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "name",
            "id",
            "predefined",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            name = schemas.StrSchema
            predefined = schemas.BoolSchema
            org_id = schemas.Int64Schema
            description = schemas.StrSchema
            read_only = schemas.BoolSchema
            zone_name = schemas.StrSchema
            zone_id = schemas.Int64Schema
            zone_location_id = schemas.Int64Schema
            
            
            class device_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'device_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "name": name,
                "predefined": predefined,
                "org_id": org_id,
                "description": description,
                "read_only": read_only,
                "zone_name": zone_name,
                "zone_id": zone_id,
                "zone_location_id": zone_location_id,
                "device_ids": device_ids,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    predefined: MetaOapg.properties.predefined
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["predefined"]) -> MetaOapg.properties.predefined: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["read_only"]) -> MetaOapg.properties.read_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zone_name"]) -> MetaOapg.properties.zone_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zone_id"]) -> MetaOapg.properties.zone_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zone_location_id"]) -> MetaOapg.properties.zone_location_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_ids"]) -> MetaOapg.properties.device_ids: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "name", "predefined", "org_id", "description", "read_only", "zone_name", "zone_id", "zone_location_id", "device_ids", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["predefined"]) -> MetaOapg.properties.predefined: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["read_only"]) -> typing.Union[MetaOapg.properties.read_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zone_name"]) -> typing.Union[MetaOapg.properties.zone_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zone_id"]) -> typing.Union[MetaOapg.properties.zone_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zone_location_id"]) -> typing.Union[MetaOapg.properties.zone_location_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_ids"]) -> typing.Union[MetaOapg.properties.device_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "name", "predefined", "org_id", "description", "read_only", "zone_name", "zone_id", "zone_location_id", "device_ids", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        predefined: typing.Union[MetaOapg.properties.predefined, bool, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        read_only: typing.Union[MetaOapg.properties.read_only, bool, schemas.Unset] = schemas.unset,
        zone_name: typing.Union[MetaOapg.properties.zone_name, str, schemas.Unset] = schemas.unset,
        zone_id: typing.Union[MetaOapg.properties.zone_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        zone_location_id: typing.Union[MetaOapg.properties.zone_location_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_ids: typing.Union[MetaOapg.properties.device_ids, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqCloudConfigGroup':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            name=name,
            id=id,
            predefined=predefined,
            org_id=org_id,
            description=description,
            read_only=read_only,
            zone_name=zone_name,
            zone_id=zone_id,
            zone_location_id=zone_location_id,
            device_ids=device_ids,
            _configuration=_configuration,
            **kwargs,
        )
