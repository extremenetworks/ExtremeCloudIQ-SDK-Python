# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqActiveDirectoryServer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The configuration of Active Directory Server
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "id",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            org_id = schemas.Int64Schema
            name = schemas.StrSchema
            description = schemas.StrSchema
            base_dn = schemas.StrSchema
            enable_tls = schemas.BoolSchema
            bind_dn = schemas.StrSchema
            bind_dn_password = schemas.StrSchema
            domain = schemas.StrSchema
            computer_ou = schemas.StrSchema
            domain_admin = schemas.StrSchema
            domain_admin_password = schemas.StrSchema
            enable_save_domain_admin_credentials = schemas.BoolSchema
            short_domain = schemas.StrSchema
            realm = schemas.StrSchema
        
            @staticmethod
            def base_dn_fetch_mode() -> typing.Type['XiqActiveDirectoryServerBaseDnFetchMode']:
                return XiqActiveDirectoryServerBaseDnFetchMode
            connection_setup_device_id = schemas.Int64Schema
            l3_address_profile_id = schemas.Int64Schema
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "org_id": org_id,
                "name": name,
                "description": description,
                "base_dn": base_dn,
                "enable_tls": enable_tls,
                "bind_dn": bind_dn,
                "bind_dn_password": bind_dn_password,
                "domain": domain,
                "computer_ou": computer_ou,
                "domain_admin": domain_admin,
                "domain_admin_password": domain_admin_password,
                "enable_save_domain_admin_credentials": enable_save_domain_admin_credentials,
                "short_domain": short_domain,
                "realm": realm,
                "base_dn_fetch_mode": base_dn_fetch_mode,
                "connection_setup_device_id": connection_setup_device_id,
                "l3_address_profile_id": l3_address_profile_id,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["base_dn"]) -> MetaOapg.properties.base_dn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_tls"]) -> MetaOapg.properties.enable_tls: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bind_dn"]) -> MetaOapg.properties.bind_dn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bind_dn_password"]) -> MetaOapg.properties.bind_dn_password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["computer_ou"]) -> MetaOapg.properties.computer_ou: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain_admin"]) -> MetaOapg.properties.domain_admin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain_admin_password"]) -> MetaOapg.properties.domain_admin_password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_save_domain_admin_credentials"]) -> MetaOapg.properties.enable_save_domain_admin_credentials: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["short_domain"]) -> MetaOapg.properties.short_domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["realm"]) -> MetaOapg.properties.realm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["base_dn_fetch_mode"]) -> 'XiqActiveDirectoryServerBaseDnFetchMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_setup_device_id"]) -> MetaOapg.properties.connection_setup_device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["l3_address_profile_id"]) -> MetaOapg.properties.l3_address_profile_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "name", "description", "base_dn", "enable_tls", "bind_dn", "bind_dn_password", "domain", "computer_ou", "domain_admin", "domain_admin_password", "enable_save_domain_admin_credentials", "short_domain", "realm", "base_dn_fetch_mode", "connection_setup_device_id", "l3_address_profile_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["base_dn"]) -> typing.Union[MetaOapg.properties.base_dn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_tls"]) -> typing.Union[MetaOapg.properties.enable_tls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bind_dn"]) -> typing.Union[MetaOapg.properties.bind_dn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bind_dn_password"]) -> typing.Union[MetaOapg.properties.bind_dn_password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["computer_ou"]) -> typing.Union[MetaOapg.properties.computer_ou, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain_admin"]) -> typing.Union[MetaOapg.properties.domain_admin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain_admin_password"]) -> typing.Union[MetaOapg.properties.domain_admin_password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_save_domain_admin_credentials"]) -> typing.Union[MetaOapg.properties.enable_save_domain_admin_credentials, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["short_domain"]) -> typing.Union[MetaOapg.properties.short_domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["realm"]) -> typing.Union[MetaOapg.properties.realm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["base_dn_fetch_mode"]) -> typing.Union['XiqActiveDirectoryServerBaseDnFetchMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_setup_device_id"]) -> typing.Union[MetaOapg.properties.connection_setup_device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["l3_address_profile_id"]) -> typing.Union[MetaOapg.properties.l3_address_profile_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "name", "description", "base_dn", "enable_tls", "bind_dn", "bind_dn_password", "domain", "computer_ou", "domain_admin", "domain_admin_password", "enable_save_domain_admin_credentials", "short_domain", "realm", "base_dn_fetch_mode", "connection_setup_device_id", "l3_address_profile_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        base_dn: typing.Union[MetaOapg.properties.base_dn, str, schemas.Unset] = schemas.unset,
        enable_tls: typing.Union[MetaOapg.properties.enable_tls, bool, schemas.Unset] = schemas.unset,
        bind_dn: typing.Union[MetaOapg.properties.bind_dn, str, schemas.Unset] = schemas.unset,
        bind_dn_password: typing.Union[MetaOapg.properties.bind_dn_password, str, schemas.Unset] = schemas.unset,
        domain: typing.Union[MetaOapg.properties.domain, str, schemas.Unset] = schemas.unset,
        computer_ou: typing.Union[MetaOapg.properties.computer_ou, str, schemas.Unset] = schemas.unset,
        domain_admin: typing.Union[MetaOapg.properties.domain_admin, str, schemas.Unset] = schemas.unset,
        domain_admin_password: typing.Union[MetaOapg.properties.domain_admin_password, str, schemas.Unset] = schemas.unset,
        enable_save_domain_admin_credentials: typing.Union[MetaOapg.properties.enable_save_domain_admin_credentials, bool, schemas.Unset] = schemas.unset,
        short_domain: typing.Union[MetaOapg.properties.short_domain, str, schemas.Unset] = schemas.unset,
        realm: typing.Union[MetaOapg.properties.realm, str, schemas.Unset] = schemas.unset,
        base_dn_fetch_mode: typing.Union['XiqActiveDirectoryServerBaseDnFetchMode', schemas.Unset] = schemas.unset,
        connection_setup_device_id: typing.Union[MetaOapg.properties.connection_setup_device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        l3_address_profile_id: typing.Union[MetaOapg.properties.l3_address_profile_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqActiveDirectoryServer':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            id=id,
            org_id=org_id,
            name=name,
            description=description,
            base_dn=base_dn,
            enable_tls=enable_tls,
            bind_dn=bind_dn,
            bind_dn_password=bind_dn_password,
            domain=domain,
            computer_ou=computer_ou,
            domain_admin=domain_admin,
            domain_admin_password=domain_admin_password,
            enable_save_domain_admin_credentials=enable_save_domain_admin_credentials,
            short_domain=short_domain,
            realm=realm,
            base_dn_fetch_mode=base_dn_fetch_mode,
            connection_setup_device_id=connection_setup_device_id,
            l3_address_profile_id=l3_address_profile_id,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_active_directory_server_base_dn_fetch_mode import XiqActiveDirectoryServerBaseDnFetchMode
