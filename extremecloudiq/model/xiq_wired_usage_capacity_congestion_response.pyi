# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.3.0.140
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqWiredUsageCapacityCongestionResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Response body for Wired Usage and Capacity - Wired Congestion widget
    """


    class MetaOapg:
        
        class properties:
            total_queue_tx_packets = schemas.Int64Schema
            total_queue_congestion_packets = schemas.Int64Schema
            total_congestion_percentage = schemas.Int64Schema
            __annotations__ = {
                "total_queue_tx_packets": total_queue_tx_packets,
                "total_queue_congestion_packets": total_queue_congestion_packets,
                "total_congestion_percentage": total_congestion_percentage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_queue_tx_packets"]) -> MetaOapg.properties.total_queue_tx_packets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_queue_congestion_packets"]) -> MetaOapg.properties.total_queue_congestion_packets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_congestion_percentage"]) -> MetaOapg.properties.total_congestion_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_queue_tx_packets", "total_queue_congestion_packets", "total_congestion_percentage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_queue_tx_packets"]) -> typing.Union[MetaOapg.properties.total_queue_tx_packets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_queue_congestion_packets"]) -> typing.Union[MetaOapg.properties.total_queue_congestion_packets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_congestion_percentage"]) -> typing.Union[MetaOapg.properties.total_congestion_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_queue_tx_packets", "total_queue_congestion_packets", "total_congestion_percentage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        total_queue_tx_packets: typing.Union[MetaOapg.properties.total_queue_tx_packets, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_queue_congestion_packets: typing.Union[MetaOapg.properties.total_queue_congestion_packets, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_congestion_percentage: typing.Union[MetaOapg.properties.total_congestion_percentage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqWiredUsageCapacityCongestionResponse':
        return super().__new__(
            cls,
            *_args,
            total_queue_tx_packets=total_queue_tx_packets,
            total_queue_congestion_packets=total_queue_congestion_packets,
            total_congestion_percentage=total_congestion_percentage,
            _configuration=_configuration,
            **kwargs,
        )
