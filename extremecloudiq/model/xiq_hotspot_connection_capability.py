# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqHotspotConnectionCapability(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The connection capability informs client devices about available network services.
    """


    class MetaOapg:
        required = {
            "protocol",
            "port_number",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def protocol() -> typing.Type['XiqHotspotConnectionCapabilityProtocol']:
                return XiqHotspotConnectionCapabilityProtocol
            
            
            class port_number(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 65535
                    inclusive_minimum = 0
        
            @staticmethod
            def status() -> typing.Type['XiqHotspotConnectionCapabilityStatus']:
                return XiqHotspotConnectionCapabilityStatus
            __annotations__ = {
                "protocol": protocol,
                "port_number": port_number,
                "status": status,
            }
    
    protocol: 'XiqHotspotConnectionCapabilityProtocol'
    port_number: MetaOapg.properties.port_number
    status: 'XiqHotspotConnectionCapabilityStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocol"]) -> 'XiqHotspotConnectionCapabilityProtocol': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_number"]) -> MetaOapg.properties.port_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'XiqHotspotConnectionCapabilityStatus': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["protocol", "port_number", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocol"]) -> 'XiqHotspotConnectionCapabilityProtocol': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_number"]) -> MetaOapg.properties.port_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'XiqHotspotConnectionCapabilityStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["protocol", "port_number", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        protocol: 'XiqHotspotConnectionCapabilityProtocol',
        port_number: typing.Union[MetaOapg.properties.port_number, decimal.Decimal, int, ],
        status: 'XiqHotspotConnectionCapabilityStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqHotspotConnectionCapability':
        return super().__new__(
            cls,
            *_args,
            protocol=protocol,
            port_number=port_number,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_hotspot_connection_capability_protocol import XiqHotspotConnectionCapabilityProtocol
from extremecloudiq.model.xiq_hotspot_connection_capability_status import XiqHotspotConnectionCapabilityStatus
