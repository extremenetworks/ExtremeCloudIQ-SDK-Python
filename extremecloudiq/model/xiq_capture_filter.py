# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqCaptureFilter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The filter criteria for packet capture
    """


    class MetaOapg:
        
        class properties:
            
            
            class mac_addr(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mac_addr':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class ip_addr(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ip_addr':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def protocol() -> typing.Type['XiqPolicyRuleProtocolType']:
                return XiqPolicyRuleProtocolType
            
            
            class protocol_number(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 255
                    inclusive_minimum = 0
            port = schemas.Int32Schema
            vlan = schemas.StrSchema
            wlan = schemas.StrSchema
            __annotations__ = {
                "mac_addr": mac_addr,
                "ip_addr": ip_addr,
                "protocol": protocol,
                "protocol_number": protocol_number,
                "port": port,
                "vlan": vlan,
                "wlan": wlan,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_addr"]) -> MetaOapg.properties.mac_addr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_addr"]) -> MetaOapg.properties.ip_addr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocol"]) -> 'XiqPolicyRuleProtocolType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protocol_number"]) -> MetaOapg.properties.protocol_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vlan"]) -> MetaOapg.properties.vlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wlan"]) -> MetaOapg.properties.wlan: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mac_addr", "ip_addr", "protocol", "protocol_number", "port", "vlan", "wlan", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_addr"]) -> typing.Union[MetaOapg.properties.mac_addr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_addr"]) -> typing.Union[MetaOapg.properties.ip_addr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocol"]) -> typing.Union['XiqPolicyRuleProtocolType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protocol_number"]) -> typing.Union[MetaOapg.properties.protocol_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[MetaOapg.properties.port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vlan"]) -> typing.Union[MetaOapg.properties.vlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wlan"]) -> typing.Union[MetaOapg.properties.wlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mac_addr", "ip_addr", "protocol", "protocol_number", "port", "vlan", "wlan", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        mac_addr: typing.Union[MetaOapg.properties.mac_addr, list, tuple, schemas.Unset] = schemas.unset,
        ip_addr: typing.Union[MetaOapg.properties.ip_addr, list, tuple, schemas.Unset] = schemas.unset,
        protocol: typing.Union['XiqPolicyRuleProtocolType', schemas.Unset] = schemas.unset,
        protocol_number: typing.Union[MetaOapg.properties.protocol_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        port: typing.Union[MetaOapg.properties.port, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        vlan: typing.Union[MetaOapg.properties.vlan, str, schemas.Unset] = schemas.unset,
        wlan: typing.Union[MetaOapg.properties.wlan, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqCaptureFilter':
        return super().__new__(
            cls,
            *_args,
            mac_addr=mac_addr,
            ip_addr=ip_addr,
            protocol=protocol,
            protocol_number=protocol_number,
            port=port,
            vlan=vlan,
            wlan=wlan,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_policy_rule_protocol_type import XiqPolicyRuleProtocolType
