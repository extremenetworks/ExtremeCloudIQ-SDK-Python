# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAddressProfileClassifiedEntry(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The address profile classified entries.
    """


    class MetaOapg:
        
        class properties:
            class_asgn_id = schemas.Int64Schema
            value = schemas.StrSchema
            description = schemas.StrSchema
            netmask = schemas.StrSchema
            ip_address_end = schemas.StrSchema
            wildcard_mask = schemas.StrSchema
            __annotations__ = {
                "class_asgn_id": class_asgn_id,
                "value": value,
                "description": description,
                "netmask": netmask,
                "ip_address_end": ip_address_end,
                "wildcard_mask": wildcard_mask,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["class_asgn_id"]) -> MetaOapg.properties.class_asgn_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netmask"]) -> MetaOapg.properties.netmask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address_end"]) -> MetaOapg.properties.ip_address_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wildcard_mask"]) -> MetaOapg.properties.wildcard_mask: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["class_asgn_id", "value", "description", "netmask", "ip_address_end", "wildcard_mask", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["class_asgn_id"]) -> typing.Union[MetaOapg.properties.class_asgn_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netmask"]) -> typing.Union[MetaOapg.properties.netmask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address_end"]) -> typing.Union[MetaOapg.properties.ip_address_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wildcard_mask"]) -> typing.Union[MetaOapg.properties.wildcard_mask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["class_asgn_id", "value", "description", "netmask", "ip_address_end", "wildcard_mask", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        class_asgn_id: typing.Union[MetaOapg.properties.class_asgn_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        netmask: typing.Union[MetaOapg.properties.netmask, str, schemas.Unset] = schemas.unset,
        ip_address_end: typing.Union[MetaOapg.properties.ip_address_end, str, schemas.Unset] = schemas.unset,
        wildcard_mask: typing.Union[MetaOapg.properties.wildcard_mask, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAddressProfileClassifiedEntry':
        return super().__new__(
            cls,
            *_args,
            class_asgn_id=class_asgn_id,
            value=value,
            description=description,
            netmask=netmask,
            ip_address_end=ip_address_end,
            wildcard_mask=wildcard_mask,
            _configuration=_configuration,
            **kwargs,
        )
