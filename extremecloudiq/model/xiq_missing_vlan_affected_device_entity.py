# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqMissingVlanAffectedDeviceEntity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The Missing Vlan affected devices
    """


    class MetaOapg:
        
        class properties:
            ap_name = schemas.StrSchema
            ap_device_id = schemas.StrSchema
            upstream_switch_interface = schemas.StrSchema
            
            
            class missing_vlans(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'missing_vlans':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "ap_name": ap_name,
                "ap_device_id": ap_device_id,
                "upstream_switch_interface": upstream_switch_interface,
                "missing_vlans": missing_vlans,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ap_name"]) -> MetaOapg.properties.ap_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ap_device_id"]) -> MetaOapg.properties.ap_device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upstream_switch_interface"]) -> MetaOapg.properties.upstream_switch_interface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["missing_vlans"]) -> MetaOapg.properties.missing_vlans: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ap_name", "ap_device_id", "upstream_switch_interface", "missing_vlans", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ap_name"]) -> typing.Union[MetaOapg.properties.ap_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ap_device_id"]) -> typing.Union[MetaOapg.properties.ap_device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upstream_switch_interface"]) -> typing.Union[MetaOapg.properties.upstream_switch_interface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["missing_vlans"]) -> typing.Union[MetaOapg.properties.missing_vlans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ap_name", "ap_device_id", "upstream_switch_interface", "missing_vlans", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ap_name: typing.Union[MetaOapg.properties.ap_name, str, schemas.Unset] = schemas.unset,
        ap_device_id: typing.Union[MetaOapg.properties.ap_device_id, str, schemas.Unset] = schemas.unset,
        upstream_switch_interface: typing.Union[MetaOapg.properties.upstream_switch_interface, str, schemas.Unset] = schemas.unset,
        missing_vlans: typing.Union[MetaOapg.properties.missing_vlans, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqMissingVlanAffectedDeviceEntity':
        return super().__new__(
            cls,
            *_args,
            ap_name=ap_name,
            ap_device_id=ap_device_id,
            upstream_switch_interface=upstream_switch_interface,
            missing_vlans=missing_vlans,
            _configuration=_configuration,
            **kwargs,
        )
