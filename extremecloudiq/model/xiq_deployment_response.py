# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDeploymentResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The configuration deployment response
    """


    class MetaOapg:
        
        class properties:
            deployment_id = schemas.Int64Schema
            
            
            class deployment_status(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['XiqDeploymentStatus']:
                        return XiqDeploymentStatus
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'XiqDeploymentStatus':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'XiqDeploymentStatus':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'XiqDeploymentStatus',
                ) -> 'deployment_status':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "deployment_id": deployment_id,
                "deployment_status": deployment_status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deployment_id"]) -> MetaOapg.properties.deployment_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deployment_status"]) -> MetaOapg.properties.deployment_status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deployment_id", "deployment_status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deployment_id"]) -> typing.Union[MetaOapg.properties.deployment_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deployment_status"]) -> typing.Union[MetaOapg.properties.deployment_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deployment_id", "deployment_status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        deployment_id: typing.Union[MetaOapg.properties.deployment_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        deployment_status: typing.Union[MetaOapg.properties.deployment_status, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDeploymentResponse':
        return super().__new__(
            cls,
            *_args,
            deployment_id=deployment_id,
            deployment_status=deployment_status,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_deployment_status import XiqDeploymentStatus
