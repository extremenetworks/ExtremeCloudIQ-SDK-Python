# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDeviceMonitorRefreshStatusResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The request for on demand refresh information.
    """


    class MetaOapg:
        required = {
            "percentage",
            "task_key",
            "status",
        }
        
        class properties:
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "INVALID": "INVALID",
                        "FINISHED": "FINISHED",
                        "UNFINISHED": "UNFINISHED",
                        "TASK_NOT_EXIST": "TASK_NOT_EXIST",
                        "UNKNOWN": "UNKNOWN",
                        "UNRECOGNIZED": "UNRECOGNIZED",
                    }
                
                @schemas.classproperty
                def INVALID(cls):
                    return cls("INVALID")
                
                @schemas.classproperty
                def FINISHED(cls):
                    return cls("FINISHED")
                
                @schemas.classproperty
                def UNFINISHED(cls):
                    return cls("UNFINISHED")
                
                @schemas.classproperty
                def TASK_NOT_EXIST(cls):
                    return cls("TASK_NOT_EXIST")
                
                @schemas.classproperty
                def UNKNOWN(cls):
                    return cls("UNKNOWN")
                
                @schemas.classproperty
                def UNRECOGNIZED(cls):
                    return cls("UNRECOGNIZED")
            task_key = schemas.StrSchema
            percentage = schemas.Int32Schema
            __annotations__ = {
                "status": status,
                "task_key": task_key,
                "percentage": percentage,
            }
    
    percentage: MetaOapg.properties.percentage
    task_key: MetaOapg.properties.task_key
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["task_key"]) -> MetaOapg.properties.task_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percentage"]) -> MetaOapg.properties.percentage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "task_key", "percentage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["task_key"]) -> MetaOapg.properties.task_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percentage"]) -> MetaOapg.properties.percentage: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "task_key", "percentage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        percentage: typing.Union[MetaOapg.properties.percentage, decimal.Decimal, int, ],
        task_key: typing.Union[MetaOapg.properties.task_key, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDeviceMonitorRefreshStatusResponse':
        return super().__new__(
            cls,
            *_args,
            percentage=percentage,
            task_key=task_key,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
