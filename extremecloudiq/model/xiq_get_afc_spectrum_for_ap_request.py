# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqGetAfcSpectrumForApRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            owner_id = schemas.Int64Schema
            site_name = schemas.StrSchema
            
            
            class region(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "US": "US",
                        "CA": "CA",
                        "UNRECOGNIZED": "UNRECOGNIZED",
                    }
                
                @schemas.classproperty
                def US(cls):
                    return cls("US")
                
                @schemas.classproperty
                def CA(cls):
                    return cls("CA")
                
                @schemas.classproperty
                def UNRECOGNIZED(cls):
                    return cls("UNRECOGNIZED")
            
            
            class input_info(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqAfcInputInfo']:
                        return XiqAfcInputInfo
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqAfcInputInfo'], typing.List['XiqAfcInputInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'input_info':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqAfcInputInfo':
                    return super().__getitem__(i)
            __annotations__ = {
                "owner_id": owner_id,
                "site_name": site_name,
                "region": region,
                "input_info": input_info,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["site_name"]) -> MetaOapg.properties.site_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["input_info"]) -> MetaOapg.properties.input_info: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["owner_id", "site_name", "region", "input_info", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["site_name"]) -> typing.Union[MetaOapg.properties.site_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["input_info"]) -> typing.Union[MetaOapg.properties.input_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["owner_id", "site_name", "region", "input_info", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        owner_id: typing.Union[MetaOapg.properties.owner_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        site_name: typing.Union[MetaOapg.properties.site_name, str, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        input_info: typing.Union[MetaOapg.properties.input_info, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqGetAfcSpectrumForApRequest':
        return super().__new__(
            cls,
            *_args,
            owner_id=owner_id,
            site_name=site_name,
            region=region,
            input_info=input_info,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_afc_input_info import XiqAfcInputInfo
