# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqSsid(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The SSID
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "name",
            "id",
            "broadcast_name",
            "predefined",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            name = schemas.StrSchema
            broadcast_name = schemas.StrSchema
            predefined = schemas.BoolSchema
            org_id = schemas.Int64Schema
            description = schemas.StrSchema
            advanced_settings_id = schemas.Int64Schema
            enable_user_profile_assignment = schemas.BoolSchema
            enable_radius_attribute_user_profile_assignment = schemas.BoolSchema
        
            @staticmethod
            def attribute_type() -> typing.Type['XiqAttributeType']:
                return XiqAttributeType
            attribute_key = schemas.Int32Schema
        
            @staticmethod
            def access_security() -> typing.Type['XiqSsidAccessSecurity']:
                return XiqSsidAccessSecurity
        
            @staticmethod
            def radius_client_profile() -> typing.Type['XiqRadiusClientProfile']:
                return XiqRadiusClientProfile
            default_user_profile = schemas.Int64Schema
            vendor_id = schemas.Int64Schema
            
            
            class user_profile_assignment_rules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqUserProfileAssignmentRule']:
                        return XiqUserProfileAssignmentRule
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqUserProfileAssignmentRule'], typing.List['XiqUserProfileAssignmentRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_profile_assignment_rules':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqUserProfileAssignmentRule':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "name": name,
                "broadcast_name": broadcast_name,
                "predefined": predefined,
                "org_id": org_id,
                "description": description,
                "advanced_settings_id": advanced_settings_id,
                "enable_user_profile_assignment": enable_user_profile_assignment,
                "enable_radius_attribute_user_profile_assignment": enable_radius_attribute_user_profile_assignment,
                "attribute_type": attribute_type,
                "attribute_key": attribute_key,
                "access_security": access_security,
                "radius_client_profile": radius_client_profile,
                "default_user_profile": default_user_profile,
                "vendor_id": vendor_id,
                "user_profile_assignment_rules": user_profile_assignment_rules,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    broadcast_name: MetaOapg.properties.broadcast_name
    predefined: MetaOapg.properties.predefined
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["broadcast_name"]) -> MetaOapg.properties.broadcast_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["predefined"]) -> MetaOapg.properties.predefined: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["advanced_settings_id"]) -> MetaOapg.properties.advanced_settings_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_user_profile_assignment"]) -> MetaOapg.properties.enable_user_profile_assignment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_radius_attribute_user_profile_assignment"]) -> MetaOapg.properties.enable_radius_attribute_user_profile_assignment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute_type"]) -> 'XiqAttributeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attribute_key"]) -> MetaOapg.properties.attribute_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_security"]) -> 'XiqSsidAccessSecurity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radius_client_profile"]) -> 'XiqRadiusClientProfile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_user_profile"]) -> MetaOapg.properties.default_user_profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor_id"]) -> MetaOapg.properties.vendor_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_profile_assignment_rules"]) -> MetaOapg.properties.user_profile_assignment_rules: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "name", "broadcast_name", "predefined", "org_id", "description", "advanced_settings_id", "enable_user_profile_assignment", "enable_radius_attribute_user_profile_assignment", "attribute_type", "attribute_key", "access_security", "radius_client_profile", "default_user_profile", "vendor_id", "user_profile_assignment_rules", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["broadcast_name"]) -> MetaOapg.properties.broadcast_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["predefined"]) -> MetaOapg.properties.predefined: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["advanced_settings_id"]) -> typing.Union[MetaOapg.properties.advanced_settings_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_user_profile_assignment"]) -> typing.Union[MetaOapg.properties.enable_user_profile_assignment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_radius_attribute_user_profile_assignment"]) -> typing.Union[MetaOapg.properties.enable_radius_attribute_user_profile_assignment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute_type"]) -> typing.Union['XiqAttributeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attribute_key"]) -> typing.Union[MetaOapg.properties.attribute_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_security"]) -> typing.Union['XiqSsidAccessSecurity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radius_client_profile"]) -> typing.Union['XiqRadiusClientProfile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_user_profile"]) -> typing.Union[MetaOapg.properties.default_user_profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor_id"]) -> typing.Union[MetaOapg.properties.vendor_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_profile_assignment_rules"]) -> typing.Union[MetaOapg.properties.user_profile_assignment_rules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "name", "broadcast_name", "predefined", "org_id", "description", "advanced_settings_id", "enable_user_profile_assignment", "enable_radius_attribute_user_profile_assignment", "attribute_type", "attribute_key", "access_security", "radius_client_profile", "default_user_profile", "vendor_id", "user_profile_assignment_rules", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        broadcast_name: typing.Union[MetaOapg.properties.broadcast_name, str, ],
        predefined: typing.Union[MetaOapg.properties.predefined, bool, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        advanced_settings_id: typing.Union[MetaOapg.properties.advanced_settings_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        enable_user_profile_assignment: typing.Union[MetaOapg.properties.enable_user_profile_assignment, bool, schemas.Unset] = schemas.unset,
        enable_radius_attribute_user_profile_assignment: typing.Union[MetaOapg.properties.enable_radius_attribute_user_profile_assignment, bool, schemas.Unset] = schemas.unset,
        attribute_type: typing.Union['XiqAttributeType', schemas.Unset] = schemas.unset,
        attribute_key: typing.Union[MetaOapg.properties.attribute_key, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        access_security: typing.Union['XiqSsidAccessSecurity', schemas.Unset] = schemas.unset,
        radius_client_profile: typing.Union['XiqRadiusClientProfile', schemas.Unset] = schemas.unset,
        default_user_profile: typing.Union[MetaOapg.properties.default_user_profile, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        vendor_id: typing.Union[MetaOapg.properties.vendor_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        user_profile_assignment_rules: typing.Union[MetaOapg.properties.user_profile_assignment_rules, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqSsid':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            name=name,
            id=id,
            broadcast_name=broadcast_name,
            predefined=predefined,
            org_id=org_id,
            description=description,
            advanced_settings_id=advanced_settings_id,
            enable_user_profile_assignment=enable_user_profile_assignment,
            enable_radius_attribute_user_profile_assignment=enable_radius_attribute_user_profile_assignment,
            attribute_type=attribute_type,
            attribute_key=attribute_key,
            access_security=access_security,
            radius_client_profile=radius_client_profile,
            default_user_profile=default_user_profile,
            vendor_id=vendor_id,
            user_profile_assignment_rules=user_profile_assignment_rules,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_attribute_type import XiqAttributeType
from extremecloudiq.model.xiq_radius_client_profile import XiqRadiusClientProfile
from extremecloudiq.model.xiq_ssid_access_security import XiqSsidAccessSecurity
from extremecloudiq.model.xiq_user_profile_assignment_rule import XiqUserProfileAssignmentRule
