# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqD360Filter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Request body for Surrounding aps filter
    """


    class MetaOapg:
        
        class properties:
            
            
            class number_filters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqD360NumberFilter']:
                        return XiqD360NumberFilter
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqD360NumberFilter'], typing.List['XiqD360NumberFilter']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'number_filters':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqD360NumberFilter':
                    return super().__getitem__(i)
            
            
            class ssids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ssids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "number_filters": number_filters,
                "ssids": ssids,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_filters"]) -> MetaOapg.properties.number_filters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssids"]) -> MetaOapg.properties.ssids: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["number_filters", "ssids", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_filters"]) -> typing.Union[MetaOapg.properties.number_filters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssids"]) -> typing.Union[MetaOapg.properties.ssids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["number_filters", "ssids", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        number_filters: typing.Union[MetaOapg.properties.number_filters, list, tuple, schemas.Unset] = schemas.unset,
        ssids: typing.Union[MetaOapg.properties.ssids, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqD360Filter':
        return super().__new__(
            cls,
            *_args,
            number_filters=number_filters,
            ssids=ssids,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_d360_number_filter import XiqD360NumberFilter
