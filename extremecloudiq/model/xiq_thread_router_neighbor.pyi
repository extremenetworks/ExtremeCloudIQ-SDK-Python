# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqThreadRouterNeighbor(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The Thread Router neighbors associate to ExtremeCloud IQ device
    """


    class MetaOapg:
        
        class properties:
            parent_device_id = schemas.Int64Schema
            child_device_id = schemas.Int64Schema
            connection_status = schemas.Int32Schema
            last_reported_time = schemas.Int64Schema
            __annotations__ = {
                "parent_device_id": parent_device_id,
                "child_device_id": child_device_id,
                "connection_status": connection_status,
                "last_reported_time": last_reported_time,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_device_id"]) -> MetaOapg.properties.parent_device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["child_device_id"]) -> MetaOapg.properties.child_device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_status"]) -> MetaOapg.properties.connection_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_reported_time"]) -> MetaOapg.properties.last_reported_time: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["parent_device_id", "child_device_id", "connection_status", "last_reported_time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_device_id"]) -> typing.Union[MetaOapg.properties.parent_device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["child_device_id"]) -> typing.Union[MetaOapg.properties.child_device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_status"]) -> typing.Union[MetaOapg.properties.connection_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_reported_time"]) -> typing.Union[MetaOapg.properties.last_reported_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["parent_device_id", "child_device_id", "connection_status", "last_reported_time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        parent_device_id: typing.Union[MetaOapg.properties.parent_device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        child_device_id: typing.Union[MetaOapg.properties.child_device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        connection_status: typing.Union[MetaOapg.properties.connection_status, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_reported_time: typing.Union[MetaOapg.properties.last_reported_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqThreadRouterNeighbor':
        return super().__new__(
            cls,
            *_args,
            parent_device_id=parent_device_id,
            child_device_id=child_device_id,
            connection_status=connection_status,
            last_reported_time=last_reported_time,
            _configuration=_configuration,
            **kwargs,
        )
