# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.3.0.140
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqWiredClientHealthGridResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Response for Wired Client Grid
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def connection_status() -> typing.Type['XiqClientConnectionStatus']:
                return XiqClientConnectionStatus
            client_hostname = schemas.StrSchema
            client_ip = schemas.StrSchema
            site = schemas.StrSchema
            building = schemas.StrSchema
            floor = schemas.StrSchema
            ipv4 = schemas.StrSchema
            ipv6 = schemas.StrSchema
            port_number = schemas.StrSchema
            switch_name = schemas.StrSchema
            vlan = schemas.Int32Schema
            operating_system = schemas.StrSchema
            mac = schemas.StrSchema
            username = schemas.StrSchema
            instant_port_profile = schemas.StrSchema
            total_congestion_packets = schemas.Int64Schema
            total_unicast_packets_percentage = schemas.Int32Schema
            total_multicast_packets_percentage = schemas.Int32Schema
            total_broadcast_packets_percentage = schemas.Int32Schema
            total_port_errors = schemas.Int64Schema
            has_ip_address_issues = schemas.BoolSchema
            has_port_congestions = schemas.BoolSchema
            has_traffic_anomalies = schemas.BoolSchema
            has_port_errors = schemas.BoolSchema
            device_id = schemas.Int64Schema
            client_id = schemas.Int64Schema
            __annotations__ = {
                "connection_status": connection_status,
                "client_hostname": client_hostname,
                "client_ip": client_ip,
                "site": site,
                "building": building,
                "floor": floor,
                "ipv4": ipv4,
                "ipv6": ipv6,
                "port_number": port_number,
                "switch_name": switch_name,
                "vlan": vlan,
                "operating_system": operating_system,
                "mac": mac,
                "username": username,
                "instant_port_profile": instant_port_profile,
                "total_congestion_packets": total_congestion_packets,
                "total_unicast_packets_percentage": total_unicast_packets_percentage,
                "total_multicast_packets_percentage": total_multicast_packets_percentage,
                "total_broadcast_packets_percentage": total_broadcast_packets_percentage,
                "total_port_errors": total_port_errors,
                "has_ip_address_issues": has_ip_address_issues,
                "has_port_congestions": has_port_congestions,
                "has_traffic_anomalies": has_traffic_anomalies,
                "has_port_errors": has_port_errors,
                "device_id": device_id,
                "client_id": client_id,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_status"]) -> 'XiqClientConnectionStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_hostname"]) -> MetaOapg.properties.client_hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_ip"]) -> MetaOapg.properties.client_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["site"]) -> MetaOapg.properties.site: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["building"]) -> MetaOapg.properties.building: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["floor"]) -> MetaOapg.properties.floor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv4"]) -> MetaOapg.properties.ipv4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6"]) -> MetaOapg.properties.ipv6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_number"]) -> MetaOapg.properties.port_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["switch_name"]) -> MetaOapg.properties.switch_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vlan"]) -> MetaOapg.properties.vlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operating_system"]) -> MetaOapg.properties.operating_system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac"]) -> MetaOapg.properties.mac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instant_port_profile"]) -> MetaOapg.properties.instant_port_profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_congestion_packets"]) -> MetaOapg.properties.total_congestion_packets: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_unicast_packets_percentage"]) -> MetaOapg.properties.total_unicast_packets_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_multicast_packets_percentage"]) -> MetaOapg.properties.total_multicast_packets_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_broadcast_packets_percentage"]) -> MetaOapg.properties.total_broadcast_packets_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_port_errors"]) -> MetaOapg.properties.total_port_errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_ip_address_issues"]) -> MetaOapg.properties.has_ip_address_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_port_congestions"]) -> MetaOapg.properties.has_port_congestions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_traffic_anomalies"]) -> MetaOapg.properties.has_traffic_anomalies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_port_errors"]) -> MetaOapg.properties.has_port_errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_id"]) -> MetaOapg.properties.client_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["connection_status", "client_hostname", "client_ip", "site", "building", "floor", "ipv4", "ipv6", "port_number", "switch_name", "vlan", "operating_system", "mac", "username", "instant_port_profile", "total_congestion_packets", "total_unicast_packets_percentage", "total_multicast_packets_percentage", "total_broadcast_packets_percentage", "total_port_errors", "has_ip_address_issues", "has_port_congestions", "has_traffic_anomalies", "has_port_errors", "device_id", "client_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_status"]) -> typing.Union['XiqClientConnectionStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_hostname"]) -> typing.Union[MetaOapg.properties.client_hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_ip"]) -> typing.Union[MetaOapg.properties.client_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["site"]) -> typing.Union[MetaOapg.properties.site, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["building"]) -> typing.Union[MetaOapg.properties.building, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["floor"]) -> typing.Union[MetaOapg.properties.floor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv4"]) -> typing.Union[MetaOapg.properties.ipv4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6"]) -> typing.Union[MetaOapg.properties.ipv6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_number"]) -> typing.Union[MetaOapg.properties.port_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["switch_name"]) -> typing.Union[MetaOapg.properties.switch_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vlan"]) -> typing.Union[MetaOapg.properties.vlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operating_system"]) -> typing.Union[MetaOapg.properties.operating_system, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac"]) -> typing.Union[MetaOapg.properties.mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instant_port_profile"]) -> typing.Union[MetaOapg.properties.instant_port_profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_congestion_packets"]) -> typing.Union[MetaOapg.properties.total_congestion_packets, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_unicast_packets_percentage"]) -> typing.Union[MetaOapg.properties.total_unicast_packets_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_multicast_packets_percentage"]) -> typing.Union[MetaOapg.properties.total_multicast_packets_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_broadcast_packets_percentage"]) -> typing.Union[MetaOapg.properties.total_broadcast_packets_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_port_errors"]) -> typing.Union[MetaOapg.properties.total_port_errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_ip_address_issues"]) -> typing.Union[MetaOapg.properties.has_ip_address_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_port_congestions"]) -> typing.Union[MetaOapg.properties.has_port_congestions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_traffic_anomalies"]) -> typing.Union[MetaOapg.properties.has_traffic_anomalies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_port_errors"]) -> typing.Union[MetaOapg.properties.has_port_errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_id"]) -> typing.Union[MetaOapg.properties.client_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connection_status", "client_hostname", "client_ip", "site", "building", "floor", "ipv4", "ipv6", "port_number", "switch_name", "vlan", "operating_system", "mac", "username", "instant_port_profile", "total_congestion_packets", "total_unicast_packets_percentage", "total_multicast_packets_percentage", "total_broadcast_packets_percentage", "total_port_errors", "has_ip_address_issues", "has_port_congestions", "has_traffic_anomalies", "has_port_errors", "device_id", "client_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        connection_status: typing.Union['XiqClientConnectionStatus', schemas.Unset] = schemas.unset,
        client_hostname: typing.Union[MetaOapg.properties.client_hostname, str, schemas.Unset] = schemas.unset,
        client_ip: typing.Union[MetaOapg.properties.client_ip, str, schemas.Unset] = schemas.unset,
        site: typing.Union[MetaOapg.properties.site, str, schemas.Unset] = schemas.unset,
        building: typing.Union[MetaOapg.properties.building, str, schemas.Unset] = schemas.unset,
        floor: typing.Union[MetaOapg.properties.floor, str, schemas.Unset] = schemas.unset,
        ipv4: typing.Union[MetaOapg.properties.ipv4, str, schemas.Unset] = schemas.unset,
        ipv6: typing.Union[MetaOapg.properties.ipv6, str, schemas.Unset] = schemas.unset,
        port_number: typing.Union[MetaOapg.properties.port_number, str, schemas.Unset] = schemas.unset,
        switch_name: typing.Union[MetaOapg.properties.switch_name, str, schemas.Unset] = schemas.unset,
        vlan: typing.Union[MetaOapg.properties.vlan, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        operating_system: typing.Union[MetaOapg.properties.operating_system, str, schemas.Unset] = schemas.unset,
        mac: typing.Union[MetaOapg.properties.mac, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        instant_port_profile: typing.Union[MetaOapg.properties.instant_port_profile, str, schemas.Unset] = schemas.unset,
        total_congestion_packets: typing.Union[MetaOapg.properties.total_congestion_packets, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_unicast_packets_percentage: typing.Union[MetaOapg.properties.total_unicast_packets_percentage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_multicast_packets_percentage: typing.Union[MetaOapg.properties.total_multicast_packets_percentage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_broadcast_packets_percentage: typing.Union[MetaOapg.properties.total_broadcast_packets_percentage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_port_errors: typing.Union[MetaOapg.properties.total_port_errors, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        has_ip_address_issues: typing.Union[MetaOapg.properties.has_ip_address_issues, bool, schemas.Unset] = schemas.unset,
        has_port_congestions: typing.Union[MetaOapg.properties.has_port_congestions, bool, schemas.Unset] = schemas.unset,
        has_traffic_anomalies: typing.Union[MetaOapg.properties.has_traffic_anomalies, bool, schemas.Unset] = schemas.unset,
        has_port_errors: typing.Union[MetaOapg.properties.has_port_errors, bool, schemas.Unset] = schemas.unset,
        device_id: typing.Union[MetaOapg.properties.device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        client_id: typing.Union[MetaOapg.properties.client_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqWiredClientHealthGridResponse':
        return super().__new__(
            cls,
            *_args,
            connection_status=connection_status,
            client_hostname=client_hostname,
            client_ip=client_ip,
            site=site,
            building=building,
            floor=floor,
            ipv4=ipv4,
            ipv6=ipv6,
            port_number=port_number,
            switch_name=switch_name,
            vlan=vlan,
            operating_system=operating_system,
            mac=mac,
            username=username,
            instant_port_profile=instant_port_profile,
            total_congestion_packets=total_congestion_packets,
            total_unicast_packets_percentage=total_unicast_packets_percentage,
            total_multicast_packets_percentage=total_multicast_packets_percentage,
            total_broadcast_packets_percentage=total_broadcast_packets_percentage,
            total_port_errors=total_port_errors,
            has_ip_address_issues=has_ip_address_issues,
            has_port_congestions=has_port_congestions,
            has_traffic_anomalies=has_traffic_anomalies,
            has_port_errors=has_port_errors,
            device_id=device_id,
            client_id=client_id,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_client_connection_status import XiqClientConnectionStatus
