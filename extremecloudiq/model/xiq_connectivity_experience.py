# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.3.0.140
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqConnectivityExperience(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Get connectivity experience
    """


    class MetaOapg:
        
        class properties:
            start_timestamp = schemas.Int64Schema
            device_name = schemas.StrSchema
            device_id = schemas.Int64Schema
            ssid = schemas.StrSchema
            association_duration = schemas.Int64Schema
            auth_method = schemas.StrSchema
            authentication_response_time = schemas.Int32Schema
            authentication_status = schemas.StrSchema
            dhcp_server_ip = schemas.StrSchema
            dhcp_server_response_time = schemas.Int32Schema
            dhcp_ip_address_obtained = schemas.StrSchema
            default_gateway_ip = schemas.StrSchema
            default_gateway_round_trip_delay_time = schemas.Int32Schema
            dns_server_ip = schemas.StrSchema
            dns_server_response_time = schemas.Int32Schema
            
            
            class association_circle_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SUCCESS": "SUCCESS",
                        "INVALID": "INVALID",
                        "DISABLED": "DISABLED",
                        "ERROR": "ERROR",
                    }
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("SUCCESS")
                
                @schemas.classproperty
                def INVALID(cls):
                    return cls("INVALID")
                
                @schemas.classproperty
                def DISABLED(cls):
                    return cls("DISABLED")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
            
            
            class auth_circle_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SUCCESS": "SUCCESS",
                        "INVALID": "INVALID",
                        "DISABLED": "DISABLED",
                        "ERROR": "ERROR",
                    }
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("SUCCESS")
                
                @schemas.classproperty
                def INVALID(cls):
                    return cls("INVALID")
                
                @schemas.classproperty
                def DISABLED(cls):
                    return cls("DISABLED")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
            
            
            class dhcp_circle_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SUCCESS": "SUCCESS",
                        "INVALID": "INVALID",
                        "DISABLED": "DISABLED",
                        "ERROR": "ERROR",
                    }
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("SUCCESS")
                
                @schemas.classproperty
                def INVALID(cls):
                    return cls("INVALID")
                
                @schemas.classproperty
                def DISABLED(cls):
                    return cls("DISABLED")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
            
            
            class dns_circle_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SUCCESS": "SUCCESS",
                        "INVALID": "INVALID",
                        "DISABLED": "DISABLED",
                        "ERROR": "ERROR",
                    }
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("SUCCESS")
                
                @schemas.classproperty
                def INVALID(cls):
                    return cls("INVALID")
                
                @schemas.classproperty
                def DISABLED(cls):
                    return cls("DISABLED")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
            
            
            class gateway_circle_status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "SUCCESS": "SUCCESS",
                        "INVALID": "INVALID",
                        "DISABLED": "DISABLED",
                        "ERROR": "ERROR",
                    }
                
                @schemas.classproperty
                def SUCCESS(cls):
                    return cls("SUCCESS")
                
                @schemas.classproperty
                def INVALID(cls):
                    return cls("INVALID")
                
                @schemas.classproperty
                def DISABLED(cls):
                    return cls("DISABLED")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
            __annotations__ = {
                "start_timestamp": start_timestamp,
                "device_name": device_name,
                "device_id": device_id,
                "ssid": ssid,
                "association_duration": association_duration,
                "auth_method": auth_method,
                "authentication_response_time": authentication_response_time,
                "authentication_status": authentication_status,
                "dhcp_server_ip": dhcp_server_ip,
                "dhcp_server_response_time": dhcp_server_response_time,
                "dhcp_ip_address_obtained": dhcp_ip_address_obtained,
                "default_gateway_ip": default_gateway_ip,
                "default_gateway_round_trip_delay_time": default_gateway_round_trip_delay_time,
                "dns_server_ip": dns_server_ip,
                "dns_server_response_time": dns_server_response_time,
                "association_circle_status": association_circle_status,
                "auth_circle_status": auth_circle_status,
                "dhcp_circle_status": dhcp_circle_status,
                "dns_circle_status": dns_circle_status,
                "gateway_circle_status": gateway_circle_status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_timestamp"]) -> MetaOapg.properties.start_timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssid"]) -> MetaOapg.properties.ssid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["association_duration"]) -> MetaOapg.properties.association_duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_method"]) -> MetaOapg.properties.auth_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_response_time"]) -> MetaOapg.properties.authentication_response_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_status"]) -> MetaOapg.properties.authentication_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dhcp_server_ip"]) -> MetaOapg.properties.dhcp_server_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dhcp_server_response_time"]) -> MetaOapg.properties.dhcp_server_response_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dhcp_ip_address_obtained"]) -> MetaOapg.properties.dhcp_ip_address_obtained: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_gateway_ip"]) -> MetaOapg.properties.default_gateway_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_gateway_round_trip_delay_time"]) -> MetaOapg.properties.default_gateway_round_trip_delay_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dns_server_ip"]) -> MetaOapg.properties.dns_server_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dns_server_response_time"]) -> MetaOapg.properties.dns_server_response_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["association_circle_status"]) -> MetaOapg.properties.association_circle_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_circle_status"]) -> MetaOapg.properties.auth_circle_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dhcp_circle_status"]) -> MetaOapg.properties.dhcp_circle_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dns_circle_status"]) -> MetaOapg.properties.dns_circle_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gateway_circle_status"]) -> MetaOapg.properties.gateway_circle_status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["start_timestamp", "device_name", "device_id", "ssid", "association_duration", "auth_method", "authentication_response_time", "authentication_status", "dhcp_server_ip", "dhcp_server_response_time", "dhcp_ip_address_obtained", "default_gateway_ip", "default_gateway_round_trip_delay_time", "dns_server_ip", "dns_server_response_time", "association_circle_status", "auth_circle_status", "dhcp_circle_status", "dns_circle_status", "gateway_circle_status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_timestamp"]) -> typing.Union[MetaOapg.properties.start_timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_name"]) -> typing.Union[MetaOapg.properties.device_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssid"]) -> typing.Union[MetaOapg.properties.ssid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["association_duration"]) -> typing.Union[MetaOapg.properties.association_duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_method"]) -> typing.Union[MetaOapg.properties.auth_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_response_time"]) -> typing.Union[MetaOapg.properties.authentication_response_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_status"]) -> typing.Union[MetaOapg.properties.authentication_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dhcp_server_ip"]) -> typing.Union[MetaOapg.properties.dhcp_server_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dhcp_server_response_time"]) -> typing.Union[MetaOapg.properties.dhcp_server_response_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dhcp_ip_address_obtained"]) -> typing.Union[MetaOapg.properties.dhcp_ip_address_obtained, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_gateway_ip"]) -> typing.Union[MetaOapg.properties.default_gateway_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_gateway_round_trip_delay_time"]) -> typing.Union[MetaOapg.properties.default_gateway_round_trip_delay_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dns_server_ip"]) -> typing.Union[MetaOapg.properties.dns_server_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dns_server_response_time"]) -> typing.Union[MetaOapg.properties.dns_server_response_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["association_circle_status"]) -> typing.Union[MetaOapg.properties.association_circle_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_circle_status"]) -> typing.Union[MetaOapg.properties.auth_circle_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dhcp_circle_status"]) -> typing.Union[MetaOapg.properties.dhcp_circle_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dns_circle_status"]) -> typing.Union[MetaOapg.properties.dns_circle_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gateway_circle_status"]) -> typing.Union[MetaOapg.properties.gateway_circle_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["start_timestamp", "device_name", "device_id", "ssid", "association_duration", "auth_method", "authentication_response_time", "authentication_status", "dhcp_server_ip", "dhcp_server_response_time", "dhcp_ip_address_obtained", "default_gateway_ip", "default_gateway_round_trip_delay_time", "dns_server_ip", "dns_server_response_time", "association_circle_status", "auth_circle_status", "dhcp_circle_status", "dns_circle_status", "gateway_circle_status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        start_timestamp: typing.Union[MetaOapg.properties.start_timestamp, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_name: typing.Union[MetaOapg.properties.device_name, str, schemas.Unset] = schemas.unset,
        device_id: typing.Union[MetaOapg.properties.device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ssid: typing.Union[MetaOapg.properties.ssid, str, schemas.Unset] = schemas.unset,
        association_duration: typing.Union[MetaOapg.properties.association_duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        auth_method: typing.Union[MetaOapg.properties.auth_method, str, schemas.Unset] = schemas.unset,
        authentication_response_time: typing.Union[MetaOapg.properties.authentication_response_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        authentication_status: typing.Union[MetaOapg.properties.authentication_status, str, schemas.Unset] = schemas.unset,
        dhcp_server_ip: typing.Union[MetaOapg.properties.dhcp_server_ip, str, schemas.Unset] = schemas.unset,
        dhcp_server_response_time: typing.Union[MetaOapg.properties.dhcp_server_response_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dhcp_ip_address_obtained: typing.Union[MetaOapg.properties.dhcp_ip_address_obtained, str, schemas.Unset] = schemas.unset,
        default_gateway_ip: typing.Union[MetaOapg.properties.default_gateway_ip, str, schemas.Unset] = schemas.unset,
        default_gateway_round_trip_delay_time: typing.Union[MetaOapg.properties.default_gateway_round_trip_delay_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dns_server_ip: typing.Union[MetaOapg.properties.dns_server_ip, str, schemas.Unset] = schemas.unset,
        dns_server_response_time: typing.Union[MetaOapg.properties.dns_server_response_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        association_circle_status: typing.Union[MetaOapg.properties.association_circle_status, str, schemas.Unset] = schemas.unset,
        auth_circle_status: typing.Union[MetaOapg.properties.auth_circle_status, str, schemas.Unset] = schemas.unset,
        dhcp_circle_status: typing.Union[MetaOapg.properties.dhcp_circle_status, str, schemas.Unset] = schemas.unset,
        dns_circle_status: typing.Union[MetaOapg.properties.dns_circle_status, str, schemas.Unset] = schemas.unset,
        gateway_circle_status: typing.Union[MetaOapg.properties.gateway_circle_status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqConnectivityExperience':
        return super().__new__(
            cls,
            *_args,
            start_timestamp=start_timestamp,
            device_name=device_name,
            device_id=device_id,
            ssid=ssid,
            association_duration=association_duration,
            auth_method=auth_method,
            authentication_response_time=authentication_response_time,
            authentication_status=authentication_status,
            dhcp_server_ip=dhcp_server_ip,
            dhcp_server_response_time=dhcp_server_response_time,
            dhcp_ip_address_obtained=dhcp_ip_address_obtained,
            default_gateway_ip=default_gateway_ip,
            default_gateway_round_trip_delay_time=default_gateway_round_trip_delay_time,
            dns_server_ip=dns_server_ip,
            dns_server_response_time=dns_server_response_time,
            association_circle_status=association_circle_status,
            auth_circle_status=auth_circle_status,
            dhcp_circle_status=dhcp_circle_status,
            dns_circle_status=dns_circle_status,
            gateway_circle_status=gateway_circle_status,
            _configuration=_configuration,
            **kwargs,
        )
