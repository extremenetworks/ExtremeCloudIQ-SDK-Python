# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.3.0.140
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqWallType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "attenuation",
            "color",
            "org_id",
            "owner_id",
            "name",
            "id",
            "predefined",
        }
        
        class properties:
            id = schemas.Int64Schema
            name = schemas.StrSchema
            attenuation = schemas.Float64Schema
            color = schemas.StrSchema
            owner_id = schemas.Int64Schema
            org_id = schemas.Int64Schema
            predefined = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "attenuation": attenuation,
                "color": color,
                "owner_id": owner_id,
                "org_id": org_id,
                "predefined": predefined,
            }
    
    attenuation: MetaOapg.properties.attenuation
    color: MetaOapg.properties.color
    org_id: MetaOapg.properties.org_id
    owner_id: MetaOapg.properties.owner_id
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    predefined: MetaOapg.properties.predefined
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attenuation"]) -> MetaOapg.properties.attenuation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["predefined"]) -> MetaOapg.properties.predefined: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "attenuation", "color", "owner_id", "org_id", "predefined", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attenuation"]) -> MetaOapg.properties.attenuation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["predefined"]) -> MetaOapg.properties.predefined: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "attenuation", "color", "owner_id", "org_id", "predefined", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        attenuation: typing.Union[MetaOapg.properties.attenuation, decimal.Decimal, int, float, ],
        color: typing.Union[MetaOapg.properties.color, str, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, ],
        owner_id: typing.Union[MetaOapg.properties.owner_id, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        predefined: typing.Union[MetaOapg.properties.predefined, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqWallType':
        return super().__new__(
            cls,
            *_args,
            attenuation=attenuation,
            color=color,
            org_id=org_id,
            owner_id=owner_id,
            name=name,
            id=id,
            predefined=predefined,
            _configuration=_configuration,
            **kwargs,
        )
