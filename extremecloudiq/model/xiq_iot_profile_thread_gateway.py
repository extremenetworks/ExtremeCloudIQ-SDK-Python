# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqIotProfileThreadGateway(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Thread Gateway application settings.
    """


    class MetaOapg:
        required = {
            "ext_pan_id",
            "channel",
            "network_name",
            "short_pan_id",
            "master_key",
        }
        
        class properties:
            
            
            class short_pan_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4
                    min_length = 4
                    regex=[{
                        'pattern': r'^[0-9a-fA-F]+$',  # noqa: E501
                    }]
            
            
            class ext_pan_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 16
                    min_length = 16
                    regex=[{
                        'pattern': r'^[0-9a-fA-F]+$',  # noqa: E501
                    }]
            
            
            class master_key(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 32
                    min_length = 32
                    regex=[{
                        'pattern': r'^[0-9a-fA-F]+$',  # noqa: E501
                    }]
            
            
            class network_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 16
                    min_length = 1
            
            
            class channel(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_minimum = 0
            
            
            class comm_credentials(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 6
                    regex=[{
                        'pattern': r'^.{6,255}$',  # noqa: E501
                    }]
            
            
            class comm_timeout(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 2000000
                    inclusive_minimum = 1
            enable_nat64 = schemas.BoolSchema
            enable_dns_search_domain = schemas.BoolSchema
            
            
            class white_list(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqIotpTgWhiteListEntry']:
                        return XiqIotpTgWhiteListEntry
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqIotpTgWhiteListEntry'], typing.List['XiqIotpTgWhiteListEntry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'white_list':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqIotpTgWhiteListEntry':
                    return super().__getitem__(i)
            default_user_profile_id = schemas.Int64Schema
            __annotations__ = {
                "short_pan_id": short_pan_id,
                "ext_pan_id": ext_pan_id,
                "master_key": master_key,
                "network_name": network_name,
                "channel": channel,
                "comm_credentials": comm_credentials,
                "comm_timeout": comm_timeout,
                "enable_nat64": enable_nat64,
                "enable_dns_search_domain": enable_dns_search_domain,
                "white_list": white_list,
                "default_user_profile_id": default_user_profile_id,
            }
    
    ext_pan_id: MetaOapg.properties.ext_pan_id
    channel: MetaOapg.properties.channel
    network_name: MetaOapg.properties.network_name
    short_pan_id: MetaOapg.properties.short_pan_id
    master_key: MetaOapg.properties.master_key
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["short_pan_id"]) -> MetaOapg.properties.short_pan_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ext_pan_id"]) -> MetaOapg.properties.ext_pan_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["master_key"]) -> MetaOapg.properties.master_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_name"]) -> MetaOapg.properties.network_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comm_credentials"]) -> MetaOapg.properties.comm_credentials: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comm_timeout"]) -> MetaOapg.properties.comm_timeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_nat64"]) -> MetaOapg.properties.enable_nat64: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_dns_search_domain"]) -> MetaOapg.properties.enable_dns_search_domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["white_list"]) -> MetaOapg.properties.white_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_user_profile_id"]) -> MetaOapg.properties.default_user_profile_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["short_pan_id", "ext_pan_id", "master_key", "network_name", "channel", "comm_credentials", "comm_timeout", "enable_nat64", "enable_dns_search_domain", "white_list", "default_user_profile_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["short_pan_id"]) -> MetaOapg.properties.short_pan_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ext_pan_id"]) -> MetaOapg.properties.ext_pan_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["master_key"]) -> MetaOapg.properties.master_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_name"]) -> MetaOapg.properties.network_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comm_credentials"]) -> typing.Union[MetaOapg.properties.comm_credentials, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comm_timeout"]) -> typing.Union[MetaOapg.properties.comm_timeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_nat64"]) -> typing.Union[MetaOapg.properties.enable_nat64, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_dns_search_domain"]) -> typing.Union[MetaOapg.properties.enable_dns_search_domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["white_list"]) -> typing.Union[MetaOapg.properties.white_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_user_profile_id"]) -> typing.Union[MetaOapg.properties.default_user_profile_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["short_pan_id", "ext_pan_id", "master_key", "network_name", "channel", "comm_credentials", "comm_timeout", "enable_nat64", "enable_dns_search_domain", "white_list", "default_user_profile_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ext_pan_id: typing.Union[MetaOapg.properties.ext_pan_id, str, ],
        channel: typing.Union[MetaOapg.properties.channel, decimal.Decimal, int, ],
        network_name: typing.Union[MetaOapg.properties.network_name, str, ],
        short_pan_id: typing.Union[MetaOapg.properties.short_pan_id, str, ],
        master_key: typing.Union[MetaOapg.properties.master_key, str, ],
        comm_credentials: typing.Union[MetaOapg.properties.comm_credentials, str, schemas.Unset] = schemas.unset,
        comm_timeout: typing.Union[MetaOapg.properties.comm_timeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        enable_nat64: typing.Union[MetaOapg.properties.enable_nat64, bool, schemas.Unset] = schemas.unset,
        enable_dns_search_domain: typing.Union[MetaOapg.properties.enable_dns_search_domain, bool, schemas.Unset] = schemas.unset,
        white_list: typing.Union[MetaOapg.properties.white_list, list, tuple, schemas.Unset] = schemas.unset,
        default_user_profile_id: typing.Union[MetaOapg.properties.default_user_profile_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqIotProfileThreadGateway':
        return super().__new__(
            cls,
            *_args,
            ext_pan_id=ext_pan_id,
            channel=channel,
            network_name=network_name,
            short_pan_id=short_pan_id,
            master_key=master_key,
            comm_credentials=comm_credentials,
            comm_timeout=comm_timeout,
            enable_nat64=enable_nat64,
            enable_dns_search_domain=enable_dns_search_domain,
            white_list=white_list,
            default_user_profile_id=default_user_profile_id,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_iotp_tg_white_list_entry import XiqIotpTgWhiteListEntry
