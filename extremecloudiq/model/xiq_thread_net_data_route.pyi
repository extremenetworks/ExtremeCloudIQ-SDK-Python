# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqThreadNetDataRoute(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            prefix = schemas.StrSchema
            nat64 = schemas.BoolSchema
            stable = schemas.BoolSchema
            route_preference = schemas.StrSchema
            added_by_rloc16 = schemas.StrSchema
            added_by_ext_mac = schemas.StrSchema
            __annotations__ = {
                "prefix": prefix,
                "nat64": nat64,
                "stable": stable,
                "route_preference": route_preference,
                "added_by_rloc16": added_by_rloc16,
                "added_by_ext_mac": added_by_ext_mac,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prefix"]) -> MetaOapg.properties.prefix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64"]) -> MetaOapg.properties.nat64: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stable"]) -> MetaOapg.properties.stable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["route_preference"]) -> MetaOapg.properties.route_preference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_by_rloc16"]) -> MetaOapg.properties.added_by_rloc16: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["added_by_ext_mac"]) -> MetaOapg.properties.added_by_ext_mac: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["prefix", "nat64", "stable", "route_preference", "added_by_rloc16", "added_by_ext_mac", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prefix"]) -> typing.Union[MetaOapg.properties.prefix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64"]) -> typing.Union[MetaOapg.properties.nat64, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stable"]) -> typing.Union[MetaOapg.properties.stable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["route_preference"]) -> typing.Union[MetaOapg.properties.route_preference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_by_rloc16"]) -> typing.Union[MetaOapg.properties.added_by_rloc16, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["added_by_ext_mac"]) -> typing.Union[MetaOapg.properties.added_by_ext_mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["prefix", "nat64", "stable", "route_preference", "added_by_rloc16", "added_by_ext_mac", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        prefix: typing.Union[MetaOapg.properties.prefix, str, schemas.Unset] = schemas.unset,
        nat64: typing.Union[MetaOapg.properties.nat64, bool, schemas.Unset] = schemas.unset,
        stable: typing.Union[MetaOapg.properties.stable, bool, schemas.Unset] = schemas.unset,
        route_preference: typing.Union[MetaOapg.properties.route_preference, str, schemas.Unset] = schemas.unset,
        added_by_rloc16: typing.Union[MetaOapg.properties.added_by_rloc16, str, schemas.Unset] = schemas.unset,
        added_by_ext_mac: typing.Union[MetaOapg.properties.added_by_ext_mac, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqThreadNetDataRoute':
        return super().__new__(
            cls,
            *_args,
            prefix=prefix,
            nat64=nat64,
            stable=stable,
            route_preference=route_preference,
            added_by_rloc16=added_by_rloc16,
            added_by_ext_mac=added_by_ext_mac,
            _configuration=_configuration,
            **kwargs,
        )
