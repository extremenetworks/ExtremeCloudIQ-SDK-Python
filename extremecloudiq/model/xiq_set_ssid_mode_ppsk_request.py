# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqSetSsidModePpskRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The request for setting the SSID to be PPSK mode.
    """


    class MetaOapg:
        required = {
            "key_management",
            "encryption_method",
            "enable_mac_bind",
            "user_group_ids",
            "enable_max_clients_per_ppsk",
        }
        
        class properties:
        
            @staticmethod
            def key_management() -> typing.Type['XiqSsidPpskKeyManagement']:
                return XiqSsidPpskKeyManagement
        
            @staticmethod
            def encryption_method() -> typing.Type['XiqSsidPskEncryptionMethod']:
                return XiqSsidPskEncryptionMethod
            
            
            class user_group_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_group_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            enable_max_clients_per_ppsk = schemas.BoolSchema
            enable_mac_bind = schemas.BoolSchema
            
            
            class max_clients_per_ppsk(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 15
                    inclusive_minimum = 0
            
            
            class max_macs_per_ppsk(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 5
                    inclusive_minimum = 1
            ppsk_server_id = schemas.Int64Schema
            __annotations__ = {
                "key_management": key_management,
                "encryption_method": encryption_method,
                "user_group_ids": user_group_ids,
                "enable_max_clients_per_ppsk": enable_max_clients_per_ppsk,
                "enable_mac_bind": enable_mac_bind,
                "max_clients_per_ppsk": max_clients_per_ppsk,
                "max_macs_per_ppsk": max_macs_per_ppsk,
                "ppsk_server_id": ppsk_server_id,
            }
    
    key_management: 'XiqSsidPpskKeyManagement'
    encryption_method: 'XiqSsidPskEncryptionMethod'
    enable_mac_bind: MetaOapg.properties.enable_mac_bind
    user_group_ids: MetaOapg.properties.user_group_ids
    enable_max_clients_per_ppsk: MetaOapg.properties.enable_max_clients_per_ppsk
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_management"]) -> 'XiqSsidPpskKeyManagement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryption_method"]) -> 'XiqSsidPskEncryptionMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_group_ids"]) -> MetaOapg.properties.user_group_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_max_clients_per_ppsk"]) -> MetaOapg.properties.enable_max_clients_per_ppsk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_mac_bind"]) -> MetaOapg.properties.enable_mac_bind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_clients_per_ppsk"]) -> MetaOapg.properties.max_clients_per_ppsk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_macs_per_ppsk"]) -> MetaOapg.properties.max_macs_per_ppsk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ppsk_server_id"]) -> MetaOapg.properties.ppsk_server_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["key_management", "encryption_method", "user_group_ids", "enable_max_clients_per_ppsk", "enable_mac_bind", "max_clients_per_ppsk", "max_macs_per_ppsk", "ppsk_server_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_management"]) -> 'XiqSsidPpskKeyManagement': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryption_method"]) -> 'XiqSsidPskEncryptionMethod': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_group_ids"]) -> MetaOapg.properties.user_group_ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_max_clients_per_ppsk"]) -> MetaOapg.properties.enable_max_clients_per_ppsk: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_mac_bind"]) -> MetaOapg.properties.enable_mac_bind: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_clients_per_ppsk"]) -> typing.Union[MetaOapg.properties.max_clients_per_ppsk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_macs_per_ppsk"]) -> typing.Union[MetaOapg.properties.max_macs_per_ppsk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ppsk_server_id"]) -> typing.Union[MetaOapg.properties.ppsk_server_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["key_management", "encryption_method", "user_group_ids", "enable_max_clients_per_ppsk", "enable_mac_bind", "max_clients_per_ppsk", "max_macs_per_ppsk", "ppsk_server_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        key_management: 'XiqSsidPpskKeyManagement',
        encryption_method: 'XiqSsidPskEncryptionMethod',
        enable_mac_bind: typing.Union[MetaOapg.properties.enable_mac_bind, bool, ],
        user_group_ids: typing.Union[MetaOapg.properties.user_group_ids, list, tuple, ],
        enable_max_clients_per_ppsk: typing.Union[MetaOapg.properties.enable_max_clients_per_ppsk, bool, ],
        max_clients_per_ppsk: typing.Union[MetaOapg.properties.max_clients_per_ppsk, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_macs_per_ppsk: typing.Union[MetaOapg.properties.max_macs_per_ppsk, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ppsk_server_id: typing.Union[MetaOapg.properties.ppsk_server_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqSetSsidModePpskRequest':
        return super().__new__(
            cls,
            *_args,
            key_management=key_management,
            encryption_method=encryption_method,
            enable_mac_bind=enable_mac_bind,
            user_group_ids=user_group_ids,
            enable_max_clients_per_ppsk=enable_max_clients_per_ppsk,
            max_clients_per_ppsk=max_clients_per_ppsk,
            max_macs_per_ppsk=max_macs_per_ppsk,
            ppsk_server_id=ppsk_server_id,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_ssid_ppsk_key_management import XiqSsidPpskKeyManagement
from extremecloudiq.model.xiq_ssid_psk_encryption_method import XiqSsidPskEncryptionMethod
