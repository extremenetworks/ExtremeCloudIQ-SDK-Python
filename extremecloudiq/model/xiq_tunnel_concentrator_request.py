# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqTunnelConcentratorRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "primary_bridging_interface",
            "primary_vlan",
            "tunnel_address",
            "name",
            "description",
            "native_vlan",
            "primary_listening_interface",
            "primary_tagged",
            "primary_tc",
        }
        
        class properties:
            name = schemas.StrSchema
            description = schemas.StrSchema
            primary_tc = schemas.Int64Schema
            
            
            class primary_listening_interface(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 4
                    inclusive_minimum = 1
            
            
            class primary_bridging_interface(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 4
                    inclusive_minimum = 1
            
            
            class primary_vlan(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 4094
                    inclusive_minimum = 1
            primary_tagged = schemas.BoolSchema
            
            
            class tunnel_address(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])/([1-9]|[12][0-9]|3[012])$',  # noqa: E501
                    }]
            
            
            class native_vlan(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 4094
                    inclusive_minimum = 1
            redundant = schemas.BoolSchema
            backup_tc = schemas.Int64Schema
            
            
            class backup_listening_interface(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 4
                    inclusive_minimum = 1
            
            
            class backup_bridging_interface(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 4
                    inclusive_minimum = 1
            primary_ip = schemas.StrSchema
            backup_ip = schemas.StrSchema
            
            
            class backup_vlan(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 4094
                    inclusive_minimum = 1
            backup_tagged = schemas.BoolSchema
            router_id = schemas.Int32Schema
            gateway = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "description": description,
                "primary_tc": primary_tc,
                "primary_listening_interface": primary_listening_interface,
                "primary_bridging_interface": primary_bridging_interface,
                "primary_vlan": primary_vlan,
                "primary_tagged": primary_tagged,
                "tunnel_address": tunnel_address,
                "native_vlan": native_vlan,
                "redundant": redundant,
                "backup_tc": backup_tc,
                "backup_listening_interface": backup_listening_interface,
                "backup_bridging_interface": backup_bridging_interface,
                "primary_ip": primary_ip,
                "backup_ip": backup_ip,
                "backup_vlan": backup_vlan,
                "backup_tagged": backup_tagged,
                "router_id": router_id,
                "gateway": gateway,
            }
    
    primary_bridging_interface: MetaOapg.properties.primary_bridging_interface
    primary_vlan: MetaOapg.properties.primary_vlan
    tunnel_address: MetaOapg.properties.tunnel_address
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    native_vlan: MetaOapg.properties.native_vlan
    primary_listening_interface: MetaOapg.properties.primary_listening_interface
    primary_tagged: MetaOapg.properties.primary_tagged
    primary_tc: MetaOapg.properties.primary_tc
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_tc"]) -> MetaOapg.properties.primary_tc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_listening_interface"]) -> MetaOapg.properties.primary_listening_interface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_bridging_interface"]) -> MetaOapg.properties.primary_bridging_interface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_vlan"]) -> MetaOapg.properties.primary_vlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_tagged"]) -> MetaOapg.properties.primary_tagged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tunnel_address"]) -> MetaOapg.properties.tunnel_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["native_vlan"]) -> MetaOapg.properties.native_vlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redundant"]) -> MetaOapg.properties.redundant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_tc"]) -> MetaOapg.properties.backup_tc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_listening_interface"]) -> MetaOapg.properties.backup_listening_interface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_bridging_interface"]) -> MetaOapg.properties.backup_bridging_interface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_ip"]) -> MetaOapg.properties.primary_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_ip"]) -> MetaOapg.properties.backup_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_vlan"]) -> MetaOapg.properties.backup_vlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backup_tagged"]) -> MetaOapg.properties.backup_tagged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["router_id"]) -> MetaOapg.properties.router_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gateway"]) -> MetaOapg.properties.gateway: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "description", "primary_tc", "primary_listening_interface", "primary_bridging_interface", "primary_vlan", "primary_tagged", "tunnel_address", "native_vlan", "redundant", "backup_tc", "backup_listening_interface", "backup_bridging_interface", "primary_ip", "backup_ip", "backup_vlan", "backup_tagged", "router_id", "gateway", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_tc"]) -> MetaOapg.properties.primary_tc: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_listening_interface"]) -> MetaOapg.properties.primary_listening_interface: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_bridging_interface"]) -> MetaOapg.properties.primary_bridging_interface: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_vlan"]) -> MetaOapg.properties.primary_vlan: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_tagged"]) -> MetaOapg.properties.primary_tagged: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tunnel_address"]) -> MetaOapg.properties.tunnel_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["native_vlan"]) -> MetaOapg.properties.native_vlan: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redundant"]) -> typing.Union[MetaOapg.properties.redundant, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_tc"]) -> typing.Union[MetaOapg.properties.backup_tc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_listening_interface"]) -> typing.Union[MetaOapg.properties.backup_listening_interface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_bridging_interface"]) -> typing.Union[MetaOapg.properties.backup_bridging_interface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_ip"]) -> typing.Union[MetaOapg.properties.primary_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_ip"]) -> typing.Union[MetaOapg.properties.backup_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_vlan"]) -> typing.Union[MetaOapg.properties.backup_vlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backup_tagged"]) -> typing.Union[MetaOapg.properties.backup_tagged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["router_id"]) -> typing.Union[MetaOapg.properties.router_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gateway"]) -> typing.Union[MetaOapg.properties.gateway, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "description", "primary_tc", "primary_listening_interface", "primary_bridging_interface", "primary_vlan", "primary_tagged", "tunnel_address", "native_vlan", "redundant", "backup_tc", "backup_listening_interface", "backup_bridging_interface", "primary_ip", "backup_ip", "backup_vlan", "backup_tagged", "router_id", "gateway", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        primary_bridging_interface: typing.Union[MetaOapg.properties.primary_bridging_interface, decimal.Decimal, int, ],
        primary_vlan: typing.Union[MetaOapg.properties.primary_vlan, decimal.Decimal, int, ],
        tunnel_address: typing.Union[MetaOapg.properties.tunnel_address, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        native_vlan: typing.Union[MetaOapg.properties.native_vlan, decimal.Decimal, int, ],
        primary_listening_interface: typing.Union[MetaOapg.properties.primary_listening_interface, decimal.Decimal, int, ],
        primary_tagged: typing.Union[MetaOapg.properties.primary_tagged, bool, ],
        primary_tc: typing.Union[MetaOapg.properties.primary_tc, decimal.Decimal, int, ],
        redundant: typing.Union[MetaOapg.properties.redundant, bool, schemas.Unset] = schemas.unset,
        backup_tc: typing.Union[MetaOapg.properties.backup_tc, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        backup_listening_interface: typing.Union[MetaOapg.properties.backup_listening_interface, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        backup_bridging_interface: typing.Union[MetaOapg.properties.backup_bridging_interface, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        primary_ip: typing.Union[MetaOapg.properties.primary_ip, str, schemas.Unset] = schemas.unset,
        backup_ip: typing.Union[MetaOapg.properties.backup_ip, str, schemas.Unset] = schemas.unset,
        backup_vlan: typing.Union[MetaOapg.properties.backup_vlan, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        backup_tagged: typing.Union[MetaOapg.properties.backup_tagged, bool, schemas.Unset] = schemas.unset,
        router_id: typing.Union[MetaOapg.properties.router_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        gateway: typing.Union[MetaOapg.properties.gateway, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqTunnelConcentratorRequest':
        return super().__new__(
            cls,
            *_args,
            primary_bridging_interface=primary_bridging_interface,
            primary_vlan=primary_vlan,
            tunnel_address=tunnel_address,
            name=name,
            description=description,
            native_vlan=native_vlan,
            primary_listening_interface=primary_listening_interface,
            primary_tagged=primary_tagged,
            primary_tc=primary_tc,
            redundant=redundant,
            backup_tc=backup_tc,
            backup_listening_interface=backup_listening_interface,
            backup_bridging_interface=backup_bridging_interface,
            primary_ip=primary_ip,
            backup_ip=backup_ip,
            backup_vlan=backup_vlan,
            backup_tagged=backup_tagged,
            router_id=router_id,
            gateway=gateway,
            _configuration=_configuration,
            **kwargs,
        )
