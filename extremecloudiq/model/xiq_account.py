# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAccount(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "account_type",
            "update_time",
            "create_time",
            "quota",
            "name",
            "data_center",
            "id",
            "account_mode",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            name = schemas.StrSchema
        
            @staticmethod
            def account_type() -> typing.Type['XiqAccountType']:
                return XiqAccountType
        
            @staticmethod
            def account_mode() -> typing.Type['XiqAccountMode']:
                return XiqAccountMode
            quota = schemas.StrSchema
            data_center = schemas.StrSchema
            industry = schemas.StrSchema
            country = schemas.StrSchema
            state = schemas.StrSchema
            city = schemas.StrSchema
            address = schemas.StrSchema
            zipcode = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "name": name,
                "account_type": account_type,
                "account_mode": account_mode,
                "quota": quota,
                "data_center": data_center,
                "industry": industry,
                "country": country,
                "state": state,
                "city": city,
                "address": address,
                "zipcode": zipcode,
            }
    
    account_type: 'XiqAccountType'
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    quota: MetaOapg.properties.quota
    name: MetaOapg.properties.name
    data_center: MetaOapg.properties.data_center
    id: MetaOapg.properties.id
    account_mode: 'XiqAccountMode'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_type"]) -> 'XiqAccountType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_mode"]) -> 'XiqAccountMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quota"]) -> MetaOapg.properties.quota: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_center"]) -> MetaOapg.properties.data_center: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["industry"]) -> MetaOapg.properties.industry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zipcode"]) -> MetaOapg.properties.zipcode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "name", "account_type", "account_mode", "quota", "data_center", "industry", "country", "state", "city", "address", "zipcode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_type"]) -> 'XiqAccountType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_mode"]) -> 'XiqAccountMode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quota"]) -> MetaOapg.properties.quota: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_center"]) -> MetaOapg.properties.data_center: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["industry"]) -> typing.Union[MetaOapg.properties.industry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union[MetaOapg.properties.state, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> typing.Union[MetaOapg.properties.city, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zipcode"]) -> typing.Union[MetaOapg.properties.zipcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "name", "account_type", "account_mode", "quota", "data_center", "industry", "country", "state", "city", "address", "zipcode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account_type: 'XiqAccountType',
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        quota: typing.Union[MetaOapg.properties.quota, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        data_center: typing.Union[MetaOapg.properties.data_center, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        account_mode: 'XiqAccountMode',
        industry: typing.Union[MetaOapg.properties.industry, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        state: typing.Union[MetaOapg.properties.state, str, schemas.Unset] = schemas.unset,
        city: typing.Union[MetaOapg.properties.city, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        zipcode: typing.Union[MetaOapg.properties.zipcode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAccount':
        return super().__new__(
            cls,
            *_args,
            account_type=account_type,
            update_time=update_time,
            create_time=create_time,
            quota=quota,
            name=name,
            data_center=data_center,
            id=id,
            account_mode=account_mode,
            industry=industry,
            country=country,
            state=state,
            city=city,
            address=address,
            zipcode=zipcode,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_account_mode import XiqAccountMode
from extremecloudiq.model.xiq_account_type import XiqAccountType
