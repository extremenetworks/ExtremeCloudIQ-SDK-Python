# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqClientStatsGridRow(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The D360 client grid
    """


    class MetaOapg:
        
        class properties:
            connection_status = schemas.BoolSchema
            client_hostname = schemas.StrSchema
            client_ip = schemas.StrSchema
            site = schemas.StrSchema
            building = schemas.StrSchema
            floor = schemas.StrSchema
            association_issues = schemas.Int64Schema
            authentication_issues = schemas.Int64Schema
            ip_address_issues = schemas.Int64Schema
            snr = schemas.Int32Schema
            rssi = schemas.Int32Schema
            channel_utilization_score = schemas.Int32Schema
            frequency = schemas.StrSchema
            roaming_issues = schemas.Int64Schema
            ipv4 = schemas.StrSchema
            connected_device_mac = schemas.StrSchema
            ssid = schemas.StrSchema
            vlan = schemas.Int64Schema
            username = schemas.StrSchema
            authentication = schemas.StrSchema
            encryption = schemas.StrSchema
            user_profile = schemas.StrSchema
            alias = schemas.StrSchema
            category_assignment = schemas.StrSchema
            ipv6 = schemas.StrSchema
            client_device_id = schemas.Int64Schema
            device_id = schemas.Int64Schema
            last_session_start_time = schemas.Int64Schema
            operating_system = schemas.StrSchema
            client_mac = schemas.StrSchema
            __annotations__ = {
                "connection_status": connection_status,
                "client_hostname": client_hostname,
                "client_ip": client_ip,
                "site": site,
                "building": building,
                "floor": floor,
                "association_issues": association_issues,
                "authentication_issues": authentication_issues,
                "ip_address_issues": ip_address_issues,
                "snr": snr,
                "rssi": rssi,
                "channel_utilization_score": channel_utilization_score,
                "frequency": frequency,
                "roaming_issues": roaming_issues,
                "ipv4": ipv4,
                "connected_device_mac": connected_device_mac,
                "ssid": ssid,
                "vlan": vlan,
                "username": username,
                "authentication": authentication,
                "encryption": encryption,
                "user_profile": user_profile,
                "alias": alias,
                "category_assignment": category_assignment,
                "ipv6": ipv6,
                "client_device_id": client_device_id,
                "device_id": device_id,
                "last_session_start_time": last_session_start_time,
                "operating_system": operating_system,
                "client_mac": client_mac,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_status"]) -> MetaOapg.properties.connection_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_hostname"]) -> MetaOapg.properties.client_hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_ip"]) -> MetaOapg.properties.client_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["site"]) -> MetaOapg.properties.site: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["building"]) -> MetaOapg.properties.building: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["floor"]) -> MetaOapg.properties.floor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["association_issues"]) -> MetaOapg.properties.association_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication_issues"]) -> MetaOapg.properties.authentication_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address_issues"]) -> MetaOapg.properties.ip_address_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snr"]) -> MetaOapg.properties.snr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rssi"]) -> MetaOapg.properties.rssi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_utilization_score"]) -> MetaOapg.properties.channel_utilization_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roaming_issues"]) -> MetaOapg.properties.roaming_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv4"]) -> MetaOapg.properties.ipv4: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected_device_mac"]) -> MetaOapg.properties.connected_device_mac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssid"]) -> MetaOapg.properties.ssid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vlan"]) -> MetaOapg.properties.vlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authentication"]) -> MetaOapg.properties.authentication: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryption"]) -> MetaOapg.properties.encryption: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_profile"]) -> MetaOapg.properties.user_profile: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias"]) -> MetaOapg.properties.alias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_assignment"]) -> MetaOapg.properties.category_assignment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6"]) -> MetaOapg.properties.ipv6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_device_id"]) -> MetaOapg.properties.client_device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_session_start_time"]) -> MetaOapg.properties.last_session_start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operating_system"]) -> MetaOapg.properties.operating_system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_mac"]) -> MetaOapg.properties.client_mac: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["connection_status", "client_hostname", "client_ip", "site", "building", "floor", "association_issues", "authentication_issues", "ip_address_issues", "snr", "rssi", "channel_utilization_score", "frequency", "roaming_issues", "ipv4", "connected_device_mac", "ssid", "vlan", "username", "authentication", "encryption", "user_profile", "alias", "category_assignment", "ipv6", "client_device_id", "device_id", "last_session_start_time", "operating_system", "client_mac", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_status"]) -> typing.Union[MetaOapg.properties.connection_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_hostname"]) -> typing.Union[MetaOapg.properties.client_hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_ip"]) -> typing.Union[MetaOapg.properties.client_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["site"]) -> typing.Union[MetaOapg.properties.site, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["building"]) -> typing.Union[MetaOapg.properties.building, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["floor"]) -> typing.Union[MetaOapg.properties.floor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["association_issues"]) -> typing.Union[MetaOapg.properties.association_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication_issues"]) -> typing.Union[MetaOapg.properties.authentication_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address_issues"]) -> typing.Union[MetaOapg.properties.ip_address_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snr"]) -> typing.Union[MetaOapg.properties.snr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rssi"]) -> typing.Union[MetaOapg.properties.rssi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_utilization_score"]) -> typing.Union[MetaOapg.properties.channel_utilization_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union[MetaOapg.properties.frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roaming_issues"]) -> typing.Union[MetaOapg.properties.roaming_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv4"]) -> typing.Union[MetaOapg.properties.ipv4, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected_device_mac"]) -> typing.Union[MetaOapg.properties.connected_device_mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssid"]) -> typing.Union[MetaOapg.properties.ssid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vlan"]) -> typing.Union[MetaOapg.properties.vlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authentication"]) -> typing.Union[MetaOapg.properties.authentication, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryption"]) -> typing.Union[MetaOapg.properties.encryption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_profile"]) -> typing.Union[MetaOapg.properties.user_profile, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias"]) -> typing.Union[MetaOapg.properties.alias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_assignment"]) -> typing.Union[MetaOapg.properties.category_assignment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6"]) -> typing.Union[MetaOapg.properties.ipv6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_device_id"]) -> typing.Union[MetaOapg.properties.client_device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_session_start_time"]) -> typing.Union[MetaOapg.properties.last_session_start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operating_system"]) -> typing.Union[MetaOapg.properties.operating_system, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_mac"]) -> typing.Union[MetaOapg.properties.client_mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connection_status", "client_hostname", "client_ip", "site", "building", "floor", "association_issues", "authentication_issues", "ip_address_issues", "snr", "rssi", "channel_utilization_score", "frequency", "roaming_issues", "ipv4", "connected_device_mac", "ssid", "vlan", "username", "authentication", "encryption", "user_profile", "alias", "category_assignment", "ipv6", "client_device_id", "device_id", "last_session_start_time", "operating_system", "client_mac", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        connection_status: typing.Union[MetaOapg.properties.connection_status, bool, schemas.Unset] = schemas.unset,
        client_hostname: typing.Union[MetaOapg.properties.client_hostname, str, schemas.Unset] = schemas.unset,
        client_ip: typing.Union[MetaOapg.properties.client_ip, str, schemas.Unset] = schemas.unset,
        site: typing.Union[MetaOapg.properties.site, str, schemas.Unset] = schemas.unset,
        building: typing.Union[MetaOapg.properties.building, str, schemas.Unset] = schemas.unset,
        floor: typing.Union[MetaOapg.properties.floor, str, schemas.Unset] = schemas.unset,
        association_issues: typing.Union[MetaOapg.properties.association_issues, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        authentication_issues: typing.Union[MetaOapg.properties.authentication_issues, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ip_address_issues: typing.Union[MetaOapg.properties.ip_address_issues, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        snr: typing.Union[MetaOapg.properties.snr, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rssi: typing.Union[MetaOapg.properties.rssi, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel_utilization_score: typing.Union[MetaOapg.properties.channel_utilization_score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        frequency: typing.Union[MetaOapg.properties.frequency, str, schemas.Unset] = schemas.unset,
        roaming_issues: typing.Union[MetaOapg.properties.roaming_issues, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ipv4: typing.Union[MetaOapg.properties.ipv4, str, schemas.Unset] = schemas.unset,
        connected_device_mac: typing.Union[MetaOapg.properties.connected_device_mac, str, schemas.Unset] = schemas.unset,
        ssid: typing.Union[MetaOapg.properties.ssid, str, schemas.Unset] = schemas.unset,
        vlan: typing.Union[MetaOapg.properties.vlan, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        authentication: typing.Union[MetaOapg.properties.authentication, str, schemas.Unset] = schemas.unset,
        encryption: typing.Union[MetaOapg.properties.encryption, str, schemas.Unset] = schemas.unset,
        user_profile: typing.Union[MetaOapg.properties.user_profile, str, schemas.Unset] = schemas.unset,
        alias: typing.Union[MetaOapg.properties.alias, str, schemas.Unset] = schemas.unset,
        category_assignment: typing.Union[MetaOapg.properties.category_assignment, str, schemas.Unset] = schemas.unset,
        ipv6: typing.Union[MetaOapg.properties.ipv6, str, schemas.Unset] = schemas.unset,
        client_device_id: typing.Union[MetaOapg.properties.client_device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_id: typing.Union[MetaOapg.properties.device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        last_session_start_time: typing.Union[MetaOapg.properties.last_session_start_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        operating_system: typing.Union[MetaOapg.properties.operating_system, str, schemas.Unset] = schemas.unset,
        client_mac: typing.Union[MetaOapg.properties.client_mac, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqClientStatsGridRow':
        return super().__new__(
            cls,
            *_args,
            connection_status=connection_status,
            client_hostname=client_hostname,
            client_ip=client_ip,
            site=site,
            building=building,
            floor=floor,
            association_issues=association_issues,
            authentication_issues=authentication_issues,
            ip_address_issues=ip_address_issues,
            snr=snr,
            rssi=rssi,
            channel_utilization_score=channel_utilization_score,
            frequency=frequency,
            roaming_issues=roaming_issues,
            ipv4=ipv4,
            connected_device_mac=connected_device_mac,
            ssid=ssid,
            vlan=vlan,
            username=username,
            authentication=authentication,
            encryption=encryption,
            user_profile=user_profile,
            alias=alias,
            category_assignment=category_assignment,
            ipv6=ipv6,
            client_device_id=client_device_id,
            device_id=device_id,
            last_session_start_time=last_session_start_time,
            operating_system=operating_system,
            client_mac=client_mac,
            _configuration=_configuration,
            **kwargs,
        )
