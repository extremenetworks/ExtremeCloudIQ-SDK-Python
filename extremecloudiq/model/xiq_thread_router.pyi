# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqThreadRouter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The Thread Router associate to ExtremeCloud IQ device
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "id",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            org_id = schemas.Int64Schema
            owner_id = schemas.Int64Schema
            device_id = schemas.Int64Schema
            serial_number = schemas.StrSchema
            eui64 = schemas.StrSchema
            ext_mac = schemas.StrSchema
            rloc16 = schemas.StrSchema
            global_ipv6 = schemas.StrSchema
            tx_power = schemas.Int32Schema
            region = schemas.StrSchema
            thread_platform = schemas.StrSchema
            device_role = schemas.StrSchema
        
            @staticmethod
            def router_interface() -> typing.Type['XiqThreadNetworkInterface']:
                return XiqThreadNetworkInterface
        
            @staticmethod
            def veth0() -> typing.Type['XiqThreadNetworkInterface']:
                return XiqThreadNetworkInterface
        
            @staticmethod
            def network_data() -> typing.Type['XiqThreadNetworkData']:
                return XiqThreadNetworkData
        
            @staticmethod
            def thread_mle_link_mode() -> typing.Type['XiqThreadMleLinkMode']:
                return XiqThreadMleLinkMode
        
            @staticmethod
            def thread_version() -> typing.Type['XiqThreadVersion']:
                return XiqThreadVersion
        
            @staticmethod
            def leader_service() -> typing.Type['XiqThreadLeaderService']:
                return XiqThreadLeaderService
        
            @staticmethod
            def border_router_service() -> typing.Type['XiqThreadBorderRouterService']:
                return XiqThreadBorderRouterService
        
            @staticmethod
            def backbone_border_router_service() -> typing.Type['XiqThreadBackboneBorderRouterService']:
                return XiqThreadBackboneBorderRouterService
        
            @staticmethod
            def border_agent_service() -> typing.Type['XiqThreadBorderAgentService']:
                return XiqThreadBorderAgentService
        
            @staticmethod
            def commissioner_service() -> typing.Type['XiqThreadCommissionerService']:
                return XiqThreadCommissionerService
        
            @staticmethod
            def nat64_service() -> typing.Type['XiqThreadNat64Service']:
                return XiqThreadNat64Service
        
            @staticmethod
            def network_config() -> typing.Type['XiqThreadNetworkConfig']:
                return XiqThreadNetworkConfig
            active_clients = schemas.Int32Schema
            hostname = schemas.StrSchema
            last_reported = schemas.DateTimeSchema
            thread_connected = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "org_id": org_id,
                "owner_id": owner_id,
                "device_id": device_id,
                "serial_number": serial_number,
                "eui64": eui64,
                "ext_mac": ext_mac,
                "rloc16": rloc16,
                "global_ipv6": global_ipv6,
                "tx_power": tx_power,
                "region": region,
                "thread_platform": thread_platform,
                "device_role": device_role,
                "router_interface": router_interface,
                "veth0": veth0,
                "network_data": network_data,
                "thread_mle_link_mode": thread_mle_link_mode,
                "thread_version": thread_version,
                "leader_service": leader_service,
                "border_router_service": border_router_service,
                "backbone_border_router_service": backbone_border_router_service,
                "border_agent_service": border_agent_service,
                "commissioner_service": commissioner_service,
                "nat64_service": nat64_service,
                "network_config": network_config,
                "active_clients": active_clients,
                "hostname": hostname,
                "last_reported": last_reported,
                "thread_connected": thread_connected,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eui64"]) -> MetaOapg.properties.eui64: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ext_mac"]) -> MetaOapg.properties.ext_mac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rloc16"]) -> MetaOapg.properties.rloc16: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["global_ipv6"]) -> MetaOapg.properties.global_ipv6: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tx_power"]) -> MetaOapg.properties.tx_power: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_platform"]) -> MetaOapg.properties.thread_platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_role"]) -> MetaOapg.properties.device_role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["router_interface"]) -> 'XiqThreadNetworkInterface': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["veth0"]) -> 'XiqThreadNetworkInterface': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_data"]) -> 'XiqThreadNetworkData': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_mle_link_mode"]) -> 'XiqThreadMleLinkMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_version"]) -> 'XiqThreadVersion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leader_service"]) -> 'XiqThreadLeaderService': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["border_router_service"]) -> 'XiqThreadBorderRouterService': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backbone_border_router_service"]) -> 'XiqThreadBackboneBorderRouterService': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["border_agent_service"]) -> 'XiqThreadBorderAgentService': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commissioner_service"]) -> 'XiqThreadCommissionerService': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nat64_service"]) -> 'XiqThreadNat64Service': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_config"]) -> 'XiqThreadNetworkConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active_clients"]) -> MetaOapg.properties.active_clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_reported"]) -> MetaOapg.properties.last_reported: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_connected"]) -> MetaOapg.properties.thread_connected: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "owner_id", "device_id", "serial_number", "eui64", "ext_mac", "rloc16", "global_ipv6", "tx_power", "region", "thread_platform", "device_role", "router_interface", "veth0", "network_data", "thread_mle_link_mode", "thread_version", "leader_service", "border_router_service", "backbone_border_router_service", "border_agent_service", "commissioner_service", "nat64_service", "network_config", "active_clients", "hostname", "last_reported", "thread_connected", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eui64"]) -> typing.Union[MetaOapg.properties.eui64, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ext_mac"]) -> typing.Union[MetaOapg.properties.ext_mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rloc16"]) -> typing.Union[MetaOapg.properties.rloc16, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["global_ipv6"]) -> typing.Union[MetaOapg.properties.global_ipv6, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tx_power"]) -> typing.Union[MetaOapg.properties.tx_power, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_platform"]) -> typing.Union[MetaOapg.properties.thread_platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_role"]) -> typing.Union[MetaOapg.properties.device_role, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["router_interface"]) -> typing.Union['XiqThreadNetworkInterface', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["veth0"]) -> typing.Union['XiqThreadNetworkInterface', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_data"]) -> typing.Union['XiqThreadNetworkData', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_mle_link_mode"]) -> typing.Union['XiqThreadMleLinkMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_version"]) -> typing.Union['XiqThreadVersion', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leader_service"]) -> typing.Union['XiqThreadLeaderService', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["border_router_service"]) -> typing.Union['XiqThreadBorderRouterService', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backbone_border_router_service"]) -> typing.Union['XiqThreadBackboneBorderRouterService', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["border_agent_service"]) -> typing.Union['XiqThreadBorderAgentService', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commissioner_service"]) -> typing.Union['XiqThreadCommissionerService', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nat64_service"]) -> typing.Union['XiqThreadNat64Service', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_config"]) -> typing.Union['XiqThreadNetworkConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active_clients"]) -> typing.Union[MetaOapg.properties.active_clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> typing.Union[MetaOapg.properties.hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_reported"]) -> typing.Union[MetaOapg.properties.last_reported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_connected"]) -> typing.Union[MetaOapg.properties.thread_connected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "owner_id", "device_id", "serial_number", "eui64", "ext_mac", "rloc16", "global_ipv6", "tx_power", "region", "thread_platform", "device_role", "router_interface", "veth0", "network_data", "thread_mle_link_mode", "thread_version", "leader_service", "border_router_service", "backbone_border_router_service", "border_agent_service", "commissioner_service", "nat64_service", "network_config", "active_clients", "hostname", "last_reported", "thread_connected", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        owner_id: typing.Union[MetaOapg.properties.owner_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_id: typing.Union[MetaOapg.properties.device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
        eui64: typing.Union[MetaOapg.properties.eui64, str, schemas.Unset] = schemas.unset,
        ext_mac: typing.Union[MetaOapg.properties.ext_mac, str, schemas.Unset] = schemas.unset,
        rloc16: typing.Union[MetaOapg.properties.rloc16, str, schemas.Unset] = schemas.unset,
        global_ipv6: typing.Union[MetaOapg.properties.global_ipv6, str, schemas.Unset] = schemas.unset,
        tx_power: typing.Union[MetaOapg.properties.tx_power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        thread_platform: typing.Union[MetaOapg.properties.thread_platform, str, schemas.Unset] = schemas.unset,
        device_role: typing.Union[MetaOapg.properties.device_role, str, schemas.Unset] = schemas.unset,
        router_interface: typing.Union['XiqThreadNetworkInterface', schemas.Unset] = schemas.unset,
        veth0: typing.Union['XiqThreadNetworkInterface', schemas.Unset] = schemas.unset,
        network_data: typing.Union['XiqThreadNetworkData', schemas.Unset] = schemas.unset,
        thread_mle_link_mode: typing.Union['XiqThreadMleLinkMode', schemas.Unset] = schemas.unset,
        thread_version: typing.Union['XiqThreadVersion', schemas.Unset] = schemas.unset,
        leader_service: typing.Union['XiqThreadLeaderService', schemas.Unset] = schemas.unset,
        border_router_service: typing.Union['XiqThreadBorderRouterService', schemas.Unset] = schemas.unset,
        backbone_border_router_service: typing.Union['XiqThreadBackboneBorderRouterService', schemas.Unset] = schemas.unset,
        border_agent_service: typing.Union['XiqThreadBorderAgentService', schemas.Unset] = schemas.unset,
        commissioner_service: typing.Union['XiqThreadCommissionerService', schemas.Unset] = schemas.unset,
        nat64_service: typing.Union['XiqThreadNat64Service', schemas.Unset] = schemas.unset,
        network_config: typing.Union['XiqThreadNetworkConfig', schemas.Unset] = schemas.unset,
        active_clients: typing.Union[MetaOapg.properties.active_clients, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hostname: typing.Union[MetaOapg.properties.hostname, str, schemas.Unset] = schemas.unset,
        last_reported: typing.Union[MetaOapg.properties.last_reported, str, datetime, schemas.Unset] = schemas.unset,
        thread_connected: typing.Union[MetaOapg.properties.thread_connected, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqThreadRouter':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            id=id,
            org_id=org_id,
            owner_id=owner_id,
            device_id=device_id,
            serial_number=serial_number,
            eui64=eui64,
            ext_mac=ext_mac,
            rloc16=rloc16,
            global_ipv6=global_ipv6,
            tx_power=tx_power,
            region=region,
            thread_platform=thread_platform,
            device_role=device_role,
            router_interface=router_interface,
            veth0=veth0,
            network_data=network_data,
            thread_mle_link_mode=thread_mle_link_mode,
            thread_version=thread_version,
            leader_service=leader_service,
            border_router_service=border_router_service,
            backbone_border_router_service=backbone_border_router_service,
            border_agent_service=border_agent_service,
            commissioner_service=commissioner_service,
            nat64_service=nat64_service,
            network_config=network_config,
            active_clients=active_clients,
            hostname=hostname,
            last_reported=last_reported,
            thread_connected=thread_connected,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_thread_backbone_border_router_service import XiqThreadBackboneBorderRouterService
from extremecloudiq.model.xiq_thread_border_agent_service import XiqThreadBorderAgentService
from extremecloudiq.model.xiq_thread_border_router_service import XiqThreadBorderRouterService
from extremecloudiq.model.xiq_thread_commissioner_service import XiqThreadCommissionerService
from extremecloudiq.model.xiq_thread_leader_service import XiqThreadLeaderService
from extremecloudiq.model.xiq_thread_mle_link_mode import XiqThreadMleLinkMode
from extremecloudiq.model.xiq_thread_nat64_service import XiqThreadNat64Service
from extremecloudiq.model.xiq_thread_network_config import XiqThreadNetworkConfig
from extremecloudiq.model.xiq_thread_network_data import XiqThreadNetworkData
from extremecloudiq.model.xiq_thread_network_interface import XiqThreadNetworkInterface
from extremecloudiq.model.xiq_thread_version import XiqThreadVersion
