# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.3.0.140
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDeviceData(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The folder path info
    """


    class MetaOapg:
        required = {
            "device_model",
            "device_type",
            "metric_width",
            "serial_number",
            "device_mac_address",
            "image_width",
            "image_height",
            "metric_height",
            "connected_since",
            "device_function",
            "image_base_url",
            "image_file_name",
            "folder_id",
            "host_name",
        }
        
        class properties:
            folder_id = schemas.Int64Schema
            device_mac_address = schemas.StrSchema
            device_type = schemas.StrSchema
            device_function = schemas.StrSchema
            host_name = schemas.StrSchema
            device_model = schemas.StrSchema
            image_base_url = schemas.StrSchema
            image_file_name = schemas.StrSchema
            image_width = schemas.Int32Schema
            image_height = schemas.Int32Schema
            connected_since = schemas.Int64Schema
            serial_number = schemas.StrSchema
            metric_height = schemas.Float64Schema
            metric_width = schemas.Float64Schema
            xaxis = schemas.Float64Schema
            yaxis = schemas.Float64Schema
            __annotations__ = {
                "folder_id": folder_id,
                "device_mac_address": device_mac_address,
                "device_type": device_type,
                "device_function": device_function,
                "host_name": host_name,
                "device_model": device_model,
                "image_base_url": image_base_url,
                "image_file_name": image_file_name,
                "image_width": image_width,
                "image_height": image_height,
                "connected_since": connected_since,
                "serial_number": serial_number,
                "metric_height": metric_height,
                "metric_width": metric_width,
                "xaxis": xaxis,
                "yaxis": yaxis,
            }
    
    device_model: MetaOapg.properties.device_model
    device_type: MetaOapg.properties.device_type
    metric_width: MetaOapg.properties.metric_width
    serial_number: MetaOapg.properties.serial_number
    device_mac_address: MetaOapg.properties.device_mac_address
    image_width: MetaOapg.properties.image_width
    image_height: MetaOapg.properties.image_height
    metric_height: MetaOapg.properties.metric_height
    connected_since: MetaOapg.properties.connected_since
    device_function: MetaOapg.properties.device_function
    image_base_url: MetaOapg.properties.image_base_url
    image_file_name: MetaOapg.properties.image_file_name
    folder_id: MetaOapg.properties.folder_id
    host_name: MetaOapg.properties.host_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder_id"]) -> MetaOapg.properties.folder_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_mac_address"]) -> MetaOapg.properties.device_mac_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_function"]) -> MetaOapg.properties.device_function: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_name"]) -> MetaOapg.properties.host_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_model"]) -> MetaOapg.properties.device_model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_base_url"]) -> MetaOapg.properties.image_base_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_file_name"]) -> MetaOapg.properties.image_file_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_width"]) -> MetaOapg.properties.image_width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_height"]) -> MetaOapg.properties.image_height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected_since"]) -> MetaOapg.properties.connected_since: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metric_height"]) -> MetaOapg.properties.metric_height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metric_width"]) -> MetaOapg.properties.metric_width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["xaxis"]) -> MetaOapg.properties.xaxis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yaxis"]) -> MetaOapg.properties.yaxis: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["folder_id", "device_mac_address", "device_type", "device_function", "host_name", "device_model", "image_base_url", "image_file_name", "image_width", "image_height", "connected_since", "serial_number", "metric_height", "metric_width", "xaxis", "yaxis", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder_id"]) -> MetaOapg.properties.folder_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_mac_address"]) -> MetaOapg.properties.device_mac_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_function"]) -> MetaOapg.properties.device_function: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_name"]) -> MetaOapg.properties.host_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_model"]) -> MetaOapg.properties.device_model: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_base_url"]) -> MetaOapg.properties.image_base_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_file_name"]) -> MetaOapg.properties.image_file_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_width"]) -> MetaOapg.properties.image_width: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_height"]) -> MetaOapg.properties.image_height: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected_since"]) -> MetaOapg.properties.connected_since: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metric_height"]) -> MetaOapg.properties.metric_height: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metric_width"]) -> MetaOapg.properties.metric_width: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["xaxis"]) -> typing.Union[MetaOapg.properties.xaxis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yaxis"]) -> typing.Union[MetaOapg.properties.yaxis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["folder_id", "device_mac_address", "device_type", "device_function", "host_name", "device_model", "image_base_url", "image_file_name", "image_width", "image_height", "connected_since", "serial_number", "metric_height", "metric_width", "xaxis", "yaxis", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        device_model: typing.Union[MetaOapg.properties.device_model, str, ],
        device_type: typing.Union[MetaOapg.properties.device_type, str, ],
        metric_width: typing.Union[MetaOapg.properties.metric_width, decimal.Decimal, int, float, ],
        serial_number: typing.Union[MetaOapg.properties.serial_number, str, ],
        device_mac_address: typing.Union[MetaOapg.properties.device_mac_address, str, ],
        image_width: typing.Union[MetaOapg.properties.image_width, decimal.Decimal, int, ],
        image_height: typing.Union[MetaOapg.properties.image_height, decimal.Decimal, int, ],
        metric_height: typing.Union[MetaOapg.properties.metric_height, decimal.Decimal, int, float, ],
        connected_since: typing.Union[MetaOapg.properties.connected_since, decimal.Decimal, int, ],
        device_function: typing.Union[MetaOapg.properties.device_function, str, ],
        image_base_url: typing.Union[MetaOapg.properties.image_base_url, str, ],
        image_file_name: typing.Union[MetaOapg.properties.image_file_name, str, ],
        folder_id: typing.Union[MetaOapg.properties.folder_id, decimal.Decimal, int, ],
        host_name: typing.Union[MetaOapg.properties.host_name, str, ],
        xaxis: typing.Union[MetaOapg.properties.xaxis, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        yaxis: typing.Union[MetaOapg.properties.yaxis, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDeviceData':
        return super().__new__(
            cls,
            *_args,
            device_model=device_model,
            device_type=device_type,
            metric_width=metric_width,
            serial_number=serial_number,
            device_mac_address=device_mac_address,
            image_width=image_width,
            image_height=image_height,
            metric_height=metric_height,
            connected_since=connected_since,
            device_function=device_function,
            image_base_url=image_base_url,
            image_file_name=image_file_name,
            folder_id=folder_id,
            host_name=host_name,
            xaxis=xaxis,
            yaxis=yaxis,
            _configuration=_configuration,
            **kwargs,
        )
