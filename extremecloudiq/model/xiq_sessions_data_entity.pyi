# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqSessionsDataEntity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ExtremeCloud IQ Sessions Data
    """


    class MetaOapg:
        required = {
            "timestamp",
        }
        
        class properties:
            timestamp = schemas.Int64Schema
            data_rate_failure_percent = schemas.Float64Schema
            client_count = schemas.Int32Schema
            normal_failure_percent = schemas.Int32Schema
            __annotations__ = {
                "timestamp": timestamp,
                "data_rate_failure_percent": data_rate_failure_percent,
                "client_count": client_count,
                "normal_failure_percent": normal_failure_percent,
            }
    
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_rate_failure_percent"]) -> MetaOapg.properties.data_rate_failure_percent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_count"]) -> MetaOapg.properties.client_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normal_failure_percent"]) -> MetaOapg.properties.normal_failure_percent: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timestamp", "data_rate_failure_percent", "client_count", "normal_failure_percent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_rate_failure_percent"]) -> typing.Union[MetaOapg.properties.data_rate_failure_percent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_count"]) -> typing.Union[MetaOapg.properties.client_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normal_failure_percent"]) -> typing.Union[MetaOapg.properties.normal_failure_percent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timestamp", "data_rate_failure_percent", "client_count", "normal_failure_percent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, ],
        data_rate_failure_percent: typing.Union[MetaOapg.properties.data_rate_failure_percent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        client_count: typing.Union[MetaOapg.properties.client_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        normal_failure_percent: typing.Union[MetaOapg.properties.normal_failure_percent, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqSessionsDataEntity':
        return super().__new__(
            cls,
            *_args,
            timestamp=timestamp,
            data_rate_failure_percent=data_rate_failure_percent,
            client_count=client_count,
            normal_failure_percent=normal_failure_percent,
            _configuration=_configuration,
            **kwargs,
        )
