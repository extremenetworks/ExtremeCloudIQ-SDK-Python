# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAdvancedOnboardDeviceRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The payload to advanced onboard devices
    """


    class MetaOapg:
        
        class properties:
            
            
            class extreme(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqExtremeDevice']:
                        return XiqExtremeDevice
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqExtremeDevice'], typing.List['XiqExtremeDevice']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'extreme':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqExtremeDevice':
                    return super().__getitem__(i)
            
            
            class exos(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqExosDevice']:
                        return XiqExosDevice
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqExosDevice'], typing.List['XiqExosDevice']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'exos':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqExosDevice':
                    return super().__getitem__(i)
            
            
            class voss(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqVossDevice']:
                        return XiqVossDevice
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqVossDevice'], typing.List['XiqVossDevice']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'voss':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqVossDevice':
                    return super().__getitem__(i)
            
            
            class wing(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqWingDevice']:
                        return XiqWingDevice
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqWingDevice'], typing.List['XiqWingDevice']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wing':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqWingDevice':
                    return super().__getitem__(i)
            
            
            class dell(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqDellDevice']:
                        return XiqDellDevice
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqDellDevice'], typing.List['XiqDellDevice']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dell':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqDellDevice':
                    return super().__getitem__(i)
            
            
            class dt(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqDigitalTwinOnboardDevice']:
                        return XiqDigitalTwinOnboardDevice
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqDigitalTwinOnboardDevice'], typing.List['XiqDigitalTwinOnboardDevice']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dt':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqDigitalTwinOnboardDevice':
                    return super().__getitem__(i)
            unmanaged = schemas.BoolSchema
            __annotations__ = {
                "extreme": extreme,
                "exos": exos,
                "voss": voss,
                "wing": wing,
                "dell": dell,
                "dt": dt,
                "unmanaged": unmanaged,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extreme"]) -> MetaOapg.properties.extreme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exos"]) -> MetaOapg.properties.exos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voss"]) -> MetaOapg.properties.voss: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wing"]) -> MetaOapg.properties.wing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dell"]) -> MetaOapg.properties.dell: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dt"]) -> MetaOapg.properties.dt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unmanaged"]) -> MetaOapg.properties.unmanaged: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["extreme", "exos", "voss", "wing", "dell", "dt", "unmanaged", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extreme"]) -> typing.Union[MetaOapg.properties.extreme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exos"]) -> typing.Union[MetaOapg.properties.exos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voss"]) -> typing.Union[MetaOapg.properties.voss, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wing"]) -> typing.Union[MetaOapg.properties.wing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dell"]) -> typing.Union[MetaOapg.properties.dell, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dt"]) -> typing.Union[MetaOapg.properties.dt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unmanaged"]) -> typing.Union[MetaOapg.properties.unmanaged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["extreme", "exos", "voss", "wing", "dell", "dt", "unmanaged", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        extreme: typing.Union[MetaOapg.properties.extreme, list, tuple, schemas.Unset] = schemas.unset,
        exos: typing.Union[MetaOapg.properties.exos, list, tuple, schemas.Unset] = schemas.unset,
        voss: typing.Union[MetaOapg.properties.voss, list, tuple, schemas.Unset] = schemas.unset,
        wing: typing.Union[MetaOapg.properties.wing, list, tuple, schemas.Unset] = schemas.unset,
        dell: typing.Union[MetaOapg.properties.dell, list, tuple, schemas.Unset] = schemas.unset,
        dt: typing.Union[MetaOapg.properties.dt, list, tuple, schemas.Unset] = schemas.unset,
        unmanaged: typing.Union[MetaOapg.properties.unmanaged, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAdvancedOnboardDeviceRequest':
        return super().__new__(
            cls,
            *_args,
            extreme=extreme,
            exos=exos,
            voss=voss,
            wing=wing,
            dell=dell,
            dt=dt,
            unmanaged=unmanaged,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_dell_device import XiqDellDevice
from extremecloudiq.model.xiq_digital_twin_onboard_device import XiqDigitalTwinOnboardDevice
from extremecloudiq.model.xiq_exos_device import XiqExosDevice
from extremecloudiq.model.xiq_extreme_device import XiqExtremeDevice
from extremecloudiq.model.xiq_voss_device import XiqVossDevice
from extremecloudiq.model.xiq_wing_device import XiqWingDevice
