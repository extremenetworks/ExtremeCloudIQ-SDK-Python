# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqClient(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The Client associate to ExtremeCloud IQ device
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "id",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            org_id = schemas.Int64Schema
            location_id = schemas.Int64Schema
            device_id = schemas.Int64Schema
            hostname = schemas.StrSchema
            mac_address = schemas.StrSchema
            ip_address = schemas.StrSchema
            ipv6_address = schemas.StrSchema
            os_type = schemas.StrSchema
            username = schemas.StrSchema
            user_profile_name = schemas.StrSchema
            connected = schemas.BoolSchema
            online_time = schemas.DateTimeSchema
            offline_time = schemas.DateTimeSchema
            vlan = schemas.Int32Schema
            connection_type = schemas.Int32Schema
            ssid = schemas.StrSchema
            port = schemas.StrSchema
            org_name = schemas.StrSchema
            device_function = schemas.Int32Schema
            device_mac_address = schemas.StrSchema
            device_name = schemas.StrSchema
            auth = schemas.Int32Schema
            channel = schemas.Int32Schema
            client_health = schemas.Int32Schema
            application_health = schemas.Int32Schema
            radio_health = schemas.Int32Schema
            network_health = schemas.Int32Schema
            radio_type = schemas.Int32Schema
            encryption_method = schemas.Int32Schema
            mac_protocol = schemas.StrSchema
            interface_name = schemas.StrSchema
            bssid = schemas.StrSchema
            rssi = schemas.Int32Schema
            snr = schemas.Int32Schema
            description = schemas.StrSchema
            category = schemas.StrSchema
            mobility = schemas.StrSchema
            port_type_name = schemas.StrSchema
            wing_ap = schemas.BoolSchema
            vendor = schemas.StrSchema
            
            
            class locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqLocationLegend']:
                        return XiqLocationLegend
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqLocationLegend'], typing.List['XiqLocationLegend']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'locations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqLocationLegend':
                    return super().__getitem__(i)
            product_type = schemas.StrSchema
            alias = schemas.StrSchema
            th_rloc16 = schemas.StrSchema
            th_child_id = schemas.Int32Schema
            th_timeout = schemas.Int64Schema
            th_supervision_interval = schemas.Int32Schema
            th_netdata_version = schemas.Int32Schema
            th_csl_synced = schemas.BoolSchema
            
            
            class th_ip_addresses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqThreadIpv6Setting']:
                        return XiqThreadIpv6Setting
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqThreadIpv6Setting'], typing.List['XiqThreadIpv6Setting']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'th_ip_addresses':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqThreadIpv6Setting':
                    return super().__getitem__(i)
            th_router_last_reported = schemas.DateTimeSchema
            thread_connected = schemas.BoolSchema
            make = schemas.StrSchema
            os_version = schemas.StrSchema
            connected_to = schemas.StrSchema
            connection_duration = schemas.Int64Schema
            captive_web_portal = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "org_id": org_id,
                "location_id": location_id,
                "device_id": device_id,
                "hostname": hostname,
                "mac_address": mac_address,
                "ip_address": ip_address,
                "ipv6_address": ipv6_address,
                "os_type": os_type,
                "username": username,
                "user_profile_name": user_profile_name,
                "connected": connected,
                "online_time": online_time,
                "offline_time": offline_time,
                "vlan": vlan,
                "connection_type": connection_type,
                "ssid": ssid,
                "port": port,
                "org_name": org_name,
                "device_function": device_function,
                "device_mac_address": device_mac_address,
                "device_name": device_name,
                "auth": auth,
                "channel": channel,
                "client_health": client_health,
                "application_health": application_health,
                "radio_health": radio_health,
                "network_health": network_health,
                "radio_type": radio_type,
                "encryption_method": encryption_method,
                "mac_protocol": mac_protocol,
                "interface_name": interface_name,
                "bssid": bssid,
                "rssi": rssi,
                "snr": snr,
                "description": description,
                "category": category,
                "mobility": mobility,
                "port_type_name": port_type_name,
                "wing_ap": wing_ap,
                "vendor": vendor,
                "locations": locations,
                "product_type": product_type,
                "alias": alias,
                "th_rloc16": th_rloc16,
                "th_child_id": th_child_id,
                "th_timeout": th_timeout,
                "th_supervision_interval": th_supervision_interval,
                "th_netdata_version": th_netdata_version,
                "th_csl_synced": th_csl_synced,
                "th_ip_addresses": th_ip_addresses,
                "th_router_last_reported": th_router_last_reported,
                "thread_connected": thread_connected,
                "make": make,
                "os_version": os_version,
                "connected_to": connected_to,
                "connection_duration": connection_duration,
                "captive_web_portal": captive_web_portal,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_address"]) -> MetaOapg.properties.mac_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6_address"]) -> MetaOapg.properties.ipv6_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["os_type"]) -> MetaOapg.properties.os_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_profile_name"]) -> MetaOapg.properties.user_profile_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected"]) -> MetaOapg.properties.connected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["online_time"]) -> MetaOapg.properties.online_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offline_time"]) -> MetaOapg.properties.offline_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vlan"]) -> MetaOapg.properties.vlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_type"]) -> MetaOapg.properties.connection_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssid"]) -> MetaOapg.properties.ssid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port"]) -> MetaOapg.properties.port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_name"]) -> MetaOapg.properties.org_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_function"]) -> MetaOapg.properties.device_function: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_mac_address"]) -> MetaOapg.properties.device_mac_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_name"]) -> MetaOapg.properties.device_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth"]) -> MetaOapg.properties.auth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_health"]) -> MetaOapg.properties.client_health: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_health"]) -> MetaOapg.properties.application_health: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_health"]) -> MetaOapg.properties.radio_health: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_health"]) -> MetaOapg.properties.network_health: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_type"]) -> MetaOapg.properties.radio_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryption_method"]) -> MetaOapg.properties.encryption_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_protocol"]) -> MetaOapg.properties.mac_protocol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interface_name"]) -> MetaOapg.properties.interface_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bssid"]) -> MetaOapg.properties.bssid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rssi"]) -> MetaOapg.properties.rssi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snr"]) -> MetaOapg.properties.snr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mobility"]) -> MetaOapg.properties.mobility: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["port_type_name"]) -> MetaOapg.properties.port_type_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wing_ap"]) -> MetaOapg.properties.wing_ap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locations"]) -> MetaOapg.properties.locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_type"]) -> MetaOapg.properties.product_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alias"]) -> MetaOapg.properties.alias: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["th_rloc16"]) -> MetaOapg.properties.th_rloc16: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["th_child_id"]) -> MetaOapg.properties.th_child_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["th_timeout"]) -> MetaOapg.properties.th_timeout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["th_supervision_interval"]) -> MetaOapg.properties.th_supervision_interval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["th_netdata_version"]) -> MetaOapg.properties.th_netdata_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["th_csl_synced"]) -> MetaOapg.properties.th_csl_synced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["th_ip_addresses"]) -> MetaOapg.properties.th_ip_addresses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["th_router_last_reported"]) -> MetaOapg.properties.th_router_last_reported: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread_connected"]) -> MetaOapg.properties.thread_connected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["make"]) -> MetaOapg.properties.make: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["os_version"]) -> MetaOapg.properties.os_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected_to"]) -> MetaOapg.properties.connected_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection_duration"]) -> MetaOapg.properties.connection_duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["captive_web_portal"]) -> MetaOapg.properties.captive_web_portal: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "location_id", "device_id", "hostname", "mac_address", "ip_address", "ipv6_address", "os_type", "username", "user_profile_name", "connected", "online_time", "offline_time", "vlan", "connection_type", "ssid", "port", "org_name", "device_function", "device_mac_address", "device_name", "auth", "channel", "client_health", "application_health", "radio_health", "network_health", "radio_type", "encryption_method", "mac_protocol", "interface_name", "bssid", "rssi", "snr", "description", "category", "mobility", "port_type_name", "wing_ap", "vendor", "locations", "product_type", "alias", "th_rloc16", "th_child_id", "th_timeout", "th_supervision_interval", "th_netdata_version", "th_csl_synced", "th_ip_addresses", "th_router_last_reported", "thread_connected", "make", "os_version", "connected_to", "connection_duration", "captive_web_portal", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_id"]) -> typing.Union[MetaOapg.properties.location_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> typing.Union[MetaOapg.properties.hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_address"]) -> typing.Union[MetaOapg.properties.mac_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> typing.Union[MetaOapg.properties.ip_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6_address"]) -> typing.Union[MetaOapg.properties.ipv6_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["os_type"]) -> typing.Union[MetaOapg.properties.os_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> typing.Union[MetaOapg.properties.username, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_profile_name"]) -> typing.Union[MetaOapg.properties.user_profile_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected"]) -> typing.Union[MetaOapg.properties.connected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["online_time"]) -> typing.Union[MetaOapg.properties.online_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offline_time"]) -> typing.Union[MetaOapg.properties.offline_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vlan"]) -> typing.Union[MetaOapg.properties.vlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_type"]) -> typing.Union[MetaOapg.properties.connection_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssid"]) -> typing.Union[MetaOapg.properties.ssid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port"]) -> typing.Union[MetaOapg.properties.port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_name"]) -> typing.Union[MetaOapg.properties.org_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_function"]) -> typing.Union[MetaOapg.properties.device_function, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_mac_address"]) -> typing.Union[MetaOapg.properties.device_mac_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_name"]) -> typing.Union[MetaOapg.properties.device_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth"]) -> typing.Union[MetaOapg.properties.auth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union[MetaOapg.properties.channel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_health"]) -> typing.Union[MetaOapg.properties.client_health, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_health"]) -> typing.Union[MetaOapg.properties.application_health, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_health"]) -> typing.Union[MetaOapg.properties.radio_health, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_health"]) -> typing.Union[MetaOapg.properties.network_health, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_type"]) -> typing.Union[MetaOapg.properties.radio_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryption_method"]) -> typing.Union[MetaOapg.properties.encryption_method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_protocol"]) -> typing.Union[MetaOapg.properties.mac_protocol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interface_name"]) -> typing.Union[MetaOapg.properties.interface_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bssid"]) -> typing.Union[MetaOapg.properties.bssid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rssi"]) -> typing.Union[MetaOapg.properties.rssi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snr"]) -> typing.Union[MetaOapg.properties.snr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union[MetaOapg.properties.category, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mobility"]) -> typing.Union[MetaOapg.properties.mobility, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["port_type_name"]) -> typing.Union[MetaOapg.properties.port_type_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wing_ap"]) -> typing.Union[MetaOapg.properties.wing_ap, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> typing.Union[MetaOapg.properties.vendor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> typing.Union[MetaOapg.properties.locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_type"]) -> typing.Union[MetaOapg.properties.product_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alias"]) -> typing.Union[MetaOapg.properties.alias, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["th_rloc16"]) -> typing.Union[MetaOapg.properties.th_rloc16, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["th_child_id"]) -> typing.Union[MetaOapg.properties.th_child_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["th_timeout"]) -> typing.Union[MetaOapg.properties.th_timeout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["th_supervision_interval"]) -> typing.Union[MetaOapg.properties.th_supervision_interval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["th_netdata_version"]) -> typing.Union[MetaOapg.properties.th_netdata_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["th_csl_synced"]) -> typing.Union[MetaOapg.properties.th_csl_synced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["th_ip_addresses"]) -> typing.Union[MetaOapg.properties.th_ip_addresses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["th_router_last_reported"]) -> typing.Union[MetaOapg.properties.th_router_last_reported, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread_connected"]) -> typing.Union[MetaOapg.properties.thread_connected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["make"]) -> typing.Union[MetaOapg.properties.make, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["os_version"]) -> typing.Union[MetaOapg.properties.os_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected_to"]) -> typing.Union[MetaOapg.properties.connected_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection_duration"]) -> typing.Union[MetaOapg.properties.connection_duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["captive_web_portal"]) -> typing.Union[MetaOapg.properties.captive_web_portal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "location_id", "device_id", "hostname", "mac_address", "ip_address", "ipv6_address", "os_type", "username", "user_profile_name", "connected", "online_time", "offline_time", "vlan", "connection_type", "ssid", "port", "org_name", "device_function", "device_mac_address", "device_name", "auth", "channel", "client_health", "application_health", "radio_health", "network_health", "radio_type", "encryption_method", "mac_protocol", "interface_name", "bssid", "rssi", "snr", "description", "category", "mobility", "port_type_name", "wing_ap", "vendor", "locations", "product_type", "alias", "th_rloc16", "th_child_id", "th_timeout", "th_supervision_interval", "th_netdata_version", "th_csl_synced", "th_ip_addresses", "th_router_last_reported", "thread_connected", "make", "os_version", "connected_to", "connection_duration", "captive_web_portal", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        location_id: typing.Union[MetaOapg.properties.location_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_id: typing.Union[MetaOapg.properties.device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hostname: typing.Union[MetaOapg.properties.hostname, str, schemas.Unset] = schemas.unset,
        mac_address: typing.Union[MetaOapg.properties.mac_address, str, schemas.Unset] = schemas.unset,
        ip_address: typing.Union[MetaOapg.properties.ip_address, str, schemas.Unset] = schemas.unset,
        ipv6_address: typing.Union[MetaOapg.properties.ipv6_address, str, schemas.Unset] = schemas.unset,
        os_type: typing.Union[MetaOapg.properties.os_type, str, schemas.Unset] = schemas.unset,
        username: typing.Union[MetaOapg.properties.username, str, schemas.Unset] = schemas.unset,
        user_profile_name: typing.Union[MetaOapg.properties.user_profile_name, str, schemas.Unset] = schemas.unset,
        connected: typing.Union[MetaOapg.properties.connected, bool, schemas.Unset] = schemas.unset,
        online_time: typing.Union[MetaOapg.properties.online_time, str, datetime, schemas.Unset] = schemas.unset,
        offline_time: typing.Union[MetaOapg.properties.offline_time, str, datetime, schemas.Unset] = schemas.unset,
        vlan: typing.Union[MetaOapg.properties.vlan, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        connection_type: typing.Union[MetaOapg.properties.connection_type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ssid: typing.Union[MetaOapg.properties.ssid, str, schemas.Unset] = schemas.unset,
        port: typing.Union[MetaOapg.properties.port, str, schemas.Unset] = schemas.unset,
        org_name: typing.Union[MetaOapg.properties.org_name, str, schemas.Unset] = schemas.unset,
        device_function: typing.Union[MetaOapg.properties.device_function, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_mac_address: typing.Union[MetaOapg.properties.device_mac_address, str, schemas.Unset] = schemas.unset,
        device_name: typing.Union[MetaOapg.properties.device_name, str, schemas.Unset] = schemas.unset,
        auth: typing.Union[MetaOapg.properties.auth, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel: typing.Union[MetaOapg.properties.channel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        client_health: typing.Union[MetaOapg.properties.client_health, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        application_health: typing.Union[MetaOapg.properties.application_health, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        radio_health: typing.Union[MetaOapg.properties.radio_health, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        network_health: typing.Union[MetaOapg.properties.network_health, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        radio_type: typing.Union[MetaOapg.properties.radio_type, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        encryption_method: typing.Union[MetaOapg.properties.encryption_method, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mac_protocol: typing.Union[MetaOapg.properties.mac_protocol, str, schemas.Unset] = schemas.unset,
        interface_name: typing.Union[MetaOapg.properties.interface_name, str, schemas.Unset] = schemas.unset,
        bssid: typing.Union[MetaOapg.properties.bssid, str, schemas.Unset] = schemas.unset,
        rssi: typing.Union[MetaOapg.properties.rssi, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        snr: typing.Union[MetaOapg.properties.snr, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        category: typing.Union[MetaOapg.properties.category, str, schemas.Unset] = schemas.unset,
        mobility: typing.Union[MetaOapg.properties.mobility, str, schemas.Unset] = schemas.unset,
        port_type_name: typing.Union[MetaOapg.properties.port_type_name, str, schemas.Unset] = schemas.unset,
        wing_ap: typing.Union[MetaOapg.properties.wing_ap, bool, schemas.Unset] = schemas.unset,
        vendor: typing.Union[MetaOapg.properties.vendor, str, schemas.Unset] = schemas.unset,
        locations: typing.Union[MetaOapg.properties.locations, list, tuple, schemas.Unset] = schemas.unset,
        product_type: typing.Union[MetaOapg.properties.product_type, str, schemas.Unset] = schemas.unset,
        alias: typing.Union[MetaOapg.properties.alias, str, schemas.Unset] = schemas.unset,
        th_rloc16: typing.Union[MetaOapg.properties.th_rloc16, str, schemas.Unset] = schemas.unset,
        th_child_id: typing.Union[MetaOapg.properties.th_child_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        th_timeout: typing.Union[MetaOapg.properties.th_timeout, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        th_supervision_interval: typing.Union[MetaOapg.properties.th_supervision_interval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        th_netdata_version: typing.Union[MetaOapg.properties.th_netdata_version, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        th_csl_synced: typing.Union[MetaOapg.properties.th_csl_synced, bool, schemas.Unset] = schemas.unset,
        th_ip_addresses: typing.Union[MetaOapg.properties.th_ip_addresses, list, tuple, schemas.Unset] = schemas.unset,
        th_router_last_reported: typing.Union[MetaOapg.properties.th_router_last_reported, str, datetime, schemas.Unset] = schemas.unset,
        thread_connected: typing.Union[MetaOapg.properties.thread_connected, bool, schemas.Unset] = schemas.unset,
        make: typing.Union[MetaOapg.properties.make, str, schemas.Unset] = schemas.unset,
        os_version: typing.Union[MetaOapg.properties.os_version, str, schemas.Unset] = schemas.unset,
        connected_to: typing.Union[MetaOapg.properties.connected_to, str, schemas.Unset] = schemas.unset,
        connection_duration: typing.Union[MetaOapg.properties.connection_duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        captive_web_portal: typing.Union[MetaOapg.properties.captive_web_portal, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqClient':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            id=id,
            org_id=org_id,
            location_id=location_id,
            device_id=device_id,
            hostname=hostname,
            mac_address=mac_address,
            ip_address=ip_address,
            ipv6_address=ipv6_address,
            os_type=os_type,
            username=username,
            user_profile_name=user_profile_name,
            connected=connected,
            online_time=online_time,
            offline_time=offline_time,
            vlan=vlan,
            connection_type=connection_type,
            ssid=ssid,
            port=port,
            org_name=org_name,
            device_function=device_function,
            device_mac_address=device_mac_address,
            device_name=device_name,
            auth=auth,
            channel=channel,
            client_health=client_health,
            application_health=application_health,
            radio_health=radio_health,
            network_health=network_health,
            radio_type=radio_type,
            encryption_method=encryption_method,
            mac_protocol=mac_protocol,
            interface_name=interface_name,
            bssid=bssid,
            rssi=rssi,
            snr=snr,
            description=description,
            category=category,
            mobility=mobility,
            port_type_name=port_type_name,
            wing_ap=wing_ap,
            vendor=vendor,
            locations=locations,
            product_type=product_type,
            alias=alias,
            th_rloc16=th_rloc16,
            th_child_id=th_child_id,
            th_timeout=th_timeout,
            th_supervision_interval=th_supervision_interval,
            th_netdata_version=th_netdata_version,
            th_csl_synced=th_csl_synced,
            th_ip_addresses=th_ip_addresses,
            th_router_last_reported=th_router_last_reported,
            thread_connected=thread_connected,
            make=make,
            os_version=os_version,
            connected_to=connected_to,
            connection_duration=connection_duration,
            captive_web_portal=captive_web_portal,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_location_legend import XiqLocationLegend
from extremecloudiq.model.xiq_thread_ipv6_setting import XiqThreadIpv6Setting
