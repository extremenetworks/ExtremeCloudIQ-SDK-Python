# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAnomaliesFeedbackRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Copilot Anomalies Feedback Request
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def anomaly_type() -> typing.Type['XiqAnomalyType']:
                return XiqAnomalyType
            anomaly_id = schemas.StrSchema
        
            @staticmethod
            def feedback_type() -> typing.Type['XiqFeedbackType']:
                return XiqFeedbackType
            feedback = schemas.StrSchema
            __annotations__ = {
                "anomaly_type": anomaly_type,
                "anomaly_id": anomaly_id,
                "feedback_type": feedback_type,
                "feedback": feedback,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anomaly_type"]) -> 'XiqAnomalyType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anomaly_id"]) -> MetaOapg.properties.anomaly_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedback_type"]) -> 'XiqFeedbackType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feedback"]) -> MetaOapg.properties.feedback: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["anomaly_type", "anomaly_id", "feedback_type", "feedback", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anomaly_type"]) -> typing.Union['XiqAnomalyType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anomaly_id"]) -> typing.Union[MetaOapg.properties.anomaly_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedback_type"]) -> typing.Union['XiqFeedbackType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feedback"]) -> typing.Union[MetaOapg.properties.feedback, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["anomaly_type", "anomaly_id", "feedback_type", "feedback", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        anomaly_type: typing.Union['XiqAnomalyType', schemas.Unset] = schemas.unset,
        anomaly_id: typing.Union[MetaOapg.properties.anomaly_id, str, schemas.Unset] = schemas.unset,
        feedback_type: typing.Union['XiqFeedbackType', schemas.Unset] = schemas.unset,
        feedback: typing.Union[MetaOapg.properties.feedback, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAnomaliesFeedbackRequest':
        return super().__new__(
            cls,
            *_args,
            anomaly_type=anomaly_type,
            anomaly_id=anomaly_id,
            feedback_type=feedback_type,
            feedback=feedback,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_anomaly_type import XiqAnomalyType
from extremecloudiq.model.xiq_feedback_type import XiqFeedbackType
