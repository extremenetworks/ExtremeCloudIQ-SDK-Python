# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqSchedule(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The OS object.
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
        
            @staticmethod
            def schedule_type() -> typing.Type['XiqScheduleType']:
                return XiqScheduleType
            start_date = schemas.StrSchema
            end_date = schemas.StrSchema
            start_time = schemas.StrSchema
            end_time = schemas.StrSchema
        
            @staticmethod
            def recurrence_type() -> typing.Type['XiqRecurrenceType']:
                return XiqRecurrenceType
        
            @staticmethod
            def weekday_from() -> typing.Type['XiqWeekday']:
                return XiqWeekday
        
            @staticmethod
            def weekday_to() -> typing.Type['XiqWeekday']:
                return XiqWeekday
            start_time2 = schemas.StrSchema
            end_time2 = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "schedule_type": schedule_type,
                "start_date": start_date,
                "end_date": end_date,
                "start_time": start_time,
                "end_time": end_time,
                "recurrence_type": recurrence_type,
                "weekday_from": weekday_from,
                "weekday_to": weekday_to,
                "start_time2": start_time2,
                "end_time2": end_time2,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule_type"]) -> 'XiqScheduleType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurrence_type"]) -> 'XiqRecurrenceType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weekday_from"]) -> 'XiqWeekday': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weekday_to"]) -> 'XiqWeekday': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time2"]) -> MetaOapg.properties.start_time2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time2"]) -> MetaOapg.properties.end_time2: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "schedule_type", "start_date", "end_date", "start_time", "end_time", "recurrence_type", "weekday_from", "weekday_to", "start_time2", "end_time2", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule_type"]) -> typing.Union['XiqScheduleType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> typing.Union[MetaOapg.properties.start_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> typing.Union[MetaOapg.properties.end_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurrence_type"]) -> typing.Union['XiqRecurrenceType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weekday_from"]) -> typing.Union['XiqWeekday', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weekday_to"]) -> typing.Union['XiqWeekday', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time2"]) -> typing.Union[MetaOapg.properties.start_time2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time2"]) -> typing.Union[MetaOapg.properties.end_time2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "schedule_type", "start_date", "end_date", "start_time", "end_time", "recurrence_type", "weekday_from", "weekday_to", "start_time2", "end_time2", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        schedule_type: typing.Union['XiqScheduleType', schemas.Unset] = schemas.unset,
        start_date: typing.Union[MetaOapg.properties.start_date, str, schemas.Unset] = schemas.unset,
        end_date: typing.Union[MetaOapg.properties.end_date, str, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, str, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, str, schemas.Unset] = schemas.unset,
        recurrence_type: typing.Union['XiqRecurrenceType', schemas.Unset] = schemas.unset,
        weekday_from: typing.Union['XiqWeekday', schemas.Unset] = schemas.unset,
        weekday_to: typing.Union['XiqWeekday', schemas.Unset] = schemas.unset,
        start_time2: typing.Union[MetaOapg.properties.start_time2, str, schemas.Unset] = schemas.unset,
        end_time2: typing.Union[MetaOapg.properties.end_time2, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqSchedule':
        return super().__new__(
            cls,
            *_args,
            description=description,
            schedule_type=schedule_type,
            start_date=start_date,
            end_date=end_date,
            start_time=start_time,
            end_time=end_time,
            recurrence_type=recurrence_type,
            weekday_from=weekday_from,
            weekday_to=weekday_to,
            start_time2=start_time2,
            end_time2=end_time2,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_recurrence_type import XiqRecurrenceType
from extremecloudiq.model.xiq_schedule_type import XiqScheduleType
from extremecloudiq.model.xiq_weekday import XiqWeekday
