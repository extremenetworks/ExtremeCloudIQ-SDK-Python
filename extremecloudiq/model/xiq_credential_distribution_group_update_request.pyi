# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqCredentialDistributionGroupUpdateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "employee_group_type",
            "enable_email_approval",
            "name",
            "enable_user_limitation",
        }
        
        class properties:
            name = schemas.StrSchema
            enable_email_approval = schemas.BoolSchema
            enable_user_limitation = schemas.BoolSchema
        
            @staticmethod
            def employee_group_type() -> typing.Type['XiqEmployeeGroupType']:
                return XiqEmployeeGroupType
            
            
            class employee_groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqEmployeeGroupUpdate']:
                        return XiqEmployeeGroupUpdate
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqEmployeeGroupUpdate'], typing.List['XiqEmployeeGroupUpdate']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employee_groups':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqEmployeeGroupUpdate':
                    return super().__getitem__(i)
            restrict_number = schemas.Int32Schema
            
            
            class user_group_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_group_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "enable_email_approval": enable_email_approval,
                "enable_user_limitation": enable_user_limitation,
                "employee_group_type": employee_group_type,
                "employee_groups": employee_groups,
                "restrict_number": restrict_number,
                "user_group_ids": user_group_ids,
            }
    
    employee_group_type: 'XiqEmployeeGroupType'
    enable_email_approval: MetaOapg.properties.enable_email_approval
    name: MetaOapg.properties.name
    enable_user_limitation: MetaOapg.properties.enable_user_limitation
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_email_approval"]) -> MetaOapg.properties.enable_email_approval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_user_limitation"]) -> MetaOapg.properties.enable_user_limitation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_group_type"]) -> 'XiqEmployeeGroupType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_groups"]) -> MetaOapg.properties.employee_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restrict_number"]) -> MetaOapg.properties.restrict_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_group_ids"]) -> MetaOapg.properties.user_group_ids: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "enable_email_approval", "enable_user_limitation", "employee_group_type", "employee_groups", "restrict_number", "user_group_ids", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_email_approval"]) -> MetaOapg.properties.enable_email_approval: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_user_limitation"]) -> MetaOapg.properties.enable_user_limitation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_group_type"]) -> 'XiqEmployeeGroupType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_groups"]) -> typing.Union[MetaOapg.properties.employee_groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restrict_number"]) -> typing.Union[MetaOapg.properties.restrict_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_group_ids"]) -> typing.Union[MetaOapg.properties.user_group_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "enable_email_approval", "enable_user_limitation", "employee_group_type", "employee_groups", "restrict_number", "user_group_ids", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        employee_group_type: 'XiqEmployeeGroupType',
        enable_email_approval: typing.Union[MetaOapg.properties.enable_email_approval, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        enable_user_limitation: typing.Union[MetaOapg.properties.enable_user_limitation, bool, ],
        employee_groups: typing.Union[MetaOapg.properties.employee_groups, list, tuple, schemas.Unset] = schemas.unset,
        restrict_number: typing.Union[MetaOapg.properties.restrict_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        user_group_ids: typing.Union[MetaOapg.properties.user_group_ids, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqCredentialDistributionGroupUpdateRequest':
        return super().__new__(
            cls,
            *_args,
            employee_group_type=employee_group_type,
            enable_email_approval=enable_email_approval,
            name=name,
            enable_user_limitation=enable_user_limitation,
            employee_groups=employee_groups,
            restrict_number=restrict_number,
            user_group_ids=user_group_ids,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_employee_group_type import XiqEmployeeGroupType
from extremecloudiq.model.xiq_employee_group_update import XiqEmployeeGroupUpdate
