# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqClientHealthFrequencyDistribution(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Wireless clients count with frequency distribution
    """


    class MetaOapg:
        
        class properties:
            total_clients = schemas.Int64Schema
            wired = schemas.Int64Schema
            thread = schemas.Int64Schema
            clients_2dot4GHz = schemas.Int64Schema
            clients_5GHz = schemas.Int64Schema
            clients_6GHz = schemas.Int64Schema
            __annotations__ = {
                "total_clients": total_clients,
                "wired": wired,
                "thread": thread,
                "clients_2dot4GHz": clients_2dot4GHz,
                "clients_5GHz": clients_5GHz,
                "clients_6GHz": clients_6GHz,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_clients"]) -> MetaOapg.properties.total_clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wired"]) -> MetaOapg.properties.wired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread"]) -> MetaOapg.properties.thread: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clients_2dot4GHz"]) -> MetaOapg.properties.clients_2dot4GHz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clients_5GHz"]) -> MetaOapg.properties.clients_5GHz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clients_6GHz"]) -> MetaOapg.properties.clients_6GHz: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_clients", "wired", "thread", "clients_2dot4GHz", "clients_5GHz", "clients_6GHz", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_clients"]) -> typing.Union[MetaOapg.properties.total_clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wired"]) -> typing.Union[MetaOapg.properties.wired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread"]) -> typing.Union[MetaOapg.properties.thread, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clients_2dot4GHz"]) -> typing.Union[MetaOapg.properties.clients_2dot4GHz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clients_5GHz"]) -> typing.Union[MetaOapg.properties.clients_5GHz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clients_6GHz"]) -> typing.Union[MetaOapg.properties.clients_6GHz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_clients", "wired", "thread", "clients_2dot4GHz", "clients_5GHz", "clients_6GHz", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        total_clients: typing.Union[MetaOapg.properties.total_clients, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wired: typing.Union[MetaOapg.properties.wired, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        thread: typing.Union[MetaOapg.properties.thread, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        clients_2dot4GHz: typing.Union[MetaOapg.properties.clients_2dot4GHz, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        clients_5GHz: typing.Union[MetaOapg.properties.clients_5GHz, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        clients_6GHz: typing.Union[MetaOapg.properties.clients_6GHz, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqClientHealthFrequencyDistribution':
        return super().__new__(
            cls,
            *_args,
            total_clients=total_clients,
            wired=wired,
            thread=thread,
            clients_2dot4GHz=clients_2dot4GHz,
            clients_5GHz=clients_5GHz,
            clients_6GHz=clients_6GHz,
            _configuration=_configuration,
            **kwargs,
        )
