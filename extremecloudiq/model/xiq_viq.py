# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqViq(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            devices = schemas.Int32Schema
            standalone = schemas.BoolSchema
            expired = schemas.BoolSchema
            customer_id = schemas.StrSchema
            vhm_id = schemas.StrSchema
            owner_id = schemas.Int64Schema
            
            
            class licenses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqViqLicense']:
                        return XiqViqLicense
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqViqLicense'], typing.List['XiqViqLicense']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'licenses':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqViqLicense':
                    return super().__getitem__(i)
            partner_id = schemas.StrSchema
            partner_email = schemas.StrSchema
            __annotations__ = {
                "devices": devices,
                "standalone": standalone,
                "expired": expired,
                "customer_id": customer_id,
                "vhm_id": vhm_id,
                "owner_id": owner_id,
                "licenses": licenses,
                "partner_id": partner_id,
                "partner_email": partner_email,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["devices"]) -> MetaOapg.properties.devices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standalone"]) -> MetaOapg.properties.standalone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expired"]) -> MetaOapg.properties.expired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer_id"]) -> MetaOapg.properties.customer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vhm_id"]) -> MetaOapg.properties.vhm_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["licenses"]) -> MetaOapg.properties.licenses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partner_id"]) -> MetaOapg.properties.partner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partner_email"]) -> MetaOapg.properties.partner_email: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["devices", "standalone", "expired", "customer_id", "vhm_id", "owner_id", "licenses", "partner_id", "partner_email", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["devices"]) -> typing.Union[MetaOapg.properties.devices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standalone"]) -> typing.Union[MetaOapg.properties.standalone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expired"]) -> typing.Union[MetaOapg.properties.expired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer_id"]) -> typing.Union[MetaOapg.properties.customer_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vhm_id"]) -> typing.Union[MetaOapg.properties.vhm_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["licenses"]) -> typing.Union[MetaOapg.properties.licenses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partner_id"]) -> typing.Union[MetaOapg.properties.partner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partner_email"]) -> typing.Union[MetaOapg.properties.partner_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["devices", "standalone", "expired", "customer_id", "vhm_id", "owner_id", "licenses", "partner_id", "partner_email", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        devices: typing.Union[MetaOapg.properties.devices, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        standalone: typing.Union[MetaOapg.properties.standalone, bool, schemas.Unset] = schemas.unset,
        expired: typing.Union[MetaOapg.properties.expired, bool, schemas.Unset] = schemas.unset,
        customer_id: typing.Union[MetaOapg.properties.customer_id, str, schemas.Unset] = schemas.unset,
        vhm_id: typing.Union[MetaOapg.properties.vhm_id, str, schemas.Unset] = schemas.unset,
        owner_id: typing.Union[MetaOapg.properties.owner_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        licenses: typing.Union[MetaOapg.properties.licenses, list, tuple, schemas.Unset] = schemas.unset,
        partner_id: typing.Union[MetaOapg.properties.partner_id, str, schemas.Unset] = schemas.unset,
        partner_email: typing.Union[MetaOapg.properties.partner_email, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqViq':
        return super().__new__(
            cls,
            *_args,
            devices=devices,
            standalone=standalone,
            expired=expired,
            customer_id=customer_id,
            vhm_id=vhm_id,
            owner_id=owner_id,
            licenses=licenses,
            partner_id=partner_id,
            partner_email=partner_email,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_viq_license import XiqViqLicense
