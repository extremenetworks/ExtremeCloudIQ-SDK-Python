# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDevice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Generic ExtremeCloud IQ Device model
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "id",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            org_id = schemas.Int64Schema
            serial_number = schemas.StrSchema
            service_tag = schemas.StrSchema
            mac_address = schemas.StrSchema
        
            @staticmethod
            def device_function() -> typing.Type['XiqDeviceFunction']:
                return XiqDeviceFunction
            product_type = schemas.StrSchema
            hostname = schemas.StrSchema
            ip_address = schemas.StrSchema
            software_version = schemas.StrSchema
        
            @staticmethod
            def device_admin_state() -> typing.Type['XiqDeviceAdminState']:
                return XiqDeviceAdminState
            connected = schemas.BoolSchema
            last_connect_time = schemas.DateTimeSchema
            network_policy_name = schemas.StrSchema
            network_policy_id = schemas.Int64Schema
            primary_ntp_server_address = schemas.StrSchema
            primary_dns_server_address = schemas.StrSchema
            subnet_mask = schemas.StrSchema
            default_gateway = schemas.StrSchema
            ipv6_address = schemas.StrSchema
            ipv6_netmask = schemas.Int32Schema
            simulated = schemas.BoolSchema
            display_version = schemas.StrSchema
            active_clients = schemas.Int32Schema
            location_id = schemas.Int64Schema
            
            
            class locations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqLocationLegend']:
                        return XiqLocationLegend
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqLocationLegend'], typing.List['XiqLocationLegend']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'locations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqLocationLegend':
                    return super().__getitem__(i)
            country_code = schemas.Int32Schema
            description = schemas.StrSchema
            
            
            class lldp_cdp_infos(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqDeviceLldpCdpInfo']:
                        return XiqDeviceLldpCdpInfo
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqDeviceLldpCdpInfo'], typing.List['XiqDeviceLldpCdpInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lldp_cdp_infos':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqDeviceLldpCdpInfo':
                    return super().__getitem__(i)
            system_up_time = schemas.Int64Schema
            config_mismatch = schemas.BoolSchema
            managed_by = schemas.StrSchema
            thread0_eui64 = schemas.StrSchema
            thread0_ext_mac = schemas.StrSchema
            mgt_vlan = schemas.Int32Schema
            
            
            class images_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'images_names':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            visible = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "org_id": org_id,
                "serial_number": serial_number,
                "service_tag": service_tag,
                "mac_address": mac_address,
                "device_function": device_function,
                "product_type": product_type,
                "hostname": hostname,
                "ip_address": ip_address,
                "software_version": software_version,
                "device_admin_state": device_admin_state,
                "connected": connected,
                "last_connect_time": last_connect_time,
                "network_policy_name": network_policy_name,
                "network_policy_id": network_policy_id,
                "primary_ntp_server_address": primary_ntp_server_address,
                "primary_dns_server_address": primary_dns_server_address,
                "subnet_mask": subnet_mask,
                "default_gateway": default_gateway,
                "ipv6_address": ipv6_address,
                "ipv6_netmask": ipv6_netmask,
                "simulated": simulated,
                "display_version": display_version,
                "active_clients": active_clients,
                "location_id": location_id,
                "locations": locations,
                "country_code": country_code,
                "description": description,
                "lldp_cdp_infos": lldp_cdp_infos,
                "system_up_time": system_up_time,
                "config_mismatch": config_mismatch,
                "managed_by": managed_by,
                "thread0_eui64": thread0_eui64,
                "thread0_ext_mac": thread0_ext_mac,
                "mgt_vlan": mgt_vlan,
                "images_names": images_names,
                "visible": visible,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_tag"]) -> MetaOapg.properties.service_tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_address"]) -> MetaOapg.properties.mac_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_function"]) -> 'XiqDeviceFunction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_type"]) -> MetaOapg.properties.product_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["software_version"]) -> MetaOapg.properties.software_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_admin_state"]) -> 'XiqDeviceAdminState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected"]) -> MetaOapg.properties.connected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_connect_time"]) -> MetaOapg.properties.last_connect_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_policy_name"]) -> MetaOapg.properties.network_policy_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_policy_id"]) -> MetaOapg.properties.network_policy_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_ntp_server_address"]) -> MetaOapg.properties.primary_ntp_server_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_dns_server_address"]) -> MetaOapg.properties.primary_dns_server_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subnet_mask"]) -> MetaOapg.properties.subnet_mask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_gateway"]) -> MetaOapg.properties.default_gateway: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6_address"]) -> MetaOapg.properties.ipv6_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6_netmask"]) -> MetaOapg.properties.ipv6_netmask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["simulated"]) -> MetaOapg.properties.simulated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_version"]) -> MetaOapg.properties.display_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active_clients"]) -> MetaOapg.properties.active_clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locations"]) -> MetaOapg.properties.locations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lldp_cdp_infos"]) -> MetaOapg.properties.lldp_cdp_infos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_up_time"]) -> MetaOapg.properties.system_up_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config_mismatch"]) -> MetaOapg.properties.config_mismatch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managed_by"]) -> MetaOapg.properties.managed_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread0_eui64"]) -> MetaOapg.properties.thread0_eui64: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thread0_ext_mac"]) -> MetaOapg.properties.thread0_ext_mac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mgt_vlan"]) -> MetaOapg.properties.mgt_vlan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images_names"]) -> MetaOapg.properties.images_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "serial_number", "service_tag", "mac_address", "device_function", "product_type", "hostname", "ip_address", "software_version", "device_admin_state", "connected", "last_connect_time", "network_policy_name", "network_policy_id", "primary_ntp_server_address", "primary_dns_server_address", "subnet_mask", "default_gateway", "ipv6_address", "ipv6_netmask", "simulated", "display_version", "active_clients", "location_id", "locations", "country_code", "description", "lldp_cdp_infos", "system_up_time", "config_mismatch", "managed_by", "thread0_eui64", "thread0_ext_mac", "mgt_vlan", "images_names", "visible", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_tag"]) -> typing.Union[MetaOapg.properties.service_tag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_address"]) -> typing.Union[MetaOapg.properties.mac_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_function"]) -> typing.Union['XiqDeviceFunction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_type"]) -> typing.Union[MetaOapg.properties.product_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> typing.Union[MetaOapg.properties.hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> typing.Union[MetaOapg.properties.ip_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["software_version"]) -> typing.Union[MetaOapg.properties.software_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_admin_state"]) -> typing.Union['XiqDeviceAdminState', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected"]) -> typing.Union[MetaOapg.properties.connected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_connect_time"]) -> typing.Union[MetaOapg.properties.last_connect_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_policy_name"]) -> typing.Union[MetaOapg.properties.network_policy_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_policy_id"]) -> typing.Union[MetaOapg.properties.network_policy_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_ntp_server_address"]) -> typing.Union[MetaOapg.properties.primary_ntp_server_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_dns_server_address"]) -> typing.Union[MetaOapg.properties.primary_dns_server_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subnet_mask"]) -> typing.Union[MetaOapg.properties.subnet_mask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_gateway"]) -> typing.Union[MetaOapg.properties.default_gateway, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6_address"]) -> typing.Union[MetaOapg.properties.ipv6_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6_netmask"]) -> typing.Union[MetaOapg.properties.ipv6_netmask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["simulated"]) -> typing.Union[MetaOapg.properties.simulated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_version"]) -> typing.Union[MetaOapg.properties.display_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active_clients"]) -> typing.Union[MetaOapg.properties.active_clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_id"]) -> typing.Union[MetaOapg.properties.location_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> typing.Union[MetaOapg.properties.locations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lldp_cdp_infos"]) -> typing.Union[MetaOapg.properties.lldp_cdp_infos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_up_time"]) -> typing.Union[MetaOapg.properties.system_up_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config_mismatch"]) -> typing.Union[MetaOapg.properties.config_mismatch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managed_by"]) -> typing.Union[MetaOapg.properties.managed_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread0_eui64"]) -> typing.Union[MetaOapg.properties.thread0_eui64, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thread0_ext_mac"]) -> typing.Union[MetaOapg.properties.thread0_ext_mac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mgt_vlan"]) -> typing.Union[MetaOapg.properties.mgt_vlan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images_names"]) -> typing.Union[MetaOapg.properties.images_names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visible"]) -> typing.Union[MetaOapg.properties.visible, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "serial_number", "service_tag", "mac_address", "device_function", "product_type", "hostname", "ip_address", "software_version", "device_admin_state", "connected", "last_connect_time", "network_policy_name", "network_policy_id", "primary_ntp_server_address", "primary_dns_server_address", "subnet_mask", "default_gateway", "ipv6_address", "ipv6_netmask", "simulated", "display_version", "active_clients", "location_id", "locations", "country_code", "description", "lldp_cdp_infos", "system_up_time", "config_mismatch", "managed_by", "thread0_eui64", "thread0_ext_mac", "mgt_vlan", "images_names", "visible", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
        service_tag: typing.Union[MetaOapg.properties.service_tag, str, schemas.Unset] = schemas.unset,
        mac_address: typing.Union[MetaOapg.properties.mac_address, str, schemas.Unset] = schemas.unset,
        device_function: typing.Union['XiqDeviceFunction', schemas.Unset] = schemas.unset,
        product_type: typing.Union[MetaOapg.properties.product_type, str, schemas.Unset] = schemas.unset,
        hostname: typing.Union[MetaOapg.properties.hostname, str, schemas.Unset] = schemas.unset,
        ip_address: typing.Union[MetaOapg.properties.ip_address, str, schemas.Unset] = schemas.unset,
        software_version: typing.Union[MetaOapg.properties.software_version, str, schemas.Unset] = schemas.unset,
        device_admin_state: typing.Union['XiqDeviceAdminState', schemas.Unset] = schemas.unset,
        connected: typing.Union[MetaOapg.properties.connected, bool, schemas.Unset] = schemas.unset,
        last_connect_time: typing.Union[MetaOapg.properties.last_connect_time, str, datetime, schemas.Unset] = schemas.unset,
        network_policy_name: typing.Union[MetaOapg.properties.network_policy_name, str, schemas.Unset] = schemas.unset,
        network_policy_id: typing.Union[MetaOapg.properties.network_policy_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        primary_ntp_server_address: typing.Union[MetaOapg.properties.primary_ntp_server_address, str, schemas.Unset] = schemas.unset,
        primary_dns_server_address: typing.Union[MetaOapg.properties.primary_dns_server_address, str, schemas.Unset] = schemas.unset,
        subnet_mask: typing.Union[MetaOapg.properties.subnet_mask, str, schemas.Unset] = schemas.unset,
        default_gateway: typing.Union[MetaOapg.properties.default_gateway, str, schemas.Unset] = schemas.unset,
        ipv6_address: typing.Union[MetaOapg.properties.ipv6_address, str, schemas.Unset] = schemas.unset,
        ipv6_netmask: typing.Union[MetaOapg.properties.ipv6_netmask, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        simulated: typing.Union[MetaOapg.properties.simulated, bool, schemas.Unset] = schemas.unset,
        display_version: typing.Union[MetaOapg.properties.display_version, str, schemas.Unset] = schemas.unset,
        active_clients: typing.Union[MetaOapg.properties.active_clients, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        location_id: typing.Union[MetaOapg.properties.location_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        locations: typing.Union[MetaOapg.properties.locations, list, tuple, schemas.Unset] = schemas.unset,
        country_code: typing.Union[MetaOapg.properties.country_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        lldp_cdp_infos: typing.Union[MetaOapg.properties.lldp_cdp_infos, list, tuple, schemas.Unset] = schemas.unset,
        system_up_time: typing.Union[MetaOapg.properties.system_up_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        config_mismatch: typing.Union[MetaOapg.properties.config_mismatch, bool, schemas.Unset] = schemas.unset,
        managed_by: typing.Union[MetaOapg.properties.managed_by, str, schemas.Unset] = schemas.unset,
        thread0_eui64: typing.Union[MetaOapg.properties.thread0_eui64, str, schemas.Unset] = schemas.unset,
        thread0_ext_mac: typing.Union[MetaOapg.properties.thread0_ext_mac, str, schemas.Unset] = schemas.unset,
        mgt_vlan: typing.Union[MetaOapg.properties.mgt_vlan, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        images_names: typing.Union[MetaOapg.properties.images_names, list, tuple, schemas.Unset] = schemas.unset,
        visible: typing.Union[MetaOapg.properties.visible, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDevice':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            id=id,
            org_id=org_id,
            serial_number=serial_number,
            service_tag=service_tag,
            mac_address=mac_address,
            device_function=device_function,
            product_type=product_type,
            hostname=hostname,
            ip_address=ip_address,
            software_version=software_version,
            device_admin_state=device_admin_state,
            connected=connected,
            last_connect_time=last_connect_time,
            network_policy_name=network_policy_name,
            network_policy_id=network_policy_id,
            primary_ntp_server_address=primary_ntp_server_address,
            primary_dns_server_address=primary_dns_server_address,
            subnet_mask=subnet_mask,
            default_gateway=default_gateway,
            ipv6_address=ipv6_address,
            ipv6_netmask=ipv6_netmask,
            simulated=simulated,
            display_version=display_version,
            active_clients=active_clients,
            location_id=location_id,
            locations=locations,
            country_code=country_code,
            description=description,
            lldp_cdp_infos=lldp_cdp_infos,
            system_up_time=system_up_time,
            config_mismatch=config_mismatch,
            managed_by=managed_by,
            thread0_eui64=thread0_eui64,
            thread0_ext_mac=thread0_ext_mac,
            mgt_vlan=mgt_vlan,
            images_names=images_names,
            visible=visible,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_device_admin_state import XiqDeviceAdminState
from extremecloudiq.model.xiq_device_function import XiqDeviceFunction
from extremecloudiq.model.xiq_device_lldp_cdp_info import XiqDeviceLldpCdpInfo
from extremecloudiq.model.xiq_location_legend import XiqLocationLegend
