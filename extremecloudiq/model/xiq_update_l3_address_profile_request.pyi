# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqUpdateL3AddressProfileRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            description = schemas.StrSchema
            enable_classification = schemas.BoolSchema
            
            
            class classified_entries(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqAddressProfileClassifiedEntry']:
                        return XiqAddressProfileClassifiedEntry
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqAddressProfileClassifiedEntry'], typing.List['XiqAddressProfileClassifiedEntry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'classified_entries':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqAddressProfileClassifiedEntry':
                    return super().__getitem__(i)
            ip_address_end = schemas.StrSchema
            netmask = schemas.StrSchema
            wildcard_mask = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "description": description,
                "enable_classification": enable_classification,
                "classified_entries": classified_entries,
                "ip_address_end": ip_address_end,
                "netmask": netmask,
                "wildcard_mask": wildcard_mask,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_classification"]) -> MetaOapg.properties.enable_classification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["classified_entries"]) -> MetaOapg.properties.classified_entries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address_end"]) -> MetaOapg.properties.ip_address_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["netmask"]) -> MetaOapg.properties.netmask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wildcard_mask"]) -> MetaOapg.properties.wildcard_mask: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "description", "enable_classification", "classified_entries", "ip_address_end", "netmask", "wildcard_mask", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_classification"]) -> typing.Union[MetaOapg.properties.enable_classification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["classified_entries"]) -> typing.Union[MetaOapg.properties.classified_entries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address_end"]) -> typing.Union[MetaOapg.properties.ip_address_end, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["netmask"]) -> typing.Union[MetaOapg.properties.netmask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wildcard_mask"]) -> typing.Union[MetaOapg.properties.wildcard_mask, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "description", "enable_classification", "classified_entries", "ip_address_end", "netmask", "wildcard_mask", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        enable_classification: typing.Union[MetaOapg.properties.enable_classification, bool, schemas.Unset] = schemas.unset,
        classified_entries: typing.Union[MetaOapg.properties.classified_entries, list, tuple, schemas.Unset] = schemas.unset,
        ip_address_end: typing.Union[MetaOapg.properties.ip_address_end, str, schemas.Unset] = schemas.unset,
        netmask: typing.Union[MetaOapg.properties.netmask, str, schemas.Unset] = schemas.unset,
        wildcard_mask: typing.Union[MetaOapg.properties.wildcard_mask, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqUpdateL3AddressProfileRequest':
        return super().__new__(
            cls,
            *_args,
            name=name,
            description=description,
            enable_classification=enable_classification,
            classified_entries=classified_entries,
            ip_address_end=ip_address_end,
            netmask=netmask,
            wildcard_mask=wildcard_mask,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_address_profile_classified_entry import XiqAddressProfileClassifiedEntry
