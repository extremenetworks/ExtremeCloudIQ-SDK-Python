# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqRadioProfile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The payload of Radio Profile
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "id",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            name = schemas.StrSchema
            predefined = schemas.BoolSchema
            description = schemas.StrSchema
            transmission_power = schemas.Int32Schema
            max_transmit_power = schemas.Int32Schema
            transmission_power_floor = schemas.Int32Schema
            transmission_power_max_drop = schemas.Int32Schema
            max_clients = schemas.Int32Schema
            enable_client_transmission_power = schemas.BoolSchema
            client_transmission_power = schemas.Int32Schema
            enable_ofdma = schemas.BoolSchema
        
            @staticmethod
            def radio_mode() -> typing.Type['XiqRadioMode']:
                return XiqRadioMode
            neighborhood_analysis_id = schemas.Int64Schema
            channel_selection_id = schemas.Int64Schema
            radio_usage_optimization_id = schemas.Int64Schema
            miscellaneous_settings_id = schemas.Int64Schema
            presence_server_settings_id = schemas.Int64Schema
            sensor_scan_settings_id = schemas.Int64Schema
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "name": name,
                "predefined": predefined,
                "description": description,
                "transmission_power": transmission_power,
                "max_transmit_power": max_transmit_power,
                "transmission_power_floor": transmission_power_floor,
                "transmission_power_max_drop": transmission_power_max_drop,
                "max_clients": max_clients,
                "enable_client_transmission_power": enable_client_transmission_power,
                "client_transmission_power": client_transmission_power,
                "enable_ofdma": enable_ofdma,
                "radio_mode": radio_mode,
                "neighborhood_analysis_id": neighborhood_analysis_id,
                "channel_selection_id": channel_selection_id,
                "radio_usage_optimization_id": radio_usage_optimization_id,
                "miscellaneous_settings_id": miscellaneous_settings_id,
                "presence_server_settings_id": presence_server_settings_id,
                "sensor_scan_settings_id": sensor_scan_settings_id,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["predefined"]) -> MetaOapg.properties.predefined: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transmission_power"]) -> MetaOapg.properties.transmission_power: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_transmit_power"]) -> MetaOapg.properties.max_transmit_power: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transmission_power_floor"]) -> MetaOapg.properties.transmission_power_floor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transmission_power_max_drop"]) -> MetaOapg.properties.transmission_power_max_drop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_clients"]) -> MetaOapg.properties.max_clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_client_transmission_power"]) -> MetaOapg.properties.enable_client_transmission_power: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_transmission_power"]) -> MetaOapg.properties.client_transmission_power: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_ofdma"]) -> MetaOapg.properties.enable_ofdma: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_mode"]) -> 'XiqRadioMode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neighborhood_analysis_id"]) -> MetaOapg.properties.neighborhood_analysis_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_selection_id"]) -> MetaOapg.properties.channel_selection_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_usage_optimization_id"]) -> MetaOapg.properties.radio_usage_optimization_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["miscellaneous_settings_id"]) -> MetaOapg.properties.miscellaneous_settings_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presence_server_settings_id"]) -> MetaOapg.properties.presence_server_settings_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensor_scan_settings_id"]) -> MetaOapg.properties.sensor_scan_settings_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "name", "predefined", "description", "transmission_power", "max_transmit_power", "transmission_power_floor", "transmission_power_max_drop", "max_clients", "enable_client_transmission_power", "client_transmission_power", "enable_ofdma", "radio_mode", "neighborhood_analysis_id", "channel_selection_id", "radio_usage_optimization_id", "miscellaneous_settings_id", "presence_server_settings_id", "sensor_scan_settings_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["predefined"]) -> typing.Union[MetaOapg.properties.predefined, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transmission_power"]) -> typing.Union[MetaOapg.properties.transmission_power, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_transmit_power"]) -> typing.Union[MetaOapg.properties.max_transmit_power, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transmission_power_floor"]) -> typing.Union[MetaOapg.properties.transmission_power_floor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transmission_power_max_drop"]) -> typing.Union[MetaOapg.properties.transmission_power_max_drop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_clients"]) -> typing.Union[MetaOapg.properties.max_clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_client_transmission_power"]) -> typing.Union[MetaOapg.properties.enable_client_transmission_power, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_transmission_power"]) -> typing.Union[MetaOapg.properties.client_transmission_power, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_ofdma"]) -> typing.Union[MetaOapg.properties.enable_ofdma, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_mode"]) -> typing.Union['XiqRadioMode', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neighborhood_analysis_id"]) -> typing.Union[MetaOapg.properties.neighborhood_analysis_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_selection_id"]) -> typing.Union[MetaOapg.properties.channel_selection_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_usage_optimization_id"]) -> typing.Union[MetaOapg.properties.radio_usage_optimization_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["miscellaneous_settings_id"]) -> typing.Union[MetaOapg.properties.miscellaneous_settings_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presence_server_settings_id"]) -> typing.Union[MetaOapg.properties.presence_server_settings_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensor_scan_settings_id"]) -> typing.Union[MetaOapg.properties.sensor_scan_settings_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "name", "predefined", "description", "transmission_power", "max_transmit_power", "transmission_power_floor", "transmission_power_max_drop", "max_clients", "enable_client_transmission_power", "client_transmission_power", "enable_ofdma", "radio_mode", "neighborhood_analysis_id", "channel_selection_id", "radio_usage_optimization_id", "miscellaneous_settings_id", "presence_server_settings_id", "sensor_scan_settings_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        predefined: typing.Union[MetaOapg.properties.predefined, bool, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        transmission_power: typing.Union[MetaOapg.properties.transmission_power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_transmit_power: typing.Union[MetaOapg.properties.max_transmit_power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        transmission_power_floor: typing.Union[MetaOapg.properties.transmission_power_floor, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        transmission_power_max_drop: typing.Union[MetaOapg.properties.transmission_power_max_drop, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        max_clients: typing.Union[MetaOapg.properties.max_clients, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        enable_client_transmission_power: typing.Union[MetaOapg.properties.enable_client_transmission_power, bool, schemas.Unset] = schemas.unset,
        client_transmission_power: typing.Union[MetaOapg.properties.client_transmission_power, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        enable_ofdma: typing.Union[MetaOapg.properties.enable_ofdma, bool, schemas.Unset] = schemas.unset,
        radio_mode: typing.Union['XiqRadioMode', schemas.Unset] = schemas.unset,
        neighborhood_analysis_id: typing.Union[MetaOapg.properties.neighborhood_analysis_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel_selection_id: typing.Union[MetaOapg.properties.channel_selection_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        radio_usage_optimization_id: typing.Union[MetaOapg.properties.radio_usage_optimization_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        miscellaneous_settings_id: typing.Union[MetaOapg.properties.miscellaneous_settings_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        presence_server_settings_id: typing.Union[MetaOapg.properties.presence_server_settings_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sensor_scan_settings_id: typing.Union[MetaOapg.properties.sensor_scan_settings_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqRadioProfile':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            id=id,
            name=name,
            predefined=predefined,
            description=description,
            transmission_power=transmission_power,
            max_transmit_power=max_transmit_power,
            transmission_power_floor=transmission_power_floor,
            transmission_power_max_drop=transmission_power_max_drop,
            max_clients=max_clients,
            enable_client_transmission_power=enable_client_transmission_power,
            client_transmission_power=client_transmission_power,
            enable_ofdma=enable_ofdma,
            radio_mode=radio_mode,
            neighborhood_analysis_id=neighborhood_analysis_id,
            channel_selection_id=channel_selection_id,
            radio_usage_optimization_id=radio_usage_optimization_id,
            miscellaneous_settings_id=miscellaneous_settings_id,
            presence_server_settings_id=presence_server_settings_id,
            sensor_scan_settings_id=sensor_scan_settings_id,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_radio_mode import XiqRadioMode
