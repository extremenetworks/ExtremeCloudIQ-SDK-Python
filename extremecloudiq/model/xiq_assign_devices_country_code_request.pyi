# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAssignDevicesCountryCodeRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Device country-code assignment for multiple devices
    """


    class MetaOapg:
        required = {
            "country_code",
            "devices",
        }
        
        class properties:
        
            @staticmethod
            def devices() -> typing.Type['XiqDeviceFilter']:
                return XiqDeviceFilter
        
            @staticmethod
            def country_code() -> typing.Type['XiqCountryCode']:
                return XiqCountryCode
            __annotations__ = {
                "devices": devices,
                "country_code": country_code,
            }
    
    country_code: 'XiqCountryCode'
    devices: 'XiqDeviceFilter'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["devices"]) -> 'XiqDeviceFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> 'XiqCountryCode': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["devices", "country_code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["devices"]) -> 'XiqDeviceFilter': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> 'XiqCountryCode': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["devices", "country_code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        country_code: 'XiqCountryCode',
        devices: 'XiqDeviceFilter',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAssignDevicesCountryCodeRequest':
        return super().__new__(
            cls,
            *_args,
            country_code=country_code,
            devices=devices,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_country_code import XiqCountryCode
from extremecloudiq.model.xiq_device_filter import XiqDeviceFilter
