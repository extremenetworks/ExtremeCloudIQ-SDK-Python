# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDigitalTwinOnboardDevice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The Digital Twin device to onboard.
    """


    class MetaOapg:
        required = {
            "location",
            "digital_twin_device",
        }
        
        class properties:
        
            @staticmethod
            def digital_twin_device() -> typing.Type['XiqDigitalTwinDevice']:
                return XiqDigitalTwinDevice
        
            @staticmethod
            def location() -> typing.Type['XiqDeviceLocationAssignment']:
                return XiqDeviceLocationAssignment
            network_policy_id = schemas.Int64Schema
            hostname = schemas.StrSchema
            __annotations__ = {
                "digital_twin_device": digital_twin_device,
                "location": location,
                "network_policy_id": network_policy_id,
                "hostname": hostname,
            }
    
    location: 'XiqDeviceLocationAssignment'
    digital_twin_device: 'XiqDigitalTwinDevice'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digital_twin_device"]) -> 'XiqDigitalTwinDevice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'XiqDeviceLocationAssignment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network_policy_id"]) -> MetaOapg.properties.network_policy_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["digital_twin_device", "location", "network_policy_id", "hostname", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digital_twin_device"]) -> 'XiqDigitalTwinDevice': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> 'XiqDeviceLocationAssignment': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network_policy_id"]) -> typing.Union[MetaOapg.properties.network_policy_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> typing.Union[MetaOapg.properties.hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["digital_twin_device", "location", "network_policy_id", "hostname", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        location: 'XiqDeviceLocationAssignment',
        digital_twin_device: 'XiqDigitalTwinDevice',
        network_policy_id: typing.Union[MetaOapg.properties.network_policy_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hostname: typing.Union[MetaOapg.properties.hostname, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDigitalTwinOnboardDevice':
        return super().__new__(
            cls,
            *_args,
            location=location,
            digital_twin_device=digital_twin_device,
            network_policy_id=network_policy_id,
            hostname=hostname,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_device_location_assignment import XiqDeviceLocationAssignment
from extremecloudiq.model.xiq_digital_twin_device import XiqDigitalTwinDevice
