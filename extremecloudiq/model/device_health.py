# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class DeviceHealth(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The devices health score over the period
    """


    class MetaOapg:
        
        class properties:
            score = schemas.Int32Schema
            device_availability_score = schemas.Int32Schema
            device_hardware_health_score = schemas.Int32Schema
            config_and_firmware_score = schemas.Int32Schema
            __annotations__ = {
                "score": score,
                "device_availability_score": device_availability_score,
                "device_hardware_health_score": device_hardware_health_score,
                "config_and_firmware_score": config_and_firmware_score,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_availability_score"]) -> MetaOapg.properties.device_availability_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_hardware_health_score"]) -> MetaOapg.properties.device_hardware_health_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config_and_firmware_score"]) -> MetaOapg.properties.config_and_firmware_score: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["score", "device_availability_score", "device_hardware_health_score", "config_and_firmware_score", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> typing.Union[MetaOapg.properties.score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_availability_score"]) -> typing.Union[MetaOapg.properties.device_availability_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_hardware_health_score"]) -> typing.Union[MetaOapg.properties.device_hardware_health_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config_and_firmware_score"]) -> typing.Union[MetaOapg.properties.config_and_firmware_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["score", "device_availability_score", "device_hardware_health_score", "config_and_firmware_score", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_availability_score: typing.Union[MetaOapg.properties.device_availability_score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_hardware_health_score: typing.Union[MetaOapg.properties.device_hardware_health_score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        config_and_firmware_score: typing.Union[MetaOapg.properties.config_and_firmware_score, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeviceHealth':
        return super().__new__(
            cls,
            *_args,
            score=score,
            device_availability_score=device_availability_score,
            device_hardware_health_score=device_hardware_health_score,
            config_and_firmware_score=config_and_firmware_score,
            _configuration=_configuration,
            **kwargs,
        )
