# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAlertPolicy(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The Alert Policy Model
    """


    class MetaOapg:
        required = {
            "id",
        }
        
        class properties:
            id = schemas.Int64Schema
            owner_id = schemas.Int64Schema
            org_id = schemas.Int64Schema
            name = schemas.StrSchema
            
            
            class sites(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqAlertSite']:
                        return XiqAlertSite
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqAlertSite'], typing.List['XiqAlertSite']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sites':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqAlertSite':
                    return super().__getitem__(i)
            
            
            class event_rules_overview(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqAlertEventRulesByCategory']:
                        return XiqAlertEventRulesByCategory
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqAlertEventRulesByCategory'], typing.List['XiqAlertEventRulesByCategory']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'event_rules_overview':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqAlertEventRulesByCategory':
                    return super().__getitem__(i)
            
            
            class metric_rules_overview(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqAlertMetricRulesByMetricset']:
                        return XiqAlertMetricRulesByMetricset
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqAlertMetricRulesByMetricset'], typing.List['XiqAlertMetricRulesByMetricset']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'metric_rules_overview':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqAlertMetricRulesByMetricset':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "owner_id": owner_id,
                "org_id": org_id,
                "name": name,
                "sites": sites,
                "event_rules_overview": event_rules_overview,
                "metric_rules_overview": metric_rules_overview,
            }
    
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sites"]) -> MetaOapg.properties.sites: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_rules_overview"]) -> MetaOapg.properties.event_rules_overview: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metric_rules_overview"]) -> MetaOapg.properties.metric_rules_overview: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "owner_id", "org_id", "name", "sites", "event_rules_overview", "metric_rules_overview", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sites"]) -> typing.Union[MetaOapg.properties.sites, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_rules_overview"]) -> typing.Union[MetaOapg.properties.event_rules_overview, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metric_rules_overview"]) -> typing.Union[MetaOapg.properties.metric_rules_overview, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "owner_id", "org_id", "name", "sites", "event_rules_overview", "metric_rules_overview", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        owner_id: typing.Union[MetaOapg.properties.owner_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        sites: typing.Union[MetaOapg.properties.sites, list, tuple, schemas.Unset] = schemas.unset,
        event_rules_overview: typing.Union[MetaOapg.properties.event_rules_overview, list, tuple, schemas.Unset] = schemas.unset,
        metric_rules_overview: typing.Union[MetaOapg.properties.metric_rules_overview, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAlertPolicy':
        return super().__new__(
            cls,
            *_args,
            id=id,
            owner_id=owner_id,
            org_id=org_id,
            name=name,
            sites=sites,
            event_rules_overview=event_rules_overview,
            metric_rules_overview=metric_rules_overview,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_alert_event_rules_by_category import XiqAlertEventRulesByCategory
from extremecloudiq.model.xiq_alert_metric_rules_by_metricset import XiqAlertMetricRulesByMetricset
from extremecloudiq.model.xiq_alert_site import XiqAlertSite
