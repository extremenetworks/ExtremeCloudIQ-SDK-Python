# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqUcpEngine(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The payload of UCP Engine
    """


    class MetaOapg:
        required = {
            "image_name",
            "upgradable",
            "name",
            "description",
            "max_instances",
            "instance_count",
        }
        
        class properties:
            name = schemas.StrSchema
            description = schemas.StrSchema
            instance_count = schemas.Int32Schema
            max_instances = schemas.Int32Schema
            upgradable = schemas.BoolSchema
            image_name = schemas.StrSchema
            
            
            class instances(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqUcpEngineInstance']:
                        return XiqUcpEngineInstance
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqUcpEngineInstance'], typing.List['XiqUcpEngineInstance']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'instances':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqUcpEngineInstance':
                    return super().__getitem__(i)
            type = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "description": description,
                "instance_count": instance_count,
                "max_instances": max_instances,
                "upgradable": upgradable,
                "image_name": image_name,
                "instances": instances,
                "type": type,
            }
    
    image_name: MetaOapg.properties.image_name
    upgradable: MetaOapg.properties.upgradable
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    max_instances: MetaOapg.properties.max_instances
    instance_count: MetaOapg.properties.instance_count
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instance_count"]) -> MetaOapg.properties.instance_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_instances"]) -> MetaOapg.properties.max_instances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upgradable"]) -> MetaOapg.properties.upgradable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_name"]) -> MetaOapg.properties.image_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instances"]) -> MetaOapg.properties.instances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "description", "instance_count", "max_instances", "upgradable", "image_name", "instances", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instance_count"]) -> MetaOapg.properties.instance_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_instances"]) -> MetaOapg.properties.max_instances: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upgradable"]) -> MetaOapg.properties.upgradable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_name"]) -> MetaOapg.properties.image_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instances"]) -> typing.Union[MetaOapg.properties.instances, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "description", "instance_count", "max_instances", "upgradable", "image_name", "instances", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        image_name: typing.Union[MetaOapg.properties.image_name, str, ],
        upgradable: typing.Union[MetaOapg.properties.upgradable, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        max_instances: typing.Union[MetaOapg.properties.max_instances, decimal.Decimal, int, ],
        instance_count: typing.Union[MetaOapg.properties.instance_count, decimal.Decimal, int, ],
        instances: typing.Union[MetaOapg.properties.instances, list, tuple, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqUcpEngine':
        return super().__new__(
            cls,
            *_args,
            image_name=image_name,
            upgradable=upgradable,
            name=name,
            description=description,
            max_instances=max_instances,
            instance_count=instance_count,
            instances=instances,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_ucp_engine_instance import XiqUcpEngineInstance
