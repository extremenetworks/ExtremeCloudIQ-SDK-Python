# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqInitKeyBasedPcgNetworkPolicyRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The request to create Key-based Private Client Group
    """


    class MetaOapg:
        required = {
            "policy_name",
            "ssid_name",
            "users",
        }
        
        class properties:
            policy_name = schemas.StrSchema
            ssid_name = schemas.StrSchema
            
            
            class users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqKeyBasedPcgUserBaseInfo']:
                        return XiqKeyBasedPcgUserBaseInfo
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqKeyBasedPcgUserBaseInfo'], typing.List['XiqKeyBasedPcgUserBaseInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'users':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqKeyBasedPcgUserBaseInfo':
                    return super().__getitem__(i)
            __annotations__ = {
                "policy_name": policy_name,
                "ssid_name": ssid_name,
                "users": users,
            }
    
    policy_name: MetaOapg.properties.policy_name
    ssid_name: MetaOapg.properties.ssid_name
    users: MetaOapg.properties.users
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policy_name"]) -> MetaOapg.properties.policy_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssid_name"]) -> MetaOapg.properties.ssid_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["policy_name", "ssid_name", "users", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policy_name"]) -> MetaOapg.properties.policy_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssid_name"]) -> MetaOapg.properties.ssid_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["policy_name", "ssid_name", "users", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        policy_name: typing.Union[MetaOapg.properties.policy_name, str, ],
        ssid_name: typing.Union[MetaOapg.properties.ssid_name, str, ],
        users: typing.Union[MetaOapg.properties.users, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqInitKeyBasedPcgNetworkPolicyRequest':
        return super().__new__(
            cls,
            *_args,
            policy_name=policy_name,
            ssid_name=ssid_name,
            users=users,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_key_based_pcg_user_base_info import XiqKeyBasedPcgUserBaseInfo
