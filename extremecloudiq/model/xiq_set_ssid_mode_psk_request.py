# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqSetSsidModePskRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The request for setting the SSID to be PSK mode.
    """


    class MetaOapg:
        required = {
            "key_management",
            "encryption_method",
            "key_type",
            "key_value",
        }
        
        class properties:
        
            @staticmethod
            def key_management() -> typing.Type['XiqSsidPskKeyManagement']:
                return XiqSsidPskKeyManagement
        
            @staticmethod
            def encryption_method() -> typing.Type['XiqSsidPskEncryptionMethod']:
                return XiqSsidPskEncryptionMethod
        
            @staticmethod
            def key_type() -> typing.Type['XiqSsidKeyType']:
                return XiqSsidKeyType
            
            
            class key_value(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2147483647
                    min_length = 8
            anti_logging_threshold = schemas.Int32Schema
        
            @staticmethod
            def sae_group() -> typing.Type['XiqSsidSaeGroup']:
                return XiqSsidSaeGroup
            transition_mode = schemas.BoolSchema
            __annotations__ = {
                "key_management": key_management,
                "encryption_method": encryption_method,
                "key_type": key_type,
                "key_value": key_value,
                "anti_logging_threshold": anti_logging_threshold,
                "sae_group": sae_group,
                "transition_mode": transition_mode,
            }
    
    key_management: 'XiqSsidPskKeyManagement'
    encryption_method: 'XiqSsidPskEncryptionMethod'
    key_type: 'XiqSsidKeyType'
    key_value: MetaOapg.properties.key_value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_management"]) -> 'XiqSsidPskKeyManagement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryption_method"]) -> 'XiqSsidPskEncryptionMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_type"]) -> 'XiqSsidKeyType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_value"]) -> MetaOapg.properties.key_value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anti_logging_threshold"]) -> MetaOapg.properties.anti_logging_threshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sae_group"]) -> 'XiqSsidSaeGroup': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transition_mode"]) -> MetaOapg.properties.transition_mode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["key_management", "encryption_method", "key_type", "key_value", "anti_logging_threshold", "sae_group", "transition_mode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_management"]) -> 'XiqSsidPskKeyManagement': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryption_method"]) -> 'XiqSsidPskEncryptionMethod': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_type"]) -> 'XiqSsidKeyType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_value"]) -> MetaOapg.properties.key_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anti_logging_threshold"]) -> typing.Union[MetaOapg.properties.anti_logging_threshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sae_group"]) -> typing.Union['XiqSsidSaeGroup', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transition_mode"]) -> typing.Union[MetaOapg.properties.transition_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["key_management", "encryption_method", "key_type", "key_value", "anti_logging_threshold", "sae_group", "transition_mode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        key_management: 'XiqSsidPskKeyManagement',
        encryption_method: 'XiqSsidPskEncryptionMethod',
        key_type: 'XiqSsidKeyType',
        key_value: typing.Union[MetaOapg.properties.key_value, str, ],
        anti_logging_threshold: typing.Union[MetaOapg.properties.anti_logging_threshold, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sae_group: typing.Union['XiqSsidSaeGroup', schemas.Unset] = schemas.unset,
        transition_mode: typing.Union[MetaOapg.properties.transition_mode, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqSetSsidModePskRequest':
        return super().__new__(
            cls,
            *_args,
            key_management=key_management,
            encryption_method=encryption_method,
            key_type=key_type,
            key_value=key_value,
            anti_logging_threshold=anti_logging_threshold,
            sae_group=sae_group,
            transition_mode=transition_mode,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_ssid_key_type import XiqSsidKeyType
from extremecloudiq.model.xiq_ssid_psk_encryption_method import XiqSsidPskEncryptionMethod
from extremecloudiq.model.xiq_ssid_psk_key_management import XiqSsidPskKeyManagement
from extremecloudiq.model.xiq_ssid_sae_group import XiqSsidSaeGroup
