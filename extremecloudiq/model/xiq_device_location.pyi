# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDeviceLocation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Device location info
    """


    class MetaOapg:
        required = {
            "location_name",
            "update_time",
            "create_time",
            "location_unique_name",
            "location_type",
        }
        
        class properties:
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            location_name = schemas.StrSchema
            location_unique_name = schemas.StrSchema
            location_type = schemas.StrSchema
            location_id = schemas.Int64Schema
            org_id = schemas.Int64Schema
            parent_id = schemas.Int64Schema
            location_address = schemas.StrSchema
            x = schemas.Float64Schema
            y = schemas.Float64Schema
            latitude = schemas.Float64Schema
            longitude = schemas.Float64Schema
            __annotations__ = {
                "create_time": create_time,
                "update_time": update_time,
                "location_name": location_name,
                "location_unique_name": location_unique_name,
                "location_type": location_type,
                "location_id": location_id,
                "org_id": org_id,
                "parent_id": parent_id,
                "location_address": location_address,
                "x": x,
                "y": y,
                "latitude": latitude,
                "longitude": longitude,
            }
    
    location_name: MetaOapg.properties.location_name
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    location_unique_name: MetaOapg.properties.location_unique_name
    location_type: MetaOapg.properties.location_type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_name"]) -> MetaOapg.properties.location_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_unique_name"]) -> MetaOapg.properties.location_unique_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_type"]) -> MetaOapg.properties.location_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_id"]) -> MetaOapg.properties.parent_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_address"]) -> MetaOapg.properties.location_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["create_time", "update_time", "location_name", "location_unique_name", "location_type", "location_id", "org_id", "parent_id", "location_address", "x", "y", "latitude", "longitude", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_name"]) -> MetaOapg.properties.location_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_unique_name"]) -> MetaOapg.properties.location_unique_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_type"]) -> MetaOapg.properties.location_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_id"]) -> typing.Union[MetaOapg.properties.location_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_id"]) -> typing.Union[MetaOapg.properties.parent_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_address"]) -> typing.Union[MetaOapg.properties.location_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> typing.Union[MetaOapg.properties.x, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> typing.Union[MetaOapg.properties.y, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union[MetaOapg.properties.longitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["create_time", "update_time", "location_name", "location_unique_name", "location_type", "location_id", "org_id", "parent_id", "location_address", "x", "y", "latitude", "longitude", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        location_name: typing.Union[MetaOapg.properties.location_name, str, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        location_unique_name: typing.Union[MetaOapg.properties.location_unique_name, str, ],
        location_type: typing.Union[MetaOapg.properties.location_type, str, ],
        location_id: typing.Union[MetaOapg.properties.location_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        parent_id: typing.Union[MetaOapg.properties.parent_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        location_address: typing.Union[MetaOapg.properties.location_address, str, schemas.Unset] = schemas.unset,
        x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDeviceLocation':
        return super().__new__(
            cls,
            *_args,
            location_name=location_name,
            update_time=update_time,
            create_time=create_time,
            location_unique_name=location_unique_name,
            location_type=location_type,
            location_id=location_id,
            org_id=org_id,
            parent_id=parent_id,
            location_address=location_address,
            x=x,
            y=y,
            latitude=latitude,
            longitude=longitude,
            _configuration=_configuration,
            **kwargs,
        )
