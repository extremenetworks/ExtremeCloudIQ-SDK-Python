# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDeviceFirmwareMetadata(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The device compatible firmware metadata
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "firmware_id",
        }
        
        class properties:
            firmware_id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            firmware_name = schemas.StrSchema
            firmware_type = schemas.StrSchema
            scope = schemas.StrSchema
            version = schemas.StrSchema
            date = schemas.StrSchema
            firmware_size = schemas.StrSchema
            display_version = schemas.StrSchema
            supported_platforms = schemas.StrSchema
            md5 = schemas.StrSchema
            __annotations__ = {
                "firmware_id": firmware_id,
                "create_time": create_time,
                "update_time": update_time,
                "firmware_name": firmware_name,
                "firmware_type": firmware_type,
                "scope": scope,
                "version": version,
                "date": date,
                "firmware_size": firmware_size,
                "display_version": display_version,
                "supported_platforms": supported_platforms,
                "md5": md5,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    firmware_id: MetaOapg.properties.firmware_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmware_id"]) -> MetaOapg.properties.firmware_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmware_name"]) -> MetaOapg.properties.firmware_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmware_type"]) -> MetaOapg.properties.firmware_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> MetaOapg.properties.scope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firmware_size"]) -> MetaOapg.properties.firmware_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_version"]) -> MetaOapg.properties.display_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supported_platforms"]) -> MetaOapg.properties.supported_platforms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md5"]) -> MetaOapg.properties.md5: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["firmware_id", "create_time", "update_time", "firmware_name", "firmware_type", "scope", "version", "date", "firmware_size", "display_version", "supported_platforms", "md5", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmware_id"]) -> MetaOapg.properties.firmware_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmware_name"]) -> typing.Union[MetaOapg.properties.firmware_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmware_type"]) -> typing.Union[MetaOapg.properties.firmware_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union[MetaOapg.properties.scope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firmware_size"]) -> typing.Union[MetaOapg.properties.firmware_size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_version"]) -> typing.Union[MetaOapg.properties.display_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supported_platforms"]) -> typing.Union[MetaOapg.properties.supported_platforms, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md5"]) -> typing.Union[MetaOapg.properties.md5, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["firmware_id", "create_time", "update_time", "firmware_name", "firmware_type", "scope", "version", "date", "firmware_size", "display_version", "supported_platforms", "md5", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        firmware_id: typing.Union[MetaOapg.properties.firmware_id, decimal.Decimal, int, ],
        firmware_name: typing.Union[MetaOapg.properties.firmware_name, str, schemas.Unset] = schemas.unset,
        firmware_type: typing.Union[MetaOapg.properties.firmware_type, str, schemas.Unset] = schemas.unset,
        scope: typing.Union[MetaOapg.properties.scope, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, schemas.Unset] = schemas.unset,
        firmware_size: typing.Union[MetaOapg.properties.firmware_size, str, schemas.Unset] = schemas.unset,
        display_version: typing.Union[MetaOapg.properties.display_version, str, schemas.Unset] = schemas.unset,
        supported_platforms: typing.Union[MetaOapg.properties.supported_platforms, str, schemas.Unset] = schemas.unset,
        md5: typing.Union[MetaOapg.properties.md5, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDeviceFirmwareMetadata':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            firmware_id=firmware_id,
            firmware_name=firmware_name,
            firmware_type=firmware_type,
            scope=scope,
            version=version,
            date=date,
            firmware_size=firmware_size,
            display_version=display_version,
            supported_platforms=supported_platforms,
            md5=md5,
            _configuration=_configuration,
            **kwargs,
        )
