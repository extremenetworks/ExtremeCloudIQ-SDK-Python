# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqRmDevice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Generic ExtremeCloud IQ RM Device List
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "id",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            org_id = schemas.Int64Schema
            connected = schemas.BoolSchema
            hostname = schemas.StrSchema
            healthy_clients = schemas.Int32Schema
            unhealthy_clients = schemas.Int32Schema
            system_up_time = schemas.Int64Schema
            updated_on = schemas.Int64Schema
            mac_address = schemas.StrSchema
            serial_number = schemas.StrSchema
            device_ip = schemas.StrSchema
            default_gateway = schemas.StrSchema
            software_version = schemas.StrSchema
            product_type = schemas.StrSchema
            ipv6_address = schemas.StrSchema
        
            @staticmethod
            def device_admin_state() -> typing.Type['XiqDeviceAdminState']:
                return XiqDeviceAdminState
        
            @staticmethod
            def sim_type() -> typing.Type['XiqDeviceType']:
                return XiqDeviceType
            country_code = schemas.Int32Schema
            managed_by = schemas.StrSchema
            channel_wifi0 = schemas.StrSchema
            power_wifi0 = schemas.StrSchema
            radio_wifi0 = schemas.StrSchema
            channel_wifi1 = schemas.StrSchema
            power_wifi1 = schemas.StrSchema
            radio_wifi1 = schemas.StrSchema
            channel_wifi2 = schemas.StrSchema
            power_wifi2 = schemas.StrSchema
            radio_wifi2 = schemas.StrSchema
            config_mismatch = schemas.BoolSchema
        
            @staticmethod
            def locations() -> typing.Type['XiqRmDeviceLocationDetails']:
                return XiqRmDeviceLocationDetails
        
            @staticmethod
            def device_category() -> typing.Type['XiqRmDeviceCategory']:
                return XiqRmDeviceCategory
            has_management_ip_issue = schemas.BoolSchema
            has_default_gateway_issue = schemas.BoolSchema
            has_firmware_version_issue = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "org_id": org_id,
                "connected": connected,
                "hostname": hostname,
                "healthy_clients": healthy_clients,
                "unhealthy_clients": unhealthy_clients,
                "system_up_time": system_up_time,
                "updated_on": updated_on,
                "mac_address": mac_address,
                "serial_number": serial_number,
                "device_ip": device_ip,
                "default_gateway": default_gateway,
                "software_version": software_version,
                "product_type": product_type,
                "ipv6_address": ipv6_address,
                "device_admin_state": device_admin_state,
                "sim_type": sim_type,
                "country_code": country_code,
                "managed_by": managed_by,
                "channel_wifi0": channel_wifi0,
                "power_wifi0": power_wifi0,
                "radio_wifi0": radio_wifi0,
                "channel_wifi1": channel_wifi1,
                "power_wifi1": power_wifi1,
                "radio_wifi1": radio_wifi1,
                "channel_wifi2": channel_wifi2,
                "power_wifi2": power_wifi2,
                "radio_wifi2": radio_wifi2,
                "config_mismatch": config_mismatch,
                "locations": locations,
                "device_category": device_category,
                "has_management_ip_issue": has_management_ip_issue,
                "has_default_gateway_issue": has_default_gateway_issue,
                "has_firmware_version_issue": has_firmware_version_issue,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected"]) -> MetaOapg.properties.connected: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostname"]) -> MetaOapg.properties.hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthy_clients"]) -> MetaOapg.properties.healthy_clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unhealthy_clients"]) -> MetaOapg.properties.unhealthy_clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system_up_time"]) -> MetaOapg.properties.system_up_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_on"]) -> MetaOapg.properties.updated_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mac_address"]) -> MetaOapg.properties.mac_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial_number"]) -> MetaOapg.properties.serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_ip"]) -> MetaOapg.properties.device_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_gateway"]) -> MetaOapg.properties.default_gateway: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["software_version"]) -> MetaOapg.properties.software_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_type"]) -> MetaOapg.properties.product_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6_address"]) -> MetaOapg.properties.ipv6_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_admin_state"]) -> 'XiqDeviceAdminState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sim_type"]) -> 'XiqDeviceType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_code"]) -> MetaOapg.properties.country_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managed_by"]) -> MetaOapg.properties.managed_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_wifi0"]) -> MetaOapg.properties.channel_wifi0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_wifi0"]) -> MetaOapg.properties.power_wifi0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_wifi0"]) -> MetaOapg.properties.radio_wifi0: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_wifi1"]) -> MetaOapg.properties.channel_wifi1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_wifi1"]) -> MetaOapg.properties.power_wifi1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_wifi1"]) -> MetaOapg.properties.radio_wifi1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_wifi2"]) -> MetaOapg.properties.channel_wifi2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["power_wifi2"]) -> MetaOapg.properties.power_wifi2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radio_wifi2"]) -> MetaOapg.properties.radio_wifi2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config_mismatch"]) -> MetaOapg.properties.config_mismatch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locations"]) -> 'XiqRmDeviceLocationDetails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_category"]) -> 'XiqRmDeviceCategory': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_management_ip_issue"]) -> MetaOapg.properties.has_management_ip_issue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_default_gateway_issue"]) -> MetaOapg.properties.has_default_gateway_issue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_firmware_version_issue"]) -> MetaOapg.properties.has_firmware_version_issue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "connected", "hostname", "healthy_clients", "unhealthy_clients", "system_up_time", "updated_on", "mac_address", "serial_number", "device_ip", "default_gateway", "software_version", "product_type", "ipv6_address", "device_admin_state", "sim_type", "country_code", "managed_by", "channel_wifi0", "power_wifi0", "radio_wifi0", "channel_wifi1", "power_wifi1", "radio_wifi1", "channel_wifi2", "power_wifi2", "radio_wifi2", "config_mismatch", "locations", "device_category", "has_management_ip_issue", "has_default_gateway_issue", "has_firmware_version_issue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected"]) -> typing.Union[MetaOapg.properties.connected, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostname"]) -> typing.Union[MetaOapg.properties.hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthy_clients"]) -> typing.Union[MetaOapg.properties.healthy_clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unhealthy_clients"]) -> typing.Union[MetaOapg.properties.unhealthy_clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system_up_time"]) -> typing.Union[MetaOapg.properties.system_up_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_on"]) -> typing.Union[MetaOapg.properties.updated_on, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mac_address"]) -> typing.Union[MetaOapg.properties.mac_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial_number"]) -> typing.Union[MetaOapg.properties.serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_ip"]) -> typing.Union[MetaOapg.properties.device_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_gateway"]) -> typing.Union[MetaOapg.properties.default_gateway, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["software_version"]) -> typing.Union[MetaOapg.properties.software_version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_type"]) -> typing.Union[MetaOapg.properties.product_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6_address"]) -> typing.Union[MetaOapg.properties.ipv6_address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_admin_state"]) -> typing.Union['XiqDeviceAdminState', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sim_type"]) -> typing.Union['XiqDeviceType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_code"]) -> typing.Union[MetaOapg.properties.country_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managed_by"]) -> typing.Union[MetaOapg.properties.managed_by, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_wifi0"]) -> typing.Union[MetaOapg.properties.channel_wifi0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_wifi0"]) -> typing.Union[MetaOapg.properties.power_wifi0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_wifi0"]) -> typing.Union[MetaOapg.properties.radio_wifi0, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_wifi1"]) -> typing.Union[MetaOapg.properties.channel_wifi1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_wifi1"]) -> typing.Union[MetaOapg.properties.power_wifi1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_wifi1"]) -> typing.Union[MetaOapg.properties.radio_wifi1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_wifi2"]) -> typing.Union[MetaOapg.properties.channel_wifi2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["power_wifi2"]) -> typing.Union[MetaOapg.properties.power_wifi2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radio_wifi2"]) -> typing.Union[MetaOapg.properties.radio_wifi2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config_mismatch"]) -> typing.Union[MetaOapg.properties.config_mismatch, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locations"]) -> typing.Union['XiqRmDeviceLocationDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_category"]) -> typing.Union['XiqRmDeviceCategory', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_management_ip_issue"]) -> typing.Union[MetaOapg.properties.has_management_ip_issue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_default_gateway_issue"]) -> typing.Union[MetaOapg.properties.has_default_gateway_issue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_firmware_version_issue"]) -> typing.Union[MetaOapg.properties.has_firmware_version_issue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "connected", "hostname", "healthy_clients", "unhealthy_clients", "system_up_time", "updated_on", "mac_address", "serial_number", "device_ip", "default_gateway", "software_version", "product_type", "ipv6_address", "device_admin_state", "sim_type", "country_code", "managed_by", "channel_wifi0", "power_wifi0", "radio_wifi0", "channel_wifi1", "power_wifi1", "radio_wifi1", "channel_wifi2", "power_wifi2", "radio_wifi2", "config_mismatch", "locations", "device_category", "has_management_ip_issue", "has_default_gateway_issue", "has_firmware_version_issue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        connected: typing.Union[MetaOapg.properties.connected, bool, schemas.Unset] = schemas.unset,
        hostname: typing.Union[MetaOapg.properties.hostname, str, schemas.Unset] = schemas.unset,
        healthy_clients: typing.Union[MetaOapg.properties.healthy_clients, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        unhealthy_clients: typing.Union[MetaOapg.properties.unhealthy_clients, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        system_up_time: typing.Union[MetaOapg.properties.system_up_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updated_on: typing.Union[MetaOapg.properties.updated_on, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mac_address: typing.Union[MetaOapg.properties.mac_address, str, schemas.Unset] = schemas.unset,
        serial_number: typing.Union[MetaOapg.properties.serial_number, str, schemas.Unset] = schemas.unset,
        device_ip: typing.Union[MetaOapg.properties.device_ip, str, schemas.Unset] = schemas.unset,
        default_gateway: typing.Union[MetaOapg.properties.default_gateway, str, schemas.Unset] = schemas.unset,
        software_version: typing.Union[MetaOapg.properties.software_version, str, schemas.Unset] = schemas.unset,
        product_type: typing.Union[MetaOapg.properties.product_type, str, schemas.Unset] = schemas.unset,
        ipv6_address: typing.Union[MetaOapg.properties.ipv6_address, str, schemas.Unset] = schemas.unset,
        device_admin_state: typing.Union['XiqDeviceAdminState', schemas.Unset] = schemas.unset,
        sim_type: typing.Union['XiqDeviceType', schemas.Unset] = schemas.unset,
        country_code: typing.Union[MetaOapg.properties.country_code, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        managed_by: typing.Union[MetaOapg.properties.managed_by, str, schemas.Unset] = schemas.unset,
        channel_wifi0: typing.Union[MetaOapg.properties.channel_wifi0, str, schemas.Unset] = schemas.unset,
        power_wifi0: typing.Union[MetaOapg.properties.power_wifi0, str, schemas.Unset] = schemas.unset,
        radio_wifi0: typing.Union[MetaOapg.properties.radio_wifi0, str, schemas.Unset] = schemas.unset,
        channel_wifi1: typing.Union[MetaOapg.properties.channel_wifi1, str, schemas.Unset] = schemas.unset,
        power_wifi1: typing.Union[MetaOapg.properties.power_wifi1, str, schemas.Unset] = schemas.unset,
        radio_wifi1: typing.Union[MetaOapg.properties.radio_wifi1, str, schemas.Unset] = schemas.unset,
        channel_wifi2: typing.Union[MetaOapg.properties.channel_wifi2, str, schemas.Unset] = schemas.unset,
        power_wifi2: typing.Union[MetaOapg.properties.power_wifi2, str, schemas.Unset] = schemas.unset,
        radio_wifi2: typing.Union[MetaOapg.properties.radio_wifi2, str, schemas.Unset] = schemas.unset,
        config_mismatch: typing.Union[MetaOapg.properties.config_mismatch, bool, schemas.Unset] = schemas.unset,
        locations: typing.Union['XiqRmDeviceLocationDetails', schemas.Unset] = schemas.unset,
        device_category: typing.Union['XiqRmDeviceCategory', schemas.Unset] = schemas.unset,
        has_management_ip_issue: typing.Union[MetaOapg.properties.has_management_ip_issue, bool, schemas.Unset] = schemas.unset,
        has_default_gateway_issue: typing.Union[MetaOapg.properties.has_default_gateway_issue, bool, schemas.Unset] = schemas.unset,
        has_firmware_version_issue: typing.Union[MetaOapg.properties.has_firmware_version_issue, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqRmDevice':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            id=id,
            org_id=org_id,
            connected=connected,
            hostname=hostname,
            healthy_clients=healthy_clients,
            unhealthy_clients=unhealthy_clients,
            system_up_time=system_up_time,
            updated_on=updated_on,
            mac_address=mac_address,
            serial_number=serial_number,
            device_ip=device_ip,
            default_gateway=default_gateway,
            software_version=software_version,
            product_type=product_type,
            ipv6_address=ipv6_address,
            device_admin_state=device_admin_state,
            sim_type=sim_type,
            country_code=country_code,
            managed_by=managed_by,
            channel_wifi0=channel_wifi0,
            power_wifi0=power_wifi0,
            radio_wifi0=radio_wifi0,
            channel_wifi1=channel_wifi1,
            power_wifi1=power_wifi1,
            radio_wifi1=radio_wifi1,
            channel_wifi2=channel_wifi2,
            power_wifi2=power_wifi2,
            radio_wifi2=radio_wifi2,
            config_mismatch=config_mismatch,
            locations=locations,
            device_category=device_category,
            has_management_ip_issue=has_management_ip_issue,
            has_default_gateway_issue=has_default_gateway_issue,
            has_firmware_version_issue=has_firmware_version_issue,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_device_admin_state import XiqDeviceAdminState
from extremecloudiq.model.xiq_device_type import XiqDeviceType
from extremecloudiq.model.xiq_rm_device_category import XiqRmDeviceCategory
from extremecloudiq.model.xiq_rm_device_location_details import XiqRmDeviceLocationDetails
