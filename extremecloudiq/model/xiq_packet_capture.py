# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqPacketCapture(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    This represents the packet capture session
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            start_time = schemas.DateTimeSchema
            end_time = schemas.DateTimeSchema
            org_id = schemas.Int64Schema
            name = schemas.StrSchema
            
            
            class duration(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 604800
                    inclusive_minimum = 0
        
            @staticmethod
            def capture_id_type() -> typing.Type['XiqCaptureIdentifierType']:
                return XiqCaptureIdentifierType
            ap_serial_number = schemas.StrSchema
            
            
            class device_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'device_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            location_id = schemas.Int64Schema
        
            @staticmethod
            def destination() -> typing.Type['XiqDestinationType']:
                return XiqDestinationType
        
            @staticmethod
            def filter() -> typing.Type['XiqCaptureFilter']:
                return XiqCaptureFilter
        
            @staticmethod
            def capture_if() -> typing.Type['XiqCaptureLocation']:
                return XiqCaptureLocation
        
            @staticmethod
            def status() -> typing.Type['XiqPacketCaptureStatus']:
                return XiqPacketCaptureStatus
            
            
            class results(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqCaptureResult']:
                        return XiqCaptureResult
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqCaptureResult'], typing.List['XiqCaptureResult']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'results':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqCaptureResult':
                    return super().__getitem__(i)
            cloud_storage = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "start_time": start_time,
                "end_time": end_time,
                "org_id": org_id,
                "name": name,
                "duration": duration,
                "capture_id_type": capture_id_type,
                "ap_serial_number": ap_serial_number,
                "device_ids": device_ids,
                "location_id": location_id,
                "destination": destination,
                "filter": filter,
                "capture_if": capture_if,
                "status": status,
                "results": results,
                "cloud_storage": cloud_storage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capture_id_type"]) -> 'XiqCaptureIdentifierType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ap_serial_number"]) -> MetaOapg.properties.ap_serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_ids"]) -> MetaOapg.properties.device_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_id"]) -> MetaOapg.properties.location_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destination"]) -> 'XiqDestinationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filter"]) -> 'XiqCaptureFilter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capture_if"]) -> 'XiqCaptureLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'XiqPacketCaptureStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["results"]) -> MetaOapg.properties.results: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cloud_storage"]) -> MetaOapg.properties.cloud_storage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "start_time", "end_time", "org_id", "name", "duration", "capture_id_type", "ap_serial_number", "device_ids", "location_id", "destination", "filter", "capture_if", "status", "results", "cloud_storage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capture_id_type"]) -> typing.Union['XiqCaptureIdentifierType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ap_serial_number"]) -> typing.Union[MetaOapg.properties.ap_serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_ids"]) -> typing.Union[MetaOapg.properties.device_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_id"]) -> typing.Union[MetaOapg.properties.location_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destination"]) -> typing.Union['XiqDestinationType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filter"]) -> typing.Union['XiqCaptureFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capture_if"]) -> typing.Union['XiqCaptureLocation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['XiqPacketCaptureStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["results"]) -> typing.Union[MetaOapg.properties.results, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cloud_storage"]) -> typing.Union[MetaOapg.properties.cloud_storage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "start_time", "end_time", "org_id", "name", "duration", "capture_id_type", "ap_serial_number", "device_ids", "location_id", "destination", "filter", "capture_if", "status", "results", "cloud_storage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, str, datetime, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, str, datetime, schemas.Unset] = schemas.unset,
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        capture_id_type: typing.Union['XiqCaptureIdentifierType', schemas.Unset] = schemas.unset,
        ap_serial_number: typing.Union[MetaOapg.properties.ap_serial_number, str, schemas.Unset] = schemas.unset,
        device_ids: typing.Union[MetaOapg.properties.device_ids, list, tuple, schemas.Unset] = schemas.unset,
        location_id: typing.Union[MetaOapg.properties.location_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        destination: typing.Union['XiqDestinationType', schemas.Unset] = schemas.unset,
        filter: typing.Union['XiqCaptureFilter', schemas.Unset] = schemas.unset,
        capture_if: typing.Union['XiqCaptureLocation', schemas.Unset] = schemas.unset,
        status: typing.Union['XiqPacketCaptureStatus', schemas.Unset] = schemas.unset,
        results: typing.Union[MetaOapg.properties.results, list, tuple, schemas.Unset] = schemas.unset,
        cloud_storage: typing.Union[MetaOapg.properties.cloud_storage, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqPacketCapture':
        return super().__new__(
            cls,
            *_args,
            id=id,
            start_time=start_time,
            end_time=end_time,
            org_id=org_id,
            name=name,
            duration=duration,
            capture_id_type=capture_id_type,
            ap_serial_number=ap_serial_number,
            device_ids=device_ids,
            location_id=location_id,
            destination=destination,
            filter=filter,
            capture_if=capture_if,
            status=status,
            results=results,
            cloud_storage=cloud_storage,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_capture_filter import XiqCaptureFilter
from extremecloudiq.model.xiq_capture_identifier_type import XiqCaptureIdentifierType
from extremecloudiq.model.xiq_capture_location import XiqCaptureLocation
from extremecloudiq.model.xiq_capture_result import XiqCaptureResult
from extremecloudiq.model.xiq_destination_type import XiqDestinationType
from extremecloudiq.model.xiq_packet_capture_status import XiqPacketCaptureStatus
