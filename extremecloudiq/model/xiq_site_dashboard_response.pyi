# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqSiteDashboardResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The diagnostics information for each site.
    """


    class MetaOapg:
        
        class properties:
            site_name = schemas.StrSchema
            building_name = schemas.StrSchema
            floor_name = schemas.StrSchema
        
            @staticmethod
            def alert_dashboard() -> typing.Type['XiqAlertDashboard']:
                return XiqAlertDashboard
        
            @staticmethod
            def asset_dashboard() -> typing.Type['XiqAssetDashboard']:
                return XiqAssetDashboard
        
            @staticmethod
            def client_health_dashboard() -> typing.Type['XiqClientHealthDashboard']:
                return XiqClientHealthDashboard
        
            @staticmethod
            def device_health_dashboard() -> typing.Type['XiqDeviceHealthDashboard']:
                return XiqDeviceHealthDashboard
        
            @staticmethod
            def usage_and_capacity_dashboard() -> typing.Type['XiqUsageAndCapacityDashboard']:
                return XiqUsageAndCapacityDashboard
            __annotations__ = {
                "site_name": site_name,
                "building_name": building_name,
                "floor_name": floor_name,
                "alert_dashboard": alert_dashboard,
                "asset_dashboard": asset_dashboard,
                "client_health_dashboard": client_health_dashboard,
                "device_health_dashboard": device_health_dashboard,
                "usage_and_capacity_dashboard": usage_and_capacity_dashboard,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["site_name"]) -> MetaOapg.properties.site_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["building_name"]) -> MetaOapg.properties.building_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["floor_name"]) -> MetaOapg.properties.floor_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alert_dashboard"]) -> 'XiqAlertDashboard': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["asset_dashboard"]) -> 'XiqAssetDashboard': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["client_health_dashboard"]) -> 'XiqClientHealthDashboard': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_health_dashboard"]) -> 'XiqDeviceHealthDashboard': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usage_and_capacity_dashboard"]) -> 'XiqUsageAndCapacityDashboard': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["site_name", "building_name", "floor_name", "alert_dashboard", "asset_dashboard", "client_health_dashboard", "device_health_dashboard", "usage_and_capacity_dashboard", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["site_name"]) -> typing.Union[MetaOapg.properties.site_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["building_name"]) -> typing.Union[MetaOapg.properties.building_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["floor_name"]) -> typing.Union[MetaOapg.properties.floor_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alert_dashboard"]) -> typing.Union['XiqAlertDashboard', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["asset_dashboard"]) -> typing.Union['XiqAssetDashboard', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["client_health_dashboard"]) -> typing.Union['XiqClientHealthDashboard', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_health_dashboard"]) -> typing.Union['XiqDeviceHealthDashboard', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usage_and_capacity_dashboard"]) -> typing.Union['XiqUsageAndCapacityDashboard', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["site_name", "building_name", "floor_name", "alert_dashboard", "asset_dashboard", "client_health_dashboard", "device_health_dashboard", "usage_and_capacity_dashboard", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        site_name: typing.Union[MetaOapg.properties.site_name, str, schemas.Unset] = schemas.unset,
        building_name: typing.Union[MetaOapg.properties.building_name, str, schemas.Unset] = schemas.unset,
        floor_name: typing.Union[MetaOapg.properties.floor_name, str, schemas.Unset] = schemas.unset,
        alert_dashboard: typing.Union['XiqAlertDashboard', schemas.Unset] = schemas.unset,
        asset_dashboard: typing.Union['XiqAssetDashboard', schemas.Unset] = schemas.unset,
        client_health_dashboard: typing.Union['XiqClientHealthDashboard', schemas.Unset] = schemas.unset,
        device_health_dashboard: typing.Union['XiqDeviceHealthDashboard', schemas.Unset] = schemas.unset,
        usage_and_capacity_dashboard: typing.Union['XiqUsageAndCapacityDashboard', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqSiteDashboardResponse':
        return super().__new__(
            cls,
            *_args,
            site_name=site_name,
            building_name=building_name,
            floor_name=floor_name,
            alert_dashboard=alert_dashboard,
            asset_dashboard=asset_dashboard,
            client_health_dashboard=client_health_dashboard,
            device_health_dashboard=device_health_dashboard,
            usage_and_capacity_dashboard=usage_and_capacity_dashboard,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_alert_dashboard import XiqAlertDashboard
from extremecloudiq.model.xiq_asset_dashboard import XiqAssetDashboard
from extremecloudiq.model.xiq_client_health_dashboard import XiqClientHealthDashboard
from extremecloudiq.model.xiq_device_health_dashboard import XiqDeviceHealthDashboard
from extremecloudiq.model.xiq_usage_and_capacity_dashboard import XiqUsageAndCapacityDashboard
