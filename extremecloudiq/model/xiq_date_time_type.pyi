# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDateTimeType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The end date and time
    """


    class MetaOapg:
        required = {
            "month",
            "year",
            "minute_of_hour",
            "day_of_month",
            "hour_of_day",
        }
        
        class properties:
            day_of_month = schemas.Int32Schema
            month = schemas.Int32Schema
            year = schemas.Int32Schema
            hour_of_day = schemas.Int32Schema
            minute_of_hour = schemas.Int32Schema
            __annotations__ = {
                "day_of_month": day_of_month,
                "month": month,
                "year": year,
                "hour_of_day": hour_of_day,
                "minute_of_hour": minute_of_hour,
            }
    
    month: MetaOapg.properties.month
    year: MetaOapg.properties.year
    minute_of_hour: MetaOapg.properties.minute_of_hour
    day_of_month: MetaOapg.properties.day_of_month
    hour_of_day: MetaOapg.properties.hour_of_day
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["day_of_month"]) -> MetaOapg.properties.day_of_month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hour_of_day"]) -> MetaOapg.properties.hour_of_day: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minute_of_hour"]) -> MetaOapg.properties.minute_of_hour: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["day_of_month", "month", "year", "hour_of_day", "minute_of_hour", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["day_of_month"]) -> MetaOapg.properties.day_of_month: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["month"]) -> MetaOapg.properties.month: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["year"]) -> MetaOapg.properties.year: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hour_of_day"]) -> MetaOapg.properties.hour_of_day: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minute_of_hour"]) -> MetaOapg.properties.minute_of_hour: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["day_of_month", "month", "year", "hour_of_day", "minute_of_hour", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        month: typing.Union[MetaOapg.properties.month, decimal.Decimal, int, ],
        year: typing.Union[MetaOapg.properties.year, decimal.Decimal, int, ],
        minute_of_hour: typing.Union[MetaOapg.properties.minute_of_hour, decimal.Decimal, int, ],
        day_of_month: typing.Union[MetaOapg.properties.day_of_month, decimal.Decimal, int, ],
        hour_of_day: typing.Union[MetaOapg.properties.hour_of_day, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDateTimeType':
        return super().__new__(
            cls,
            *_args,
            month=month,
            year=year,
            minute_of_hour=minute_of_hour,
            day_of_month=day_of_month,
            hour_of_day=hour_of_day,
            _configuration=_configuration,
            **kwargs,
        )
