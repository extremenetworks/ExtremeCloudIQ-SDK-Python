# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqViqExportImportStatusResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ExtremeCloud IQ Viq Export Import Status 
    """


    class MetaOapg:
        required = {
            "export_file_name",
            "log_file_name",
        }
        
        class properties:
            export_file_name = schemas.StrSchema
            log_file_name = schemas.StrSchema
            user_name = schemas.StrSchema
            vhm_id = schemas.StrSchema
            operation = schemas.StrSchema
            status = schemas.StrSchema
            total_finish_percentage = schemas.Int64Schema
            export_time = schemas.Int64Schema
            start_time = schemas.Int64Schema
            end_time = schemas.Int64Schema
            remain_time = schemas.Int64Schema
            
            
            class viq_task_progresses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqViqTaskProgress']:
                        return XiqViqTaskProgress
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqViqTaskProgress'], typing.List['XiqViqTaskProgress']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'viq_task_progresses':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqViqTaskProgress':
                    return super().__getitem__(i)
            __annotations__ = {
                "export_file_name": export_file_name,
                "log_file_name": log_file_name,
                "user_name": user_name,
                "vhm_id": vhm_id,
                "operation": operation,
                "status": status,
                "total_finish_percentage": total_finish_percentage,
                "export_time": export_time,
                "start_time": start_time,
                "end_time": end_time,
                "remain_time": remain_time,
                "viq_task_progresses": viq_task_progresses,
            }
    
    export_file_name: MetaOapg.properties.export_file_name
    log_file_name: MetaOapg.properties.log_file_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["export_file_name"]) -> MetaOapg.properties.export_file_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["log_file_name"]) -> MetaOapg.properties.log_file_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_name"]) -> MetaOapg.properties.user_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vhm_id"]) -> MetaOapg.properties.vhm_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_finish_percentage"]) -> MetaOapg.properties.total_finish_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["export_time"]) -> MetaOapg.properties.export_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["remain_time"]) -> MetaOapg.properties.remain_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["viq_task_progresses"]) -> MetaOapg.properties.viq_task_progresses: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["export_file_name", "log_file_name", "user_name", "vhm_id", "operation", "status", "total_finish_percentage", "export_time", "start_time", "end_time", "remain_time", "viq_task_progresses", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["export_file_name"]) -> MetaOapg.properties.export_file_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["log_file_name"]) -> MetaOapg.properties.log_file_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_name"]) -> typing.Union[MetaOapg.properties.user_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vhm_id"]) -> typing.Union[MetaOapg.properties.vhm_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> typing.Union[MetaOapg.properties.operation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_finish_percentage"]) -> typing.Union[MetaOapg.properties.total_finish_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["export_time"]) -> typing.Union[MetaOapg.properties.export_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["remain_time"]) -> typing.Union[MetaOapg.properties.remain_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["viq_task_progresses"]) -> typing.Union[MetaOapg.properties.viq_task_progresses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["export_file_name", "log_file_name", "user_name", "vhm_id", "operation", "status", "total_finish_percentage", "export_time", "start_time", "end_time", "remain_time", "viq_task_progresses", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        export_file_name: typing.Union[MetaOapg.properties.export_file_name, str, ],
        log_file_name: typing.Union[MetaOapg.properties.log_file_name, str, ],
        user_name: typing.Union[MetaOapg.properties.user_name, str, schemas.Unset] = schemas.unset,
        vhm_id: typing.Union[MetaOapg.properties.vhm_id, str, schemas.Unset] = schemas.unset,
        operation: typing.Union[MetaOapg.properties.operation, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        total_finish_percentage: typing.Union[MetaOapg.properties.total_finish_percentage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        export_time: typing.Union[MetaOapg.properties.export_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        remain_time: typing.Union[MetaOapg.properties.remain_time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        viq_task_progresses: typing.Union[MetaOapg.properties.viq_task_progresses, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqViqExportImportStatusResponse':
        return super().__new__(
            cls,
            *_args,
            export_file_name=export_file_name,
            log_file_name=log_file_name,
            user_name=user_name,
            vhm_id=vhm_id,
            operation=operation,
            status=status,
            total_finish_percentage=total_finish_percentage,
            export_time=export_time,
            start_time=start_time,
            end_time=end_time,
            remain_time=remain_time,
            viq_task_progresses=viq_task_progresses,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_viq_task_progress import XiqViqTaskProgress
