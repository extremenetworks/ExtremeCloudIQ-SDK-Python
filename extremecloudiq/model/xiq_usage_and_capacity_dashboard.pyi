# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqUsageAndCapacityDashboard(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The usage and capacity diagnostic data for total devices, wired devices like AP, and wireless devices like switch.
    """


    class MetaOapg:
        
        class properties:
            total_usage_and_capacity_issues = schemas.Int64Schema
            wired_usage_and_capacity_issues = schemas.Int64Schema
            wireless_usage_and_capacity_issues = schemas.Int64Schema
            __annotations__ = {
                "total_usage_and_capacity_issues": total_usage_and_capacity_issues,
                "wired_usage_and_capacity_issues": wired_usage_and_capacity_issues,
                "wireless_usage_and_capacity_issues": wireless_usage_and_capacity_issues,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_usage_and_capacity_issues"]) -> MetaOapg.properties.total_usage_and_capacity_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wired_usage_and_capacity_issues"]) -> MetaOapg.properties.wired_usage_and_capacity_issues: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wireless_usage_and_capacity_issues"]) -> MetaOapg.properties.wireless_usage_and_capacity_issues: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["total_usage_and_capacity_issues", "wired_usage_and_capacity_issues", "wireless_usage_and_capacity_issues", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_usage_and_capacity_issues"]) -> typing.Union[MetaOapg.properties.total_usage_and_capacity_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wired_usage_and_capacity_issues"]) -> typing.Union[MetaOapg.properties.wired_usage_and_capacity_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wireless_usage_and_capacity_issues"]) -> typing.Union[MetaOapg.properties.wireless_usage_and_capacity_issues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["total_usage_and_capacity_issues", "wired_usage_and_capacity_issues", "wireless_usage_and_capacity_issues", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        total_usage_and_capacity_issues: typing.Union[MetaOapg.properties.total_usage_and_capacity_issues, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wired_usage_and_capacity_issues: typing.Union[MetaOapg.properties.wired_usage_and_capacity_issues, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wireless_usage_and_capacity_issues: typing.Union[MetaOapg.properties.wireless_usage_and_capacity_issues, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqUsageAndCapacityDashboard':
        return super().__new__(
            cls,
            *_args,
            total_usage_and_capacity_issues=total_usage_and_capacity_issues,
            wired_usage_and_capacity_issues=wired_usage_and_capacity_issues,
            wireless_usage_and_capacity_issues=wireless_usage_and_capacity_issues,
            _configuration=_configuration,
            **kwargs,
        )
