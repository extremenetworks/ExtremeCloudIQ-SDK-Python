# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAlertEventRulesByCategory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The Alert Event Rule Model
    """


    class MetaOapg:
        required = {
            "category_name",
            "category_id",
            "rules",
        }
        
        class properties:
            category_id = schemas.Int64Schema
            category_name = schemas.StrSchema
            
            
            class rules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqAlertRuleOverview']:
                        return XiqAlertRuleOverview
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqAlertRuleOverview'], typing.List['XiqAlertRuleOverview']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rules':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqAlertRuleOverview':
                    return super().__getitem__(i)
            __annotations__ = {
                "category_id": category_id,
                "category_name": category_name,
                "rules": rules,
            }
    
    category_name: MetaOapg.properties.category_name
    category_id: MetaOapg.properties.category_id
    rules: MetaOapg.properties.rules
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_name"]) -> MetaOapg.properties.category_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rules"]) -> MetaOapg.properties.rules: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["category_id", "category_name", "rules", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_name"]) -> MetaOapg.properties.category_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rules"]) -> MetaOapg.properties.rules: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["category_id", "category_name", "rules", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        category_name: typing.Union[MetaOapg.properties.category_name, str, ],
        category_id: typing.Union[MetaOapg.properties.category_id, decimal.Decimal, int, ],
        rules: typing.Union[MetaOapg.properties.rules, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAlertEventRulesByCategory':
        return super().__new__(
            cls,
            *_args,
            category_name=category_name,
            category_id=category_id,
            rules=rules,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_alert_rule_overview import XiqAlertRuleOverview
