# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqSetSsidModeDot1xRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The request for setting the SSID to be 802.1x mode.
    """


    class MetaOapg:
        required = {
            "key_management",
            "encryption_method",
            "enable_idm",
        }
        
        class properties:
        
            @staticmethod
            def key_management() -> typing.Type['XiqSsidDot1xKeyManagement']:
                return XiqSsidDot1xKeyManagement
        
            @staticmethod
            def encryption_method() -> typing.Type['XiqSsidDot1xEncryptionMethod']:
                return XiqSsidDot1xEncryptionMethod
            enable_idm = schemas.BoolSchema
            transition_mode = schemas.BoolSchema
            radius_server_group_id = schemas.Int64Schema
            
            
            class user_group_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_group_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            enable_uztna = schemas.BoolSchema
            __annotations__ = {
                "key_management": key_management,
                "encryption_method": encryption_method,
                "enable_idm": enable_idm,
                "transition_mode": transition_mode,
                "radius_server_group_id": radius_server_group_id,
                "user_group_ids": user_group_ids,
                "enable_uztna": enable_uztna,
            }
    
    key_management: 'XiqSsidDot1xKeyManagement'
    encryption_method: 'XiqSsidDot1xEncryptionMethod'
    enable_idm: MetaOapg.properties.enable_idm
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["key_management"]) -> 'XiqSsidDot1xKeyManagement': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encryption_method"]) -> 'XiqSsidDot1xEncryptionMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_idm"]) -> MetaOapg.properties.enable_idm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transition_mode"]) -> MetaOapg.properties.transition_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["radius_server_group_id"]) -> MetaOapg.properties.radius_server_group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_group_ids"]) -> MetaOapg.properties.user_group_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_uztna"]) -> MetaOapg.properties.enable_uztna: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["key_management", "encryption_method", "enable_idm", "transition_mode", "radius_server_group_id", "user_group_ids", "enable_uztna", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["key_management"]) -> 'XiqSsidDot1xKeyManagement': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encryption_method"]) -> 'XiqSsidDot1xEncryptionMethod': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_idm"]) -> MetaOapg.properties.enable_idm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transition_mode"]) -> typing.Union[MetaOapg.properties.transition_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["radius_server_group_id"]) -> typing.Union[MetaOapg.properties.radius_server_group_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_group_ids"]) -> typing.Union[MetaOapg.properties.user_group_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_uztna"]) -> typing.Union[MetaOapg.properties.enable_uztna, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["key_management", "encryption_method", "enable_idm", "transition_mode", "radius_server_group_id", "user_group_ids", "enable_uztna", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        key_management: 'XiqSsidDot1xKeyManagement',
        encryption_method: 'XiqSsidDot1xEncryptionMethod',
        enable_idm: typing.Union[MetaOapg.properties.enable_idm, bool, ],
        transition_mode: typing.Union[MetaOapg.properties.transition_mode, bool, schemas.Unset] = schemas.unset,
        radius_server_group_id: typing.Union[MetaOapg.properties.radius_server_group_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        user_group_ids: typing.Union[MetaOapg.properties.user_group_ids, list, tuple, schemas.Unset] = schemas.unset,
        enable_uztna: typing.Union[MetaOapg.properties.enable_uztna, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqSetSsidModeDot1xRequest':
        return super().__new__(
            cls,
            *_args,
            key_management=key_management,
            encryption_method=encryption_method,
            enable_idm=enable_idm,
            transition_mode=transition_mode,
            radius_server_group_id=radius_server_group_id,
            user_group_ids=user_group_ids,
            enable_uztna=enable_uztna,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_ssid_dot1x_encryption_method import XiqSsidDot1xEncryptionMethod
from extremecloudiq.model.xiq_ssid_dot1x_key_management import XiqSsidDot1xKeyManagement
