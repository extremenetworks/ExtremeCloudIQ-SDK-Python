# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqDeviceStatsEntity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ExtremeCloud IQ Device Stats Entity
    """


    class MetaOapg:
        required = {
            "timestamp",
        }
        
        class properties:
            timestamp = schemas.Int64Schema
            avg_interference_utilization = schemas.Int32Schema
            avg_tx_utilization = schemas.Int32Schema
            avg_rx_utilization = schemas.Int32Schema
            avg_total_channel_utilization = schemas.Int32Schema
            avg_num_clients = schemas.Int32Schema
            normal_interference = schemas.Int32Schema
            __annotations__ = {
                "timestamp": timestamp,
                "avg_interference_utilization": avg_interference_utilization,
                "avg_tx_utilization": avg_tx_utilization,
                "avg_rx_utilization": avg_rx_utilization,
                "avg_total_channel_utilization": avg_total_channel_utilization,
                "avg_num_clients": avg_num_clients,
                "normal_interference": normal_interference,
            }
    
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avg_interference_utilization"]) -> MetaOapg.properties.avg_interference_utilization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avg_tx_utilization"]) -> MetaOapg.properties.avg_tx_utilization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avg_rx_utilization"]) -> MetaOapg.properties.avg_rx_utilization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avg_total_channel_utilization"]) -> MetaOapg.properties.avg_total_channel_utilization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avg_num_clients"]) -> MetaOapg.properties.avg_num_clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["normal_interference"]) -> MetaOapg.properties.normal_interference: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timestamp", "avg_interference_utilization", "avg_tx_utilization", "avg_rx_utilization", "avg_total_channel_utilization", "avg_num_clients", "normal_interference", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avg_interference_utilization"]) -> typing.Union[MetaOapg.properties.avg_interference_utilization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avg_tx_utilization"]) -> typing.Union[MetaOapg.properties.avg_tx_utilization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avg_rx_utilization"]) -> typing.Union[MetaOapg.properties.avg_rx_utilization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avg_total_channel_utilization"]) -> typing.Union[MetaOapg.properties.avg_total_channel_utilization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avg_num_clients"]) -> typing.Union[MetaOapg.properties.avg_num_clients, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["normal_interference"]) -> typing.Union[MetaOapg.properties.normal_interference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timestamp", "avg_interference_utilization", "avg_tx_utilization", "avg_rx_utilization", "avg_total_channel_utilization", "avg_num_clients", "normal_interference", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, ],
        avg_interference_utilization: typing.Union[MetaOapg.properties.avg_interference_utilization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        avg_tx_utilization: typing.Union[MetaOapg.properties.avg_tx_utilization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        avg_rx_utilization: typing.Union[MetaOapg.properties.avg_rx_utilization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        avg_total_channel_utilization: typing.Union[MetaOapg.properties.avg_total_channel_utilization, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        avg_num_clients: typing.Union[MetaOapg.properties.avg_num_clients, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        normal_interference: typing.Union[MetaOapg.properties.normal_interference, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqDeviceStatsEntity':
        return super().__new__(
            cls,
            *_args,
            timestamp=timestamp,
            avg_interference_utilization=avg_interference_utilization,
            avg_tx_utilization=avg_tx_utilization,
            avg_rx_utilization=avg_rx_utilization,
            avg_total_channel_utilization=avg_total_channel_utilization,
            avg_num_clients=avg_num_clients,
            normal_interference=normal_interference,
            _configuration=_configuration,
            **kwargs,
        )
