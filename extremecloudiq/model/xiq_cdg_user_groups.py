# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqCdgUserGroups(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

     The User Group of Credential Distribution Group 
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "id",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            org_id = schemas.Int64Schema
            owner_id = schemas.Int64Schema
            name = schemas.StrSchema
            json_type = schemas.StrSchema
            description = schemas.StrSchema
            password_rule_settings_id = schemas.Int64Schema
            delivery_policy_settings_id = schemas.Int64Schema
            time_expiration_settings_id = schemas.Int64Schema
            user_count = schemas.Int32Schema
            
            
            class ssids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ssids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            group_type = schemas.StrSchema
            pcg_use_only = schemas.BoolSchema
            ppsk_use_only = schemas.BoolSchema
            enable_pcg_filter = schemas.BoolSchema
            enable_self_reg = schemas.BoolSchema
            enable_renew = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "org_id": org_id,
                "owner_id": owner_id,
                "name": name,
                "json_type": json_type,
                "description": description,
                "password_rule_settings_id": password_rule_settings_id,
                "delivery_policy_settings_id": delivery_policy_settings_id,
                "time_expiration_settings_id": time_expiration_settings_id,
                "user_count": user_count,
                "ssids": ssids,
                "group_type": group_type,
                "pcg_use_only": pcg_use_only,
                "ppsk_use_only": ppsk_use_only,
                "enable_pcg_filter": enable_pcg_filter,
                "enable_self_reg": enable_self_reg,
                "enable_renew": enable_renew,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["json_type"]) -> MetaOapg.properties.json_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password_rule_settings_id"]) -> MetaOapg.properties.password_rule_settings_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delivery_policy_settings_id"]) -> MetaOapg.properties.delivery_policy_settings_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_expiration_settings_id"]) -> MetaOapg.properties.time_expiration_settings_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_count"]) -> MetaOapg.properties.user_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ssids"]) -> MetaOapg.properties.ssids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_type"]) -> MetaOapg.properties.group_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pcg_use_only"]) -> MetaOapg.properties.pcg_use_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ppsk_use_only"]) -> MetaOapg.properties.ppsk_use_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_pcg_filter"]) -> MetaOapg.properties.enable_pcg_filter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_self_reg"]) -> MetaOapg.properties.enable_self_reg: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_renew"]) -> MetaOapg.properties.enable_renew: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "owner_id", "name", "json_type", "description", "password_rule_settings_id", "delivery_policy_settings_id", "time_expiration_settings_id", "user_count", "ssids", "group_type", "pcg_use_only", "ppsk_use_only", "enable_pcg_filter", "enable_self_reg", "enable_renew", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["json_type"]) -> typing.Union[MetaOapg.properties.json_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password_rule_settings_id"]) -> typing.Union[MetaOapg.properties.password_rule_settings_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delivery_policy_settings_id"]) -> typing.Union[MetaOapg.properties.delivery_policy_settings_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_expiration_settings_id"]) -> typing.Union[MetaOapg.properties.time_expiration_settings_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_count"]) -> typing.Union[MetaOapg.properties.user_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ssids"]) -> typing.Union[MetaOapg.properties.ssids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_type"]) -> typing.Union[MetaOapg.properties.group_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pcg_use_only"]) -> typing.Union[MetaOapg.properties.pcg_use_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ppsk_use_only"]) -> typing.Union[MetaOapg.properties.ppsk_use_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_pcg_filter"]) -> typing.Union[MetaOapg.properties.enable_pcg_filter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_self_reg"]) -> typing.Union[MetaOapg.properties.enable_self_reg, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_renew"]) -> typing.Union[MetaOapg.properties.enable_renew, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "owner_id", "name", "json_type", "description", "password_rule_settings_id", "delivery_policy_settings_id", "time_expiration_settings_id", "user_count", "ssids", "group_type", "pcg_use_only", "ppsk_use_only", "enable_pcg_filter", "enable_self_reg", "enable_renew", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        owner_id: typing.Union[MetaOapg.properties.owner_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        json_type: typing.Union[MetaOapg.properties.json_type, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        password_rule_settings_id: typing.Union[MetaOapg.properties.password_rule_settings_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        delivery_policy_settings_id: typing.Union[MetaOapg.properties.delivery_policy_settings_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        time_expiration_settings_id: typing.Union[MetaOapg.properties.time_expiration_settings_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        user_count: typing.Union[MetaOapg.properties.user_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ssids: typing.Union[MetaOapg.properties.ssids, list, tuple, schemas.Unset] = schemas.unset,
        group_type: typing.Union[MetaOapg.properties.group_type, str, schemas.Unset] = schemas.unset,
        pcg_use_only: typing.Union[MetaOapg.properties.pcg_use_only, bool, schemas.Unset] = schemas.unset,
        ppsk_use_only: typing.Union[MetaOapg.properties.ppsk_use_only, bool, schemas.Unset] = schemas.unset,
        enable_pcg_filter: typing.Union[MetaOapg.properties.enable_pcg_filter, bool, schemas.Unset] = schemas.unset,
        enable_self_reg: typing.Union[MetaOapg.properties.enable_self_reg, bool, schemas.Unset] = schemas.unset,
        enable_renew: typing.Union[MetaOapg.properties.enable_renew, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqCdgUserGroups':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            id=id,
            org_id=org_id,
            owner_id=owner_id,
            name=name,
            json_type=json_type,
            description=description,
            password_rule_settings_id=password_rule_settings_id,
            delivery_policy_settings_id=delivery_policy_settings_id,
            time_expiration_settings_id=time_expiration_settings_id,
            user_count=user_count,
            ssids=ssids,
            group_type=group_type,
            pcg_use_only=pcg_use_only,
            ppsk_use_only=ppsk_use_only,
            enable_pcg_filter=enable_pcg_filter,
            enable_self_reg=enable_self_reg,
            enable_renew=enable_renew,
            _configuration=_configuration,
            **kwargs,
        )
