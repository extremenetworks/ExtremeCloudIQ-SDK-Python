# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.3.0.140
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqRoamingTrialDetail(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Get roaming trial details data
    """


    class MetaOapg:
        
        class properties:
            channel_from = schemas.Int32Schema
            channel_to = schemas.Int32Schema
            rssi_from = schemas.Int32Schema
            rssi_to = schemas.Int32Schema
            snr_from = schemas.Int32Schema
            snr_to = schemas.Int32Schema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ASSOC_FAILED(cls):
                    return cls("ASSOC_FAILED")
                
                @schemas.classproperty
                def DHCP_FAILED(cls):
                    return cls("DHCP_FAILED")
                
                @schemas.classproperty
                def GW_FAILED(cls):
                    return cls("GW_FAILED")
                
                @schemas.classproperty
                def AUTH_FAILED(cls):
                    return cls("AUTH_FAILED")
                
                @schemas.classproperty
                def DNS_FAILED(cls):
                    return cls("DNS_FAILED")
                
                @schemas.classproperty
                def ROAMING_STARTED(cls):
                    return cls("ROAMING_STARTED")
            reason = schemas.StrSchema
            __annotations__ = {
                "channel_from": channel_from,
                "channel_to": channel_to,
                "rssi_from": rssi_from,
                "rssi_to": rssi_to,
                "snr_from": snr_from,
                "snr_to": snr_to,
                "status": status,
                "reason": reason,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_from"]) -> MetaOapg.properties.channel_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel_to"]) -> MetaOapg.properties.channel_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rssi_from"]) -> MetaOapg.properties.rssi_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rssi_to"]) -> MetaOapg.properties.rssi_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snr_from"]) -> MetaOapg.properties.snr_from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snr_to"]) -> MetaOapg.properties.snr_to: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel_from", "channel_to", "rssi_from", "rssi_to", "snr_from", "snr_to", "status", "reason", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_from"]) -> typing.Union[MetaOapg.properties.channel_from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel_to"]) -> typing.Union[MetaOapg.properties.channel_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rssi_from"]) -> typing.Union[MetaOapg.properties.rssi_from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rssi_to"]) -> typing.Union[MetaOapg.properties.rssi_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snr_from"]) -> typing.Union[MetaOapg.properties.snr_from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snr_to"]) -> typing.Union[MetaOapg.properties.snr_to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel_from", "channel_to", "rssi_from", "rssi_to", "snr_from", "snr_to", "status", "reason", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        channel_from: typing.Union[MetaOapg.properties.channel_from, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        channel_to: typing.Union[MetaOapg.properties.channel_to, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rssi_from: typing.Union[MetaOapg.properties.rssi_from, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rssi_to: typing.Union[MetaOapg.properties.rssi_to, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        snr_from: typing.Union[MetaOapg.properties.snr_from, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        snr_to: typing.Union[MetaOapg.properties.snr_to, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqRoamingTrialDetail':
        return super().__new__(
            cls,
            *_args,
            channel_from=channel_from,
            channel_to=channel_to,
            rssi_from=rssi_from,
            rssi_to=rssi_to,
            snr_from=snr_from,
            snr_to=snr_to,
            status=status,
            reason=reason,
            _configuration=_configuration,
            **kwargs,
        )
