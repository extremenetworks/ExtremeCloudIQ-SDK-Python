# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqAnomaliesCountVoEntity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ExtremeCloud IQ Count Entity
    """


    class MetaOapg:
        required = {
            "timestamp",
        }
        
        class properties:
            timestamp = schemas.Int64Schema
            total_anomalies_count = schemas.Int64Schema
            wifi_efficiency_count = schemas.Int64Schema
            wifi_capacity_count = schemas.Int64Schema
            poe_count = schemas.Int64Schema
            pe_count = schemas.Int64Schema
            dfs_count = schemas.Int64Schema
            mb_cast_count = schemas.Int64Schema
            hardware_health_count = schemas.Int64Schema
            missing_vlan_count = schemas.Int64Schema
            __annotations__ = {
                "timestamp": timestamp,
                "total_anomalies_count": total_anomalies_count,
                "wifi_efficiency_count": wifi_efficiency_count,
                "wifi_capacity_count": wifi_capacity_count,
                "poe_count": poe_count,
                "pe_count": pe_count,
                "dfs_count": dfs_count,
                "mb_cast_count": mb_cast_count,
                "hardware_health_count": hardware_health_count,
                "missing_vlan_count": missing_vlan_count,
            }
    
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_anomalies_count"]) -> MetaOapg.properties.total_anomalies_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wifi_efficiency_count"]) -> MetaOapg.properties.wifi_efficiency_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wifi_capacity_count"]) -> MetaOapg.properties.wifi_capacity_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["poe_count"]) -> MetaOapg.properties.poe_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pe_count"]) -> MetaOapg.properties.pe_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dfs_count"]) -> MetaOapg.properties.dfs_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mb_cast_count"]) -> MetaOapg.properties.mb_cast_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hardware_health_count"]) -> MetaOapg.properties.hardware_health_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["missing_vlan_count"]) -> MetaOapg.properties.missing_vlan_count: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timestamp", "total_anomalies_count", "wifi_efficiency_count", "wifi_capacity_count", "poe_count", "pe_count", "dfs_count", "mb_cast_count", "hardware_health_count", "missing_vlan_count", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_anomalies_count"]) -> typing.Union[MetaOapg.properties.total_anomalies_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wifi_efficiency_count"]) -> typing.Union[MetaOapg.properties.wifi_efficiency_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wifi_capacity_count"]) -> typing.Union[MetaOapg.properties.wifi_capacity_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["poe_count"]) -> typing.Union[MetaOapg.properties.poe_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pe_count"]) -> typing.Union[MetaOapg.properties.pe_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dfs_count"]) -> typing.Union[MetaOapg.properties.dfs_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mb_cast_count"]) -> typing.Union[MetaOapg.properties.mb_cast_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hardware_health_count"]) -> typing.Union[MetaOapg.properties.hardware_health_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["missing_vlan_count"]) -> typing.Union[MetaOapg.properties.missing_vlan_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timestamp", "total_anomalies_count", "wifi_efficiency_count", "wifi_capacity_count", "poe_count", "pe_count", "dfs_count", "mb_cast_count", "hardware_health_count", "missing_vlan_count", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, ],
        total_anomalies_count: typing.Union[MetaOapg.properties.total_anomalies_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wifi_efficiency_count: typing.Union[MetaOapg.properties.wifi_efficiency_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        wifi_capacity_count: typing.Union[MetaOapg.properties.wifi_capacity_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        poe_count: typing.Union[MetaOapg.properties.poe_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pe_count: typing.Union[MetaOapg.properties.pe_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dfs_count: typing.Union[MetaOapg.properties.dfs_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mb_cast_count: typing.Union[MetaOapg.properties.mb_cast_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        hardware_health_count: typing.Union[MetaOapg.properties.hardware_health_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        missing_vlan_count: typing.Union[MetaOapg.properties.missing_vlan_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqAnomaliesCountVoEntity':
        return super().__new__(
            cls,
            *_args,
            timestamp=timestamp,
            total_anomalies_count=total_anomalies_count,
            wifi_efficiency_count=wifi_efficiency_count,
            wifi_capacity_count=wifi_capacity_count,
            poe_count=poe_count,
            pe_count=pe_count,
            dfs_count=dfs_count,
            mb_cast_count=mb_cast_count,
            hardware_health_count=hardware_health_count,
            missing_vlan_count=missing_vlan_count,
            _configuration=_configuration,
            **kwargs,
        )
