# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.3.0.140
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqWiredUsageCapacityGridResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Response body for Wired Usage and Capacity grid
    """


    class MetaOapg:
        
        class properties:
            device_id = schemas.Int64Schema
            device_hostname = schemas.StrSchema
            device_ip = schemas.StrSchema
            is_stack = schemas.BoolSchema
            site = schemas.StrSchema
            building = schemas.StrSchema
            floor = schemas.StrSchema
            total_clients_count = schemas.Int64Schema
            total_issue_clients_count = schemas.Int64Schema
            total_bandwidth_utilized = schemas.Int64Schema
            total_throughput_rx = schemas.Int64Schema
            total_throughput_tx = schemas.Int64Schema
            total_unicast_pkts = schemas.Int32Schema
            total_multicast_pkts = schemas.Int32Schema
            total_broadcast_pkts = schemas.Int32Schema
            total_queue_tx_pkts = schemas.Int64Schema
            total_queue_congestion_pkts = schemas.Int64Schema
            __annotations__ = {
                "device_id": device_id,
                "device_hostname": device_hostname,
                "device_ip": device_ip,
                "is_stack": is_stack,
                "site": site,
                "building": building,
                "floor": floor,
                "total_clients_count": total_clients_count,
                "total_issue_clients_count": total_issue_clients_count,
                "total_bandwidth_utilized": total_bandwidth_utilized,
                "total_throughput_rx": total_throughput_rx,
                "total_throughput_tx": total_throughput_tx,
                "total_unicast_pkts": total_unicast_pkts,
                "total_multicast_pkts": total_multicast_pkts,
                "total_broadcast_pkts": total_broadcast_pkts,
                "total_queue_tx_pkts": total_queue_tx_pkts,
                "total_queue_congestion_pkts": total_queue_congestion_pkts,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_hostname"]) -> MetaOapg.properties.device_hostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_ip"]) -> MetaOapg.properties.device_ip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_stack"]) -> MetaOapg.properties.is_stack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["site"]) -> MetaOapg.properties.site: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["building"]) -> MetaOapg.properties.building: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["floor"]) -> MetaOapg.properties.floor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_clients_count"]) -> MetaOapg.properties.total_clients_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_issue_clients_count"]) -> MetaOapg.properties.total_issue_clients_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_bandwidth_utilized"]) -> MetaOapg.properties.total_bandwidth_utilized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_throughput_rx"]) -> MetaOapg.properties.total_throughput_rx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_throughput_tx"]) -> MetaOapg.properties.total_throughput_tx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_unicast_pkts"]) -> MetaOapg.properties.total_unicast_pkts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_multicast_pkts"]) -> MetaOapg.properties.total_multicast_pkts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_broadcast_pkts"]) -> MetaOapg.properties.total_broadcast_pkts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_queue_tx_pkts"]) -> MetaOapg.properties.total_queue_tx_pkts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_queue_congestion_pkts"]) -> MetaOapg.properties.total_queue_congestion_pkts: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["device_id", "device_hostname", "device_ip", "is_stack", "site", "building", "floor", "total_clients_count", "total_issue_clients_count", "total_bandwidth_utilized", "total_throughput_rx", "total_throughput_tx", "total_unicast_pkts", "total_multicast_pkts", "total_broadcast_pkts", "total_queue_tx_pkts", "total_queue_congestion_pkts", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> typing.Union[MetaOapg.properties.device_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_hostname"]) -> typing.Union[MetaOapg.properties.device_hostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_ip"]) -> typing.Union[MetaOapg.properties.device_ip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_stack"]) -> typing.Union[MetaOapg.properties.is_stack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["site"]) -> typing.Union[MetaOapg.properties.site, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["building"]) -> typing.Union[MetaOapg.properties.building, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["floor"]) -> typing.Union[MetaOapg.properties.floor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_clients_count"]) -> typing.Union[MetaOapg.properties.total_clients_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_issue_clients_count"]) -> typing.Union[MetaOapg.properties.total_issue_clients_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_bandwidth_utilized"]) -> typing.Union[MetaOapg.properties.total_bandwidth_utilized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_throughput_rx"]) -> typing.Union[MetaOapg.properties.total_throughput_rx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_throughput_tx"]) -> typing.Union[MetaOapg.properties.total_throughput_tx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_unicast_pkts"]) -> typing.Union[MetaOapg.properties.total_unicast_pkts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_multicast_pkts"]) -> typing.Union[MetaOapg.properties.total_multicast_pkts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_broadcast_pkts"]) -> typing.Union[MetaOapg.properties.total_broadcast_pkts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_queue_tx_pkts"]) -> typing.Union[MetaOapg.properties.total_queue_tx_pkts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_queue_congestion_pkts"]) -> typing.Union[MetaOapg.properties.total_queue_congestion_pkts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["device_id", "device_hostname", "device_ip", "is_stack", "site", "building", "floor", "total_clients_count", "total_issue_clients_count", "total_bandwidth_utilized", "total_throughput_rx", "total_throughput_tx", "total_unicast_pkts", "total_multicast_pkts", "total_broadcast_pkts", "total_queue_tx_pkts", "total_queue_congestion_pkts", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        device_id: typing.Union[MetaOapg.properties.device_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        device_hostname: typing.Union[MetaOapg.properties.device_hostname, str, schemas.Unset] = schemas.unset,
        device_ip: typing.Union[MetaOapg.properties.device_ip, str, schemas.Unset] = schemas.unset,
        is_stack: typing.Union[MetaOapg.properties.is_stack, bool, schemas.Unset] = schemas.unset,
        site: typing.Union[MetaOapg.properties.site, str, schemas.Unset] = schemas.unset,
        building: typing.Union[MetaOapg.properties.building, str, schemas.Unset] = schemas.unset,
        floor: typing.Union[MetaOapg.properties.floor, str, schemas.Unset] = schemas.unset,
        total_clients_count: typing.Union[MetaOapg.properties.total_clients_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_issue_clients_count: typing.Union[MetaOapg.properties.total_issue_clients_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_bandwidth_utilized: typing.Union[MetaOapg.properties.total_bandwidth_utilized, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_throughput_rx: typing.Union[MetaOapg.properties.total_throughput_rx, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_throughput_tx: typing.Union[MetaOapg.properties.total_throughput_tx, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_unicast_pkts: typing.Union[MetaOapg.properties.total_unicast_pkts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_multicast_pkts: typing.Union[MetaOapg.properties.total_multicast_pkts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_broadcast_pkts: typing.Union[MetaOapg.properties.total_broadcast_pkts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_queue_tx_pkts: typing.Union[MetaOapg.properties.total_queue_tx_pkts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total_queue_congestion_pkts: typing.Union[MetaOapg.properties.total_queue_congestion_pkts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqWiredUsageCapacityGridResponse':
        return super().__new__(
            cls,
            *_args,
            device_id=device_id,
            device_hostname=device_hostname,
            device_ip=device_ip,
            is_stack=is_stack,
            site=site,
            building=building,
            floor=floor,
            total_clients_count=total_clients_count,
            total_issue_clients_count=total_issue_clients_count,
            total_bandwidth_utilized=total_bandwidth_utilized,
            total_throughput_rx=total_throughput_rx,
            total_throughput_tx=total_throughput_tx,
            total_unicast_pkts=total_unicast_pkts,
            total_multicast_pkts=total_multicast_pkts,
            total_broadcast_pkts=total_broadcast_pkts,
            total_queue_tx_pkts=total_queue_tx_pkts,
            total_queue_congestion_pkts=total_queue_congestion_pkts,
            _configuration=_configuration,
            **kwargs,
        )
