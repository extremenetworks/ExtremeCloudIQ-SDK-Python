# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqCredentialDistributionGroup(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

     The Credential Distribution Group 
    """


    class MetaOapg:
        required = {
            "update_time",
            "create_time",
            "id",
        }
        
        class properties:
            id = schemas.Int64Schema
            create_time = schemas.DateTimeSchema
            update_time = schemas.DateTimeSchema
            org_id = schemas.Int64Schema
            owner_id = schemas.Int64Schema
            group_type = schemas.StrSchema
            enable_email_approval = schemas.BoolSchema
            enable_user_limitation = schemas.BoolSchema
        
            @staticmethod
            def employee_group_type() -> typing.Type['XiqEmployeeGroupType']:
                return XiqEmployeeGroupType
            
            
            class employee_groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqEmployeeGroup']:
                        return XiqEmployeeGroup
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqEmployeeGroup'], typing.List['XiqEmployeeGroup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'employee_groups':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqEmployeeGroup':
                    return super().__getitem__(i)
            name = schemas.StrSchema
            restrict_number = schemas.StrSchema
            
            
            class user_groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['XiqCdgUserGroups']:
                        return XiqCdgUserGroups
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['XiqCdgUserGroups'], typing.List['XiqCdgUserGroups']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_groups':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'XiqCdgUserGroups':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "create_time": create_time,
                "update_time": update_time,
                "org_id": org_id,
                "owner_id": owner_id,
                "group_type": group_type,
                "enable_email_approval": enable_email_approval,
                "enable_user_limitation": enable_user_limitation,
                "employee_group_type": employee_group_type,
                "employee_groups": employee_groups,
                "name": name,
                "restrict_number": restrict_number,
                "user_groups": user_groups,
            }
    
    update_time: MetaOapg.properties.update_time
    create_time: MetaOapg.properties.create_time
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["org_id"]) -> MetaOapg.properties.org_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner_id"]) -> MetaOapg.properties.owner_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_type"]) -> MetaOapg.properties.group_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_email_approval"]) -> MetaOapg.properties.enable_email_approval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_user_limitation"]) -> MetaOapg.properties.enable_user_limitation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_group_type"]) -> 'XiqEmployeeGroupType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employee_groups"]) -> MetaOapg.properties.employee_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["restrict_number"]) -> MetaOapg.properties.restrict_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_groups"]) -> MetaOapg.properties.user_groups: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "owner_id", "group_type", "enable_email_approval", "enable_user_limitation", "employee_group_type", "employee_groups", "name", "restrict_number", "user_groups", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_time"]) -> MetaOapg.properties.create_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["update_time"]) -> MetaOapg.properties.update_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["org_id"]) -> typing.Union[MetaOapg.properties.org_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner_id"]) -> typing.Union[MetaOapg.properties.owner_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_type"]) -> typing.Union[MetaOapg.properties.group_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_email_approval"]) -> typing.Union[MetaOapg.properties.enable_email_approval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_user_limitation"]) -> typing.Union[MetaOapg.properties.enable_user_limitation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_group_type"]) -> typing.Union['XiqEmployeeGroupType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employee_groups"]) -> typing.Union[MetaOapg.properties.employee_groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["restrict_number"]) -> typing.Union[MetaOapg.properties.restrict_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_groups"]) -> typing.Union[MetaOapg.properties.user_groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "create_time", "update_time", "org_id", "owner_id", "group_type", "enable_email_approval", "enable_user_limitation", "employee_group_type", "employee_groups", "name", "restrict_number", "user_groups", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        update_time: typing.Union[MetaOapg.properties.update_time, str, datetime, ],
        create_time: typing.Union[MetaOapg.properties.create_time, str, datetime, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        org_id: typing.Union[MetaOapg.properties.org_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        owner_id: typing.Union[MetaOapg.properties.owner_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        group_type: typing.Union[MetaOapg.properties.group_type, str, schemas.Unset] = schemas.unset,
        enable_email_approval: typing.Union[MetaOapg.properties.enable_email_approval, bool, schemas.Unset] = schemas.unset,
        enable_user_limitation: typing.Union[MetaOapg.properties.enable_user_limitation, bool, schemas.Unset] = schemas.unset,
        employee_group_type: typing.Union['XiqEmployeeGroupType', schemas.Unset] = schemas.unset,
        employee_groups: typing.Union[MetaOapg.properties.employee_groups, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        restrict_number: typing.Union[MetaOapg.properties.restrict_number, str, schemas.Unset] = schemas.unset,
        user_groups: typing.Union[MetaOapg.properties.user_groups, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqCredentialDistributionGroup':
        return super().__new__(
            cls,
            *_args,
            update_time=update_time,
            create_time=create_time,
            id=id,
            org_id=org_id,
            owner_id=owner_id,
            group_type=group_type,
            enable_email_approval=enable_email_approval,
            enable_user_limitation=enable_user_limitation,
            employee_group_type=employee_group_type,
            employee_groups=employee_groups,
            name=name,
            restrict_number=restrict_number,
            user_groups=user_groups,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_cdg_user_groups import XiqCdgUserGroups
from extremecloudiq.model.xiq_employee_group import XiqEmployeeGroup
from extremecloudiq.model.xiq_employee_group_type import XiqEmployeeGroupType
