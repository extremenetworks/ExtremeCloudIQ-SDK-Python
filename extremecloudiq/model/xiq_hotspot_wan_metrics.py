# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqHotspotWanMetrics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Hotspot WAN (Wide Area Network) metrics.
    """


    class MetaOapg:
        required = {
            "uplink_speed",
            "downlink_speed",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def status() -> typing.Type['XiqHotspotWanLinkStatus']:
                return XiqHotspotWanLinkStatus
            
            
            class downlink_speed(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 4194304
                    inclusive_minimum = 0
            
            
            class uplink_speed(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 4194304
                    inclusive_minimum = 0
            __annotations__ = {
                "status": status,
                "downlink_speed": downlink_speed,
                "uplink_speed": uplink_speed,
            }
    
    uplink_speed: MetaOapg.properties.uplink_speed
    downlink_speed: MetaOapg.properties.downlink_speed
    status: 'XiqHotspotWanLinkStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'XiqHotspotWanLinkStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["downlink_speed"]) -> MetaOapg.properties.downlink_speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uplink_speed"]) -> MetaOapg.properties.uplink_speed: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "downlink_speed", "uplink_speed", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'XiqHotspotWanLinkStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["downlink_speed"]) -> MetaOapg.properties.downlink_speed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uplink_speed"]) -> MetaOapg.properties.uplink_speed: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "downlink_speed", "uplink_speed", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        uplink_speed: typing.Union[MetaOapg.properties.uplink_speed, decimal.Decimal, int, ],
        downlink_speed: typing.Union[MetaOapg.properties.downlink_speed, decimal.Decimal, int, ],
        status: 'XiqHotspotWanLinkStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqHotspotWanMetrics':
        return super().__new__(
            cls,
            *_args,
            uplink_speed=uplink_speed,
            downlink_speed=downlink_speed,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_hotspot_wan_link_status import XiqHotspotWanLinkStatus
