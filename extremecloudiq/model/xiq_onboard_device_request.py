# coding: utf-8

"""
    ExtremeCloud IQ API

    ExtremeCloud IQ RESTful API for external and internal applications.  # noqa: E501

    The version of the OpenAPI document: 25.2.0.123
    Contact: support@extremenetworks.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from extremecloudiq import schemas  # noqa: F401


class XiqOnboardDeviceRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The payload to onboard devices
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def extreme() -> typing.Type['XiqExtremeDevices']:
                return XiqExtremeDevices
        
            @staticmethod
            def exos() -> typing.Type['XiqExosDevices']:
                return XiqExosDevices
        
            @staticmethod
            def voss() -> typing.Type['XiqVossDevices']:
                return XiqVossDevices
        
            @staticmethod
            def wing() -> typing.Type['XiqWingDevices']:
                return XiqWingDevices
        
            @staticmethod
            def dell() -> typing.Type['XiqDellDevices']:
                return XiqDellDevices
        
            @staticmethod
            def dt() -> typing.Type['XiqDigitalTwinDevices']:
                return XiqDigitalTwinDevices
            __annotations__ = {
                "extreme": extreme,
                "exos": exos,
                "voss": voss,
                "wing": wing,
                "dell": dell,
                "dt": dt,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extreme"]) -> 'XiqExtremeDevices': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exos"]) -> 'XiqExosDevices': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voss"]) -> 'XiqVossDevices': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wing"]) -> 'XiqWingDevices': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dell"]) -> 'XiqDellDevices': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dt"]) -> 'XiqDigitalTwinDevices': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["extreme", "exos", "voss", "wing", "dell", "dt", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extreme"]) -> typing.Union['XiqExtremeDevices', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exos"]) -> typing.Union['XiqExosDevices', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voss"]) -> typing.Union['XiqVossDevices', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wing"]) -> typing.Union['XiqWingDevices', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dell"]) -> typing.Union['XiqDellDevices', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dt"]) -> typing.Union['XiqDigitalTwinDevices', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["extreme", "exos", "voss", "wing", "dell", "dt", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        extreme: typing.Union['XiqExtremeDevices', schemas.Unset] = schemas.unset,
        exos: typing.Union['XiqExosDevices', schemas.Unset] = schemas.unset,
        voss: typing.Union['XiqVossDevices', schemas.Unset] = schemas.unset,
        wing: typing.Union['XiqWingDevices', schemas.Unset] = schemas.unset,
        dell: typing.Union['XiqDellDevices', schemas.Unset] = schemas.unset,
        dt: typing.Union['XiqDigitalTwinDevices', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'XiqOnboardDeviceRequest':
        return super().__new__(
            cls,
            *_args,
            extreme=extreme,
            exos=exos,
            voss=voss,
            wing=wing,
            dell=dell,
            dt=dt,
            _configuration=_configuration,
            **kwargs,
        )

from extremecloudiq.model.xiq_dell_devices import XiqDellDevices
from extremecloudiq.model.xiq_digital_twin_devices import XiqDigitalTwinDevices
from extremecloudiq.model.xiq_exos_devices import XiqExosDevices
from extremecloudiq.model.xiq_extreme_devices import XiqExtremeDevices
from extremecloudiq.model.xiq_voss_devices import XiqVossDevices
from extremecloudiq.model.xiq_wing_devices import XiqWingDevices
